<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – 规约</title>
    <link>/zh/tags/%E8%A7%84%E7%BA%A6/</link>
    <description>Recent content in 规约 on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 20 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/%E8%A7%84%E7%BA%A6/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: PostgreSQL开发规约（2018版）</title>
      <link>/zh/blog/dev/pg-convention/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/dev/pg-convention/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/W1hwbl3qmjC4Dcmadc8uSg&#34;&gt;微信公众号原文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x00背景&#34;&gt;0x00背景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;没有规矩，不成方圆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PostgreSQL的功能非常强大，但是要把PostgreSQL用好，需要后端、运维、DBA的协力配合。&lt;/p&gt;
&lt;p&gt;本文针对PostgreSQL数据库原理与特性，整理了一份开发规范，希望可以减少大家在使用PostgreSQL数据库过程中遇到的困惑。你好我也好，大家都好。&lt;/p&gt;
&lt;h2 id=&#34;0x01-命名规范&#34;&gt;0x01 命名规范&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;无名，万物之始，有名，万物之母。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【强制】 &lt;strong&gt;通用命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本规则适用于所有对象名，包括：库名、表名、表名、列名、函数名、视图名、序列号名、别名等。&lt;/li&gt;
&lt;li&gt;对象名务必只使用小写字母，下划线，数字，但首字母必须为小写字母，常规表禁止以&lt;code&gt;_&lt;/code&gt;打头。&lt;/li&gt;
&lt;li&gt;对象名长度不超过63个字符，命名统一采用&lt;code&gt;snake_case&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;禁止使用SQL保留字，使用&lt;code&gt;select pg_get_keywords();&lt;/code&gt; 获取保留关键字列表。&lt;/li&gt;
&lt;li&gt;禁止出现美元符号，禁止使用中文，不要以&lt;code&gt;pg&lt;/code&gt;开头。&lt;/li&gt;
&lt;li&gt;提高用词品味，做到信达雅；不要使用拼音，不要使用生僻冷词，不要使用小众缩写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;库命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库名最好与应用或服务保持一致，必须为具有高区分度的英文单词。&lt;/li&gt;
&lt;li&gt;命名必须以&lt;code&gt;&amp;lt;biz&amp;gt;-&lt;/code&gt;开头，&lt;code&gt;&amp;lt;biz&amp;gt;&lt;/code&gt;为具体业务线名称，如果是分片库必须以&lt;code&gt;-shard&lt;/code&gt;结尾。&lt;/li&gt;
&lt;li&gt;多个部分使用&lt;code&gt;-&lt;/code&gt;连接。例如：&lt;code&gt;&amp;lt;biz&amp;gt;-chat-shard&lt;/code&gt;，&lt;code&gt;&amp;lt;biz&amp;gt;-payment&lt;/code&gt;等，总共不超过三段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;角色命名规范&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库&lt;code&gt;su&lt;/code&gt;有且仅有一个：&lt;code&gt;postgres&lt;/code&gt;，用于流复制的用户命名为&lt;code&gt;replication&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;生产用户命名使用&lt;code&gt;&amp;lt;biz&amp;gt;-&lt;/code&gt;作为前缀，具体功能作为后缀。&lt;/li&gt;
&lt;li&gt;所有数据库默认有三个基础角色： &lt;code&gt;&amp;lt;biz&amp;gt;-read&lt;/code&gt;，&lt;code&gt;&amp;lt;biz&amp;gt;-write&lt;/code&gt;，&lt;code&gt;&amp;lt;biz&amp;gt;-usage&lt;/code&gt;，分别拥有所有表的只读，只写，函数的执行权限。&lt;/li&gt;
&lt;li&gt;生产用户，ETL用户，个人用户通过继承相应的基础角色获取权限。&lt;/li&gt;
&lt;li&gt;更为精细的权限控制使用独立的角色与用户，依业务而异。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;模式命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务统一使用&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;作为模式名，&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;为业务定义的名称，必须设置为&lt;code&gt;search_path&lt;/code&gt;首位元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dba&lt;/code&gt;，&lt;code&gt;monitor&lt;/code&gt;，&lt;code&gt;trash&lt;/code&gt;为保留模式名。&lt;/li&gt;
&lt;li&gt;分片模式命名规则采用：&lt;code&gt;rel_&amp;lt;partition_total_num&amp;gt;_&amp;lt;partition_index&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;无特殊理由不应在其他模式中创建对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;关系命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系命名以表意清晰为第一要义，不要使用含混的缩写，也不应过分冗长，遵循通用命名规则。&lt;/li&gt;
&lt;li&gt;表名应当使用复数名词，与历史惯例保持一致，但应尽量避免带有不规则复数形式的单词。&lt;/li&gt;
&lt;li&gt;视图以&lt;code&gt;v_&lt;/code&gt;作为命名前缀，物化视图使用&lt;code&gt;mv_&lt;/code&gt;作为命名前缀，临时表以&lt;code&gt;tmp_&lt;/code&gt;作为命名前缀。&lt;/li&gt;
&lt;li&gt;继承或分区表应当以父表表名作为前缀，并以子表特性（规则，分片范围等）作为后缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;索引命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建索引时如&lt;strong&gt;有条件&lt;/strong&gt;应当指定索引名称，并与PostgreSQL默认命名规则保持一致，避免重复执行时建立重复索引。&lt;/li&gt;
&lt;li&gt;用于主键的索引以&lt;code&gt;_pkey&lt;/code&gt;结尾，唯一索引以&lt;code&gt;_key&lt;/code&gt;结尾，用于&lt;code&gt;EXCLUDED&lt;/code&gt;约束的索引以&lt;code&gt;_excl&lt;/code&gt;结尾，普通索引以&lt;code&gt;_idx&lt;/code&gt;结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;函数命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以&lt;code&gt;select&lt;/code&gt;,&lt;code&gt;insert&lt;/code&gt;,&lt;code&gt;delete&lt;/code&gt;,&lt;code&gt;update&lt;/code&gt;,&lt;code&gt;upsert&lt;/code&gt;打头，表示动作类型。&lt;/li&gt;
&lt;li&gt;重要参数可以通过&lt;code&gt;_by_ids&lt;/code&gt;, &lt;code&gt;_by_user_ids&lt;/code&gt;的后缀在函数名中体现。&lt;/li&gt;
&lt;li&gt;避免函数重载，同名函数尽量只保留一个。&lt;/li&gt;
&lt;li&gt;禁止通过&lt;code&gt;BIGINT/INTEGER/SMALLINT&lt;/code&gt;等整型进行重载，调用时可能产生歧义。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;字段命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不得使用系统列保留字段名：&lt;code&gt;oid&lt;/code&gt;, &lt;code&gt;xmin&lt;/code&gt;, &lt;code&gt;xmax&lt;/code&gt;,&lt;code&gt;cmin&lt;/code&gt;, &lt;code&gt;cmax&lt;/code&gt;, &lt;code&gt;ctid&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;主键列通常命名为&lt;code&gt;id&lt;/code&gt;，或以&lt;code&gt;id&lt;/code&gt;作为后缀。&lt;/li&gt;
&lt;li&gt;创建时间通常命名为&lt;code&gt;created_time&lt;/code&gt;，修改时间通常命名为&lt;code&gt;updated_time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;布尔型字段建议使用&lt;code&gt;is_&lt;/code&gt;，&lt;code&gt;has_&lt;/code&gt;等作为前缀。&lt;/li&gt;
&lt;li&gt;其余各字段名需与已有表命名惯例保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;变量命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储过程与函数中的变量使用命名参数，而非位置参数。&lt;/li&gt;
&lt;li&gt;如果参数名与对象名出现冲突，在参数后添加&lt;code&gt;_&lt;/code&gt;，例如&lt;code&gt;user_id_&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;注释规范&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量为对象提供注释（&lt;code&gt;COMMENT&lt;/code&gt;），注释使用英文，言简意赅，一行为宜。&lt;/li&gt;
&lt;li&gt;对象的模式或内容语义发生变更时，务必一并更新注释，与实际情况保持同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x02-设计规范&#34;&gt;0x02 设计规范&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Suum cuique&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【强制】 &lt;strong&gt;字符编码必须为UTF8&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;禁止使用其他任何字符编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;容量规划&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单表记录过亿，或超过10GB的量级，可以考虑开始进行分表。&lt;/li&gt;
&lt;li&gt;单表容量超过1T，单库容量超过2T。需要考虑分片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;不要滥用存储过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储过程适用于封装事务，减少并发冲突，减少网络往返，减少返回数据量，执行&lt;strong&gt;少量&lt;/strong&gt;自定义逻辑。&lt;/li&gt;
&lt;li&gt;存储过程&lt;strong&gt;不适合&lt;/strong&gt;进行复杂计算，不适合进行平凡/频繁的类型转换与包装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;存储计算分离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移除数据库中&lt;strong&gt;不必要&lt;/strong&gt;的计算密集型逻辑，例如在数据库中使用SQL进行WGS84到其他坐标系的换算。&lt;/li&gt;
&lt;li&gt;例外：与数据获取、筛选密切关联的计算逻辑允许在数据库中进行，如PostGIS中的几何关系判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;主键与身份列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个表都必须有&lt;strong&gt;身份列&lt;/strong&gt;，原则上必须有主键，最低要求为拥有&lt;strong&gt;非空唯一约束&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;身份列用于唯一标识表中的任一元组，逻辑复制与诸多三方工具有赖于此。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;外键&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不建议使用外键，建议在应用层解决。使用外键时，引用必须设置相应的动作：&lt;code&gt;SET NULL&lt;/code&gt;, &lt;code&gt;SET DEFAULT&lt;/code&gt;, &lt;code&gt;CASCADE&lt;/code&gt;，慎用级联操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;慎用宽表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段数目超过15个的表视作宽表，宽表应当考虑进行纵向拆分，通过相同的主键与主表相互引用。&lt;/li&gt;
&lt;li&gt;因为MVCC机制，宽表的写放大现象比较明显，尽量减少对宽表的频繁更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;配置合适的默认值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有默认值的列必须添加&lt;code&gt;DEFAULT&lt;/code&gt;子句指定默认值。&lt;/li&gt;
&lt;li&gt;可以在默认值中使用函数，动态生成默认值（例如主键发号器）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;合理应对空值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段语义上没有零值与空值区分的，不允许空值存在，须为列配置&lt;code&gt;NOT NULL&lt;/code&gt;约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;唯一约束通过数据库强制&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一约束须由数据库保证，任何唯一列须有唯一约束。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXCLUDE&lt;/code&gt;约束是泛化的唯一约束，可以在低频更新场景下用于保证数据完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;注意整数溢出风险&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意SQL标准不提供无符号整型，超过&lt;code&gt;INTMAX&lt;/code&gt;但没超过&lt;code&gt;UINTMAX&lt;/code&gt;的值需要升格存储。&lt;/li&gt;
&lt;li&gt;不要存储超过&lt;code&gt;INT64MAX&lt;/code&gt;的值到&lt;code&gt;BIGINT&lt;/code&gt;列中，会溢出为负数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;统一时区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;TIMESTAMP&lt;/code&gt;存储时间，采用&lt;code&gt;utc&lt;/code&gt;时区。&lt;/li&gt;
&lt;li&gt;统一使用ISO-8601格式输入输出时间类型：&lt;code&gt;2006-01-02 15:04:05&lt;/code&gt;，避免DMY与MDY问题。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;TIMESTAMPTZ&lt;/code&gt;时，采用GMT/UTC时间，0时区标准时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;及时清理过时函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不再使用的，被替换的函数应当及时下线，避免与未来的函数发生冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;主键类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键通常使用整型，建议使用&lt;code&gt;BIGINT&lt;/code&gt;，允许使用不超过64字节的字符串。&lt;/li&gt;
&lt;li&gt;主键允许使用&lt;code&gt;Serial&lt;/code&gt;自动生成，建议使用&lt;code&gt;Default next_id()&lt;/code&gt;发号器函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;选择合适的类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能使用专有类型的，不使用字符串。（数值，枚举，网络地址，货币，JSON，UUID等）&lt;/li&gt;
&lt;li&gt;使用正确的数据类型，能显著提高数据存储，查询，索引，计算的效率，并提高可维护性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用枚举类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;较稳定的，取值空间较小（十几个内）的字段应当使用枚举类型，不要使用整型与字符串表示。&lt;/li&gt;
&lt;li&gt;使用枚举类型有性能、存储、可维护性上的优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;选择合适的文本类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL的文本类型包括 &lt;code&gt;char(n)&lt;/code&gt;, &lt;code&gt;varchar(n)&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通常建议使用&lt;code&gt;varchar&lt;/code&gt;或&lt;code&gt;text&lt;/code&gt;，带有&lt;code&gt;(n)&lt;/code&gt;修饰符的类型会检查字符串长度，会导致微小的额外开销，对字符串长度有限制时应当使用&lt;code&gt;varchar(n)&lt;/code&gt;，避免插入过长的脏数据。&lt;/li&gt;
&lt;li&gt;避免使用&lt;code&gt;char(n)&lt;/code&gt;，为了与SQL标准兼容，该类型存在不合直觉的行为表现（补齐空格与截断），且并没有存储和性能优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;选择合适的数值类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规数值字段使用&lt;code&gt;INTEGER&lt;/code&gt;。主键、容量拿不准的数值列使用&lt;code&gt;BIGINT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;无特殊理由不要用&lt;code&gt;SMALLINT&lt;/code&gt;，性能与存储提升很小，会有很多额外的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REAL&lt;/code&gt;表示4字节浮点数，&lt;code&gt;FLOAT&lt;/code&gt;表示8字节浮点数&lt;/li&gt;
&lt;li&gt;浮点数仅可用于末尾精度无所谓的场景，例如地理坐标，不要对浮点数使用等值判断。&lt;/li&gt;
&lt;li&gt;精确数值类型使用&lt;code&gt;NUMERIC&lt;/code&gt;，注意精度和小数位数设置。&lt;/li&gt;
&lt;li&gt;货币数值类型使用&lt;code&gt;MONEY&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用统一的函数创建语法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;签名单独占用一行（函数名与参数），返回值单启一行，语言为第一个标签。&lt;/li&gt;
&lt;li&gt;一定要标注函数易变性等级：&lt;code&gt;IMMUTABLE&lt;/code&gt;, &lt;code&gt;STABLE&lt;/code&gt;, &lt;code&gt;VOLATILE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;添加确定的属性标签，如：&lt;code&gt;RETURNS NULL ON NULL INPUT&lt;/code&gt;,&lt;code&gt;PARALLEL SAFE&lt;/code&gt;,&lt;code&gt;ROWS 1&lt;/code&gt;，注意版本兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;OR&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;REPLACE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FUNCTION&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nspname&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;myfunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;arg1_&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;TEXT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;arg2_&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;INTEGER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;RETURNS&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;VOID&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;LANGUAGE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SQL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;STABLE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PARALLEL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SAFE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ROWS&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;RETURNS&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INPUT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;【推荐】 &lt;strong&gt;针对可演化性而设计&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在设计表时，应当充分考虑未来的扩展需求，可以在建表时适当添加1~3个保留字段。&lt;/li&gt;
&lt;li&gt;对于多变的非关键字段可以使用JSON类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;选择合理的规范化等级&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许适当降低规范化等级，减少多表连接以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用新版本&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新版本有无成本的性能提升，稳定性提升，有更多新功能。&lt;/li&gt;
&lt;li&gt;充分利用新特性，降低设计复杂度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;慎用触发器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触发器会提高系统的复杂度与维护成本，不鼓励使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x03-索引规范&#34;&gt;0x03 索引规范&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Wer Ordnung hält, ist nur zu faul zum Suchen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【强制】 &lt;strong&gt;在线查询必须有配套索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有在线查询必须针对其访问模式设计相应索引，除极个别小表外不允许全表扫描。&lt;/li&gt;
&lt;li&gt;索引有代价，不允许创建不使用的索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;禁止在大字段上建立索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被索引字段大小无法超过2KB（1/3的页容量），原则上禁止超过64个字符。&lt;/li&gt;
&lt;li&gt;如有大字段索引需求，可以考虑对大字段取哈希，并建立函数索引。或使用其他类型的索引（GIN）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;明确空值排序规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如在可空列上有排序需求，需要在查询与索引中明确指定&lt;code&gt;NULLS FIRST&lt;/code&gt;还是&lt;code&gt;NULLS LAST&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;注意，&lt;code&gt;DESC&lt;/code&gt;排序的默认规则是&lt;code&gt;NULLS FIRST&lt;/code&gt;，即空值会出现在排序的最前面，通常这不是期望行为。&lt;/li&gt;
&lt;li&gt;索引的排序条件必须与查询匹配，如：&lt;code&gt;create index on tbl (id desc nulls last);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;利用GiST索引应对近邻查询问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统B树索引无法提供对KNN问题的良好支持，应当使用GiST索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;利用函数索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何可以由同一行其他字段推断得出的冗余字段，可以使用函数索引替代。&lt;/li&gt;
&lt;li&gt;对于经常使用表达式作为查询条件的语句，可以使用表达式或函数索引加速查询。&lt;/li&gt;
&lt;li&gt;典型场景：建立大字段上的哈希函数索引，为需要左模糊查询的文本列建立reverse函数索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;利用部分索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询中查询条件固定的部分，可以使用部分索引，减小索引大小并提升查询效率。&lt;/li&gt;
&lt;li&gt;查询中某待索引字段若只有有限几种取值，也可以建立几个相应的部分索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;利用范围索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于值与堆表的存储顺序线性相关的数据，如果通常的查询为范围查询，建议使用BRIN索引。&lt;/li&gt;
&lt;li&gt;最典型场景如仅追加写入的时序数据，BRIN索引更为高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;关注联合索引的区分度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分度高的列放在前面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x04-查询规范&#34;&gt;0x04 查询规范&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The limits of my language mean the limits of my world.&lt;/p&gt;
&lt;p&gt;—Ludwig Wittgenstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【强制】 &lt;strong&gt;读写分离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原则上写请求走主库，读请求走从库。&lt;/li&gt;
&lt;li&gt;例外：需要读己之写的一致性保证，且检测到显著的复制延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;快慢分离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产中1毫秒以内的查询称为快查询，生产中超过1秒的查询称为慢查询。&lt;/li&gt;
&lt;li&gt;慢查询必须走离线从库，必须设置相应的超时。&lt;/li&gt;
&lt;li&gt;生产中的在线普通查询执行时长，原则上应当控制在1ms内。&lt;/li&gt;
&lt;li&gt;生产中的在线普通查询执行时长，超过10ms需修改技术方案，优化达标后再上线。&lt;/li&gt;
&lt;li&gt;在线查询应当配置10ms数量级或更快的超时，避免堆积造成雪崩。&lt;/li&gt;
&lt;li&gt;Master与Slave角色不允许大批量拉取数据，数仓ETL程序应当从Offline从库拉取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;主动超时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为所有的语句配置主动超时，超时后主动取消请求，避免雪崩。&lt;/li&gt;
&lt;li&gt;周期性执行的语句，必须配置小于执行周期的超时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;关注复制延迟&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用必须意识到主从之间的同步延迟，并妥善处理好复制延迟超出合理范围的情况&lt;/li&gt;
&lt;li&gt;平时在0.1ms的延迟，在极端情况下可能达到十几分钟甚至小时量级。应用可以选择从主库读取，稍后再度，或报错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;使用连接池&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用必须通过连接池访问数据库，连接6432端口的pgbouncer而不是5432的postgres。&lt;/li&gt;
&lt;li&gt;注意使用连接池与直连数据库的区别，一些功能可能无法使用（比如Notify/Listen），也可能存在连接污染的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;禁止修改连接状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用公共连接池时禁止修改连接状态，包括修改连接参数，修改搜索路径，更换角色，更换数据库。&lt;/li&gt;
&lt;li&gt;万不得已修改后必须彻底销毁连接，将状态变更后的连接放回连接池会导致污染扩散。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;重试失败的事务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询&lt;/strong&gt;可能因为并发争用，管理员命令等原因被杀死，应用需要意识到这一点并在必要时重试。&lt;/li&gt;
&lt;li&gt;应用在数据库大量报错时可以触发断路器熔断，避免雪崩。但要注意区分错误的类型与性质。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;掉线重连&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接&lt;/strong&gt;可能因为各种原因被中止，应用&lt;strong&gt;必须&lt;/strong&gt;有掉线重连机制。&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;SELECT 1&lt;/code&gt;作为心跳包查询，检测连接的有消息，并定期保活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;在线服务应用代码禁止执行DDL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要在应用代码里搞大新闻。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;显式指定列名&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用&lt;code&gt;SELECT *&lt;/code&gt;，或在&lt;code&gt;RETURNING&lt;/code&gt;子句中使用&lt;code&gt;*&lt;/code&gt;。请使用具体的字段列表，不要返回用不到的字段。当表结构发生变动时（例如，新值列），使用列通配符的查询很可能会发生列数不匹配的错误。&lt;/li&gt;
&lt;li&gt;例外：当存储过程返回具体的表行类型时，允许使用通配符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;禁止在线查询全表扫描&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例外情况：常量极小表，极低频操作，表/返回结果集很小（百条记录/百KB内）。&lt;/li&gt;
&lt;li&gt;在首层过滤条件上使用诸如&lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;的否定式操作符会导致全表扫描，必须避免。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;禁止在事务中长时间等待&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启事务后必须尽快提交或回滚，超过10分钟的&lt;code&gt;IDEL IN Transaction&lt;/code&gt;将被强制杀死。&lt;/li&gt;
&lt;li&gt;应用应当开启AutoCommit，避免&lt;code&gt;BEGIN&lt;/code&gt;之后没有配对的&lt;code&gt;ROLLBACK&lt;/code&gt;或&lt;code&gt;COMMIT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;尽量使用标准库提供的事务基础设施，不到万不得已不要手动控制事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;使用游标后必须及时关闭&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【强制】 &lt;strong&gt;科学计数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count(*)&lt;/code&gt;是&lt;strong&gt;统计行数&lt;/strong&gt;的标准语法，与空值无关。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(col)&lt;/code&gt;统计的是&lt;code&gt;col&lt;/code&gt;列中的&lt;strong&gt;非空记录数&lt;/strong&gt;。该列中的NULL值不会被计入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(distinct col)&lt;/code&gt; 对&lt;code&gt;col&lt;/code&gt;列除重计数，同样忽视空值，即只统计非空不同值的个数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count((col1, col2))&lt;/code&gt;对多列计数，即使待计数的列全为空也会被计数，&lt;code&gt;(NULL,NULL)&lt;/code&gt;有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a(distinct (col1, col2))&lt;/code&gt;对多列除重计数，即使待计数列全为空也会被计数，&lt;code&gt;(NULL,NULL)&lt;/code&gt;有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;注意聚合函数的空值问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除了&lt;code&gt;count&lt;/code&gt;之外的所有聚合函数都会忽略空值输入，因此当输入值全部为空时，结果是&lt;code&gt;NULL&lt;/code&gt;。但&lt;code&gt;count(col)&lt;/code&gt;在这种情况下会返回0，是一个例外。&lt;/li&gt;
&lt;li&gt;如果聚集函数返回空并不是期望的结果，使用&lt;code&gt;coalesce&lt;/code&gt;来设置缺省值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】&lt;strong&gt;谨慎处理空值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确区分零值与空值，空值使用&lt;code&gt;IS NULL&lt;/code&gt;进行等值判断，零值使用常规的&lt;code&gt;=&lt;/code&gt;运算符进行等值判断。&lt;/li&gt;
&lt;li&gt;空值作为函数输入参数时应当带有类型修饰符，否则对于有重载的函数将无法识别使用何者。&lt;/li&gt;
&lt;li&gt;注意空值比较逻辑：任何涉及到空值比较运算结果都是&lt;code&gt;unknown&lt;/code&gt;，需要注意&lt;code&gt;unknown&lt;/code&gt;参与布尔运算的逻辑：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;：&lt;code&gt;TRUE or UNKNOWN&lt;/code&gt;会因为逻辑短路返回&lt;code&gt;TRUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;：&lt;code&gt;FALSE and UNKNOWN&lt;/code&gt;会因为逻辑短路返回&lt;code&gt;FALSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他情况只要运算对象出现&lt;code&gt;UNKNOWN&lt;/code&gt;，结果都是&lt;code&gt;UNKNOWN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空值与&lt;strong&gt;任何值&lt;/strong&gt;的逻辑判断，其结果都为空值，例如&lt;code&gt;NULL=NULL&lt;/code&gt;返回结果是&lt;code&gt;NULL&lt;/code&gt;而不是&lt;code&gt;TRUE/FALSE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;涉及空值与非空值的等值比较，请使用``IS DISTINCT FROM&lt;code&gt; &lt;/code&gt;进行比较，保证比较结果非空。&lt;/li&gt;
&lt;li&gt;空值与聚合函数：聚合函数当输入值&lt;strong&gt;全部&lt;/strong&gt;为NULL时，返回结果为NULL。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;注意序列号空缺&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当使用&lt;code&gt;Serial&lt;/code&gt;类型时，&lt;code&gt;INSERT&lt;/code&gt;，&lt;code&gt;UPSERT&lt;/code&gt;等操作都会消耗序列号，该消耗不会随事务失败而回滚。&lt;/li&gt;
&lt;li&gt;当使用整型作为主键，且表存在频繁插入冲突时，需要关注整型溢出的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】  &lt;strong&gt;重复查询使用准备语句&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复的查询应当使用&lt;strong&gt;准备语句（Prepared Statement）&lt;/strong&gt;，消除数据库硬解析的CPU开销。&lt;/li&gt;
&lt;li&gt;准备语句会修改连接状态，请注意连接池对于准备语句的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;选择合适的事务隔离等级&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认隔离等级为&lt;strong&gt;读已提交&lt;/strong&gt;，适合大多数简单读写事务，普通事务选择满足需求的最低隔离等级。&lt;/li&gt;
&lt;li&gt;需要事务级一致性快照的写事务，请使用&lt;strong&gt;可重复读&lt;/strong&gt;隔离等级。&lt;/li&gt;
&lt;li&gt;对正确性有严格要求的写入事务请使用&lt;strong&gt;可序列化&lt;/strong&gt;隔离等级。&lt;/li&gt;
&lt;li&gt;在RR与SR隔离等级出现并发冲突时，应当视错误类型进行积极的重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;判断结果存在性不要使用count&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;SELECT 1 FROM tbl WHERE xxx LIMIT 1&lt;/code&gt;判断是否存满足条件的列，要比Count快。&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;select exists(select * FROM app.sjqq where xxx limit 1)&lt;/code&gt;将存在性结果转换为布尔值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用RETURNING子句&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果用户需要在插入数据和，删除数据前，或者修改数据后马上拿到插入或被删除或修改后的数据，建议使用&lt;code&gt;RETURNING&lt;/code&gt;子句，减少数据库交互次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用UPSERT简化逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当业务出现插入-失败-更新的操作序列时，考虑使用&lt;code&gt;UPSERT&lt;/code&gt;替代。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;利用咨询锁应对热点并发&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对单行记录的极高频并发写入（秒杀），应当使用咨询锁对记录ID进行锁定。&lt;/li&gt;
&lt;li&gt;如果能在应用层次解决高并发争用，就不要放在数据库层面进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】&lt;strong&gt;优化IN操作符&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;EXISTS&lt;/code&gt;子句代替&lt;code&gt;IN&lt;/code&gt;操作符，效果更佳。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;=ANY(ARRAY[1,2,3,4])&lt;/code&gt;代替&lt;code&gt;IN (1,2,3,4)&lt;/code&gt;，效果更佳。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;不建议使用左模糊搜索&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左模糊搜索&lt;code&gt;WHERE col LIKE &#39;%xxx&#39;&lt;/code&gt;无法充分利用B树索引，如有需要，可用&lt;code&gt;reverse&lt;/code&gt;表达式函数索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;使用数组代替临时表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑使用数组替代临时表，例如在获取一系列ID的对应记录时。&lt;code&gt;=ANY(ARRAY[1,2,3])&lt;/code&gt;要比临时表JOIN好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x05-发布规范&#34;&gt;0x05 发布规范&lt;/h2&gt;
&lt;p&gt;【强制】 &lt;strong&gt;发布形式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前以邮件形式提交发布，发送邮件至dba@p1.com 归档并安排提交。&lt;/li&gt;
&lt;li&gt;标题清晰：xx项目需在xx库执行xx动作。&lt;/li&gt;
&lt;li&gt;目标明确：每个步骤需要在哪些实例上执行哪些操作，结果如何校验。&lt;/li&gt;
&lt;li&gt;回滚方案：任何变更都需要提供回滚方案，新建也需要提供清理脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】&lt;strong&gt;发布评估&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线上数据库发布需要经过研发自测，主管审核，（可选QA审核），DBA审核几个评估阶段。&lt;/li&gt;
&lt;li&gt;自测阶段应当确保变更在开发、预发环境执行正确无误。
&lt;ul&gt;
&lt;li&gt;如果是新建表，应当给出记录数量级，数据日增量预估值，读写量级预估。&lt;/li&gt;
&lt;li&gt;如果是新建函数，应当给出压测报告，至少需要给出平均执行时间。&lt;/li&gt;
&lt;li&gt;如果是模式迁移，必须梳理清楚所有上下游依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Team Leader需要对变更进行评估与审核，对变更内容负责。&lt;/li&gt;
&lt;li&gt;DBA对发布的形式与影响进行评估与审核。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;发布窗口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;19:00 后不允许数据库发布，紧急发布请TL做特殊说明，抄送CTO。&lt;/li&gt;
&lt;li&gt;16:00点后确认的需求将顺延至第二天执行。（以TL确认时间为准）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x06-管理规范&#34;&gt;0x06 管理规范&lt;/h2&gt;
&lt;p&gt;【强制】 &lt;strong&gt;关注备份&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每日全量备份，段文件持续归档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;关注年龄&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注数据库与表的年龄，避免事物ID回卷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;关注老化与膨胀&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注表与索引的膨胀率，避免性能劣化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;关注复制延迟&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控复制延迟，使用复制槽时更必须十分留意。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;遵循最小权限原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【强制】&lt;strong&gt;并发地创建与删除索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于生产表，必须使用&lt;code&gt;CREATE INDEX CONCURRENTLY&lt;/code&gt;并发创建索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;新从库数据预热&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;pg_prewarm&lt;/code&gt;，或逐渐接入流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【强制】 &lt;strong&gt;审慎地进行模式变更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加新列时必须使用不带默认值的语法，避免全表重写&lt;/li&gt;
&lt;li&gt;变更类型时，必要时应当重建所有依赖该类型的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;切分大批量操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大批量写入操作应当切分为小批量进行，避免一次产生大量WAL。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【推荐】 &lt;strong&gt;加速数据加载&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭&lt;code&gt;autovacuum&lt;/code&gt;，使用&lt;code&gt;COPY&lt;/code&gt;加载数据。&lt;/li&gt;
&lt;li&gt;事后建立约束与索引。&lt;/li&gt;
&lt;li&gt;调大&lt;code&gt;maintenance_work_mem&lt;/code&gt;，增大&lt;code&gt;max_wal_size&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;完成后执行&lt;code&gt;vacuum verbose analyze table&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
