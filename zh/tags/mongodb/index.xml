<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – MongoDB</title>
    <link>/zh/tags/mongodb/</link>
    <description>Recent content in MongoDB on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 04 Sep 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: MongoDB没有未来：好营销救不了烂芒果</title>
      <link>/zh/blog/db/bad-mongo/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/bad-mongo/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/bad-mongo/featured_hu02aa61ae1d9de35cbe238d2676170cb9_950024_640x0_resize_q75_catmullrom.jpg" width="640" height="366"/>]]>
        
        &lt;p&gt;这两天 MongoDB 整的营销花活让人眼花缭乱：《&lt;a href=&#34;https://mp.weixin.qq.com/s/ypV31fanKB6ZsFzuRYTwmQ&#34;&gt;MongoDB向PostgreSQL宣战&lt;/a&gt;》，《&lt;a href=&#34;https://mp.weixin.qq.com/s/SJw6S6k82bxOq1pWP3kDfw&#34;&gt;MongoDB 击败 PostgreSQL 赢下价值 300 亿美元项目&lt;/a&gt;》，以及原文 The Register 的《&lt;a href=&#34;https://www.theregister.com/2024/08/30/mongodb_postgresql/&#34;&gt;MongoDB在战胜强敌之后准备乱拳干翻 PostgreSQL&lt;/a&gt;》，活生生一副要乱拳打死老师傅的架势。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;300b.jpg&#34; src=&#34;/zh/blog/db/bad-mongo/300b.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;有朋友得意洋洋的特意转给我想看 PG 的笑话，这着实让我感到无奈 —— &lt;strong&gt;这么离谱的新闻都有人信！&lt;/strong&gt; 但事实是 —— &lt;strong&gt;这么离谱的东西真就有人信！&lt;/strong&gt; 包括某些CEO也照样会中招翻车。诚如石破天祖师爷所说：“&lt;strong&gt;永远不要低估好营销对烂产品的影响&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;把东西卖给估值300亿的公司，和做 300 亿的项目完全是两码事。当然，这不能怪人家眼拙，这是 MongoDB &lt;strong&gt;在营销上的一贯伎俩&lt;/strong&gt; —— 如果不仔细看原文，很难区分这个 300 亿指的是项目价值还是公司估值。&lt;/p&gt;
&lt;p&gt;在当下，MongoDB 在产品和技术上乏善可陈；在正确性，性能，功能以及各种维度上被 PostgreSQL 按在地上摩擦；在开发者中的流行度与口碑，以及DB-Engine 热度都不断下滑，MongoDB 公司本身也不赚钱，股价也刚经过大腰斩，亏损继续扩大；“营销” 也许是 MongoDB 唯一能拿出手的东西了。&lt;/p&gt;
&lt;p&gt;然而诚信是商业的根本，“好营销救不了烂芒果”，建立在谎言与忽悠之上的营销不会有好下场。今天我就来带大家看看，MongoDB 营销的锦绣丝绸被套里，填进去的都是些什么烂棉花。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;烂产品靠营销上位&#34;&gt;烂产品靠营销上位&lt;/h2&gt;
&lt;p&gt;图灵奖得主，数据库祖师爷 Stonebraker 老爷子在最近在 SIGMOD 2024 发表的名著级论文《&lt;a href=&#34;https://db.cs.cmu.edu/papers/2024/whatgoesaround-sigmodrec2024.pdf&#34;&gt;What goes around comes around&amp;hellip; And Around&lt;/a&gt;》中对此有过精辟的评价：“绝对不要低估好营销对&lt;strong&gt;烂产品&lt;/strong&gt;的影响 —— &lt;strong&gt;比如 MySQL 与 MongoDB&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/stonebraker.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个世界上有许多烂数据库 —— 但能用三寸不烂之舌把烂货成功吹成宝贝卖出去的，MongoDB 说自己是第一，MySQL 也只自认老二屈居人下。&lt;/p&gt;
&lt;p&gt;在所有关于 MongoDB 大忽悠的故事中，最让人印象深刻的是 LinkedIn 上的这篇《&lt;a href=&#34;https://mp.weixin.qq.com/s/e3_32Neoy5RVRBSozsa_7A&#34;&gt;MongoDB 3.2 —— 现由 PostgreSQL 强力驱动&lt;/a&gt;》 。
这篇文章的精彩之处在于，它是由 MongoDB 合作伙伴发出的血泪控诉：MongoDB 无视了自己合作伙伴的忠言劝告，拿了一个 PostgreSQL 伪装成自己的分析引擎，并在发布会上忽悠用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/mongo-powered-by-pg.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;作者作为 MongoDB 在分析领域的合作伙伴彻底灰心丧气，公开撰文发起控诉 —— “&lt;em&gt;MongoDB 的分析引擎是一个 PostgreSQL ，那你们真还不如直接去用 PostgreSQL&lt;/em&gt;”。&lt;/p&gt;
&lt;p&gt;像这样刻意造假忽悠的案例绝非个例，MongoDB 还在贬低同业产品自抬身价上有诸多记录。例如在官网文章《&lt;a href=&#34;https://www.mongodb.com/resources/compare/mongodb-postgresql/dsl-migrating-postgres-to-mongodb&#34;&gt;从PostgreSQL迁移到MongoDB&lt;/a&gt;》中，MongoDB 宣称自己是 “&lt;strong&gt;可扩展灵活的新一代现代通用数据库&lt;/strong&gt;”，
而 PostgreSQL 是 “&lt;strong&gt;复杂且容易出错的老旧单片关系数据库&lt;/strong&gt;”。完全无视了其实自己在整体的性能，功能，正确性，甚至自己标榜的应对大数据量的吞吐与可伸缩性上完全被 PostgreSQL 吊打的事实。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;功能被pgsql覆盖&#34;&gt;功能被PGSQL覆盖&lt;/h2&gt;
&lt;p&gt;JSON 文档确实是一个很受互联网应用开发者喜爱的特性。然而提供这一能力的数据库并非只有 MongoDB 。PostgreSQL 在十年前就已经提供了 SOTA 水平的 JSON 支持，并且仍然在不断演进改善。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/pg-jsonb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 的 JSON 支持是所有关系型数据库中最成熟与最早的（2012-2014），早于 SQL/JSON 标准或者说直接影响了 SQL/JSON 标准建立（2016）。
更重要的是，它的文档特性实现质量很高。相比之下 —— 同样在营销上号称支持 JSON 的MySQL，实际上是个简陋的 BLOB 换皮，&lt;a href=&#34;https://mp.weixin.qq.com/s/JgGCn9o2-DNPNqazPZXTtA&#34;&gt;跟 9.0 向量类型有一拼&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;数据库祖师爷 Stonebraker 表示过，带有可扩展类型的关系模型早已覆盖了数据库世界的各个角落，而 NoSQL 运动是数据库发展历史上的一段弯路：&lt;strong&gt;关系模型是向下兼容文档模型的&lt;/strong&gt;。
文档模型跟几十年前范式化 vs 反范式化的大讨论实质是一样的 —— 1.只有有任何非一对多的关系，就会出现数据重复；2. 用预计算的JOIN未必比现场JOIN更快；3 数据没有独立性。
用户可以假设自己的应用场景是独立 KV 式缓存访问，但哪怕只要添加一个稍微复杂一点的功能，开发者就会面临几十年前就讨论过的数据重复困境。&lt;/p&gt;
&lt;p&gt;PostgreSQL 在功能上是 MongoDB 的上位替代，所以可以对 MongoDB 的用例做到向下兼容 —— PostgreSQL 能做的MongoDB 做不了；而 MongoDB 能做的 PostgreSQL 也能做：你可以在PG中创建一个只有 &lt;code&gt;data JSONB&lt;/code&gt; 列的表，然后使用各种 JSON 查询与索引来处理这里的数据；如果你确实觉得花几秒钟建表仍然是一个额外负担，那么在生态中还有各种各样基于 PostgreSQL 提供 MongoDB API，甚至 MongoDB 线缆协议的解决方案。&lt;/p&gt;
&lt;p&gt;例如，FerretDB 项目通过中间件的方式在 PostgreSQL 集群上实现了 MongoDB 线缆协议兼容性 —— MongoDB 应用甚至都不需要更换客户端驱动，修改业务代码就能迁移到 PostgreSQL 上。
（另一被原位兼容的是 &lt;a href=&#34;https://mp.weixin.qq.com/s/c2TmMo0DflkSUli1BsLthQ&#34;&gt;SQL Server&lt;/a&gt; ）； PongoDB 则是直接在 NodeJS 客户端驱动侧将 PG 仿真成一个 MongoDB。
此外还有 &lt;code&gt;mongo_fdw&lt;/code&gt;，可以让 PG 从 MongoDB 中用 SQL 读取数据，&lt;code&gt;wal2mongo&lt;/code&gt; 将 PG 变更抽取为 BSON。&lt;/p&gt;
&lt;p&gt;例如 &lt;a href=&#34;/zh/blog/pg/ferretdb&#34;&gt;&lt;strong&gt;FerretDB&lt;/strong&gt;&lt;/a&gt; 项目通过中间件的方式在 PostgreSQL 集群上实现了 MongoDB 线缆协议兼容性 —— MongoDB 应用甚至都不需要更换客户端驱动，修改业务代码就能迁移到 PostgreSQL 上。（另一被原位线缆兼容的是 &lt;a href=&#34;/zh/blog/pg/pg-replace-mssql&#34;&gt;&lt;strong&gt;SQL Server&lt;/strong&gt; &lt;/a&gt;）；&lt;strong&gt;PongoDB&lt;/strong&gt; 则是直接在 NodeJS 客户端驱动侧将 PG 仿真成一个 MongoDB。此外还有 &lt;code&gt;mongo_fdw&lt;/code&gt;，可以让 PG 从 MongoDB 中用 SQL 读取数据，&lt;code&gt;wal2mongo&lt;/code&gt; 将 PG 变更抽取为 BSON。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ferret.webp&#34; src=&#34;/zh/blog/db/bad-mongo/ferret.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;在易用性上，各家云厂商都推出了开箱即用的 PG RDS 服务，想要开源自建也有 &lt;a href=&#34;https://pigsty.cc/zh/&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt; 这样开箱即用的解决方案，还有 Serverless 的 Neon 更是让PG上手门槛低到一行命令就能直接用起来。&lt;/p&gt;
&lt;p&gt;此外，相比于 MongoDB 使用的 SSPL 协议（已经不再是一个开源协议了），PostgreSQL 使用的类 BSD 开源协议显然要友善的多，PG可以在不需要软件授权费的情况下，提供更好的上位功能替代 —— Do more pay less! 不赢都难。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正确性与性能被吊打&#34;&gt;正确性与性能被吊打&lt;/h2&gt;
&lt;p&gt;对于数据库来说，&lt;strong&gt;正确性至关重要&lt;/strong&gt; —— 中立的分布式事务测试框架 JEPSEN 对 MongoDB 的正确性做过评测：结果可以用 “&lt;strong&gt;一塌糊涂&lt;/strong&gt;”形容（BTW：另一个难兄难弟是 &lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当然，MongoDB 的强项就是面不改色心不跳的 “忽悠“，尽管 JEPSEN 提了这么多的问题，在 MongoDB 官网上，关于 Jespen 的评测是这么介绍的：”&lt;em&gt;到目前为止，因果一致性通常仅限于研究项目&amp;hellip;&amp;hellip;MongoDB 是我们所知的第一个提供实现的商业数据库之一&lt;/em&gt;“&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/jepsen-mongo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个例子再次体现了 MongoDB 在营销上的脸皮 —— 用一种极其精致的语言艺术，从一大坨 Bullshit 中精心挑选出了一颗未消化的花生米，而一笔带过在正确性/一致性上的各种致命硬伤。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一个有趣的点是&lt;strong&gt;性能&lt;/strong&gt;。作为一个专用的文档数据库，&lt;strong&gt;性能&lt;/strong&gt; 应当是其相对于通用数据库的杀手级特性。&lt;/p&gt;
&lt;p&gt;先前有一篇《《&lt;a href=&#34;https://mp.weixin.qq.com/s/V4V5eTWEb02NBIO5kfZt7A&#34;&gt;从 MongoDB 到 PostgreSQL 的大迁移&lt;/a&gt;》引发了 MongoDB 用户的关注，我的用户群里有位朋友 @flyingcrp 问了这样一个问题 —— 为什么PG上的一个插件或者功能点就能顶得上别人一个完整的产品？&lt;/p&gt;
&lt;p&gt;当然也不乏持相反观点的朋友 —— PG的 JSON 性能肯定比不过细分领域的专业产品 —— 一个专用数据库如果连性能都干不过通用数据库，那还活个什么劲儿？&lt;/p&gt;
&lt;p&gt;这个讨论引起了我的兴趣，这些命题成立吗？于是，我做了一些简单的检索与研究，结果发现了一些非常有趣且震惊的结论：例如，在 MongoDB 的看家本领 —— JSON 存储与检索性能上，PostgreSQL 已经吊打 MongoDB 了。&lt;/p&gt;
&lt;p&gt;来自 ONGRES 与 EDB 的一份 &lt;a href=&#34;https://info.enterprisedb.com/rs/069-ALB-339/images/PostgreSQL_MongoDB_Benchmark-WhitepaperFinal.pdf&#34;&gt;PG vs Mongo 性能对比评测报告&lt;/a&gt;  详细对比了两者在 OLTP / OLAP 上的性能，结果一目了然。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/mongo-pg-bench.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一份更近一点的&lt;a href=&#34;https://medium.com/@yurexus/can-postgresql-with-its-jsonb-column-type-replace-mongodb-30dc7feffaf3&#34;&gt;性能对比&lt;/a&gt; 着重测试了 JSONB / GIN 索引下的表现对比，得出的结论也是：PostgreSQL JSONB 列是 MongoDB 的替代。&lt;/p&gt;
&lt;p&gt;在当下，&lt;a href=&#34;/zh/blog/pg/pg-performence&#34;&gt;&lt;strong&gt;单机 PostgreSQL 性能&lt;/strong&gt;&lt;/a&gt; 可以轻松 Scale 到几十TB ～ 几百TB数量级，支撑几十万的点写入 QPS 与几百万的点查询 QPS。只用 PostgreSQL 支撑业务到百万日活 / 百万美元营收甚至直接 IPO 都毫无问题。&lt;/p&gt;
&lt;p&gt;老实说，MongoDB 的性能已经完全跟不上时代了，而它引以为傲的“内置分片”可伸缩性，&lt;a href=&#34;/zh/blog/pg/pg-scalability&#34;&gt;&lt;strong&gt;在软件架构与性能突飞猛进&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&#34;/zh/blog/cloud/bonus&#34;&gt;&lt;strong&gt;硬件遵循摩尔定律指数发展&lt;/strong&gt;&lt;/a&gt; 的当下显得毫无意义。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;流行度热度在衰退&#34;&gt;流行度热度在衰退&lt;/h2&gt;
&lt;p&gt;如果我们观察 DB-Engine 热度分数，不难看出过去十年中，拥有最大增长的两个数据库就是 PostgreSQL 与 MongoDB 。可以说这两者是移动互联网时代中数据领域的最大赢家。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine.png&#34; src=&#34;/zh/blog/db/bad-mongo/db-engine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但它们的区别在于，PostgreSQL 仍然在继续增长，甚至已经在 StackOverflow 全球开发者调研中，连续三年成为 &lt;a href=&#34;/zh/blog/pg/pg-in-2024&#34;&gt;&lt;strong&gt;最流行的数据库&lt;/strong&gt;&lt;/a&gt; 并势头不减赢麻了。而 MongoDB 在 2021 年开始就掉头向下开始过气。使用率，口碑，需求度都出现了停滞或扭头向下的发展趋势：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;sf-metric.png&#34; src=&#34;/zh/blog/db/bad-mongo/sf-metric.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 StackOverflow 年度全球开发者调研中，提供了主要的数据库用户的转移关系图。不难看出，MongoDB 用户的最大流出项就是 PostgreSQL。而会去使用 MongoDB 的往往是 MySQL 用户。&lt;/p&gt;
&lt;p&gt;MongoDB 和 MySQL 属于那种典型的 “面向初学者” 的数据库，针对小白做了许多无底线讨好性的妥协设计 —— 从统计中不难看出它们在新手中的使用率比专业开发者中更高。
与之相反的则是 PostgreSQL，在专业开发者中的使用比例要比新手中高得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/transition.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;任何开发者都会经历初学者状态，我最初也是从 MySQL / Mongo 开始与数据库打交道的，但很多人就止步于此，而有追求的工程师则会不断学习进步，提升自己的品味与技术鉴别力，使用更好用、更强大的技术来更新自己的武器库。&lt;/p&gt;
&lt;p&gt;而趋势是：越来越多的用户在提升的过程中，从 MongoDB 和 MySQL 迁移到了上位替代 PostgreSQL 中。从而成就了新一代世界上最流行的数据库 —— PostgreSQL。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;风评已然臭不可闻&#34;&gt;风评已然臭不可闻&lt;/h2&gt;
&lt;p&gt;许多使用过 MongoDB 的开发者都对其留下了极其恶劣的印象，包括我自己。我上一次和 MongoDB 打交道是在 2016 年。我们部门先前用 MongoDB 搭建了一套实时统计平台，存放全网应用下载/安装/启动计数器，几 TB 规模的数据。我负责把这套在线业务的 MongoDB 迁移到 PostgreSQL。&lt;/p&gt;
&lt;p&gt;在这个过程中，我对 MongoDB 留下了&lt;strong&gt;糟糕的印象&lt;/strong&gt; —— 我花费了很多时间清洗 MongoDB 中模式错乱的垃圾数据。包括一些匪夷所思的问题（比如 Collection 里有整本的小说，SQL 注入的脚本，非法的零字符、Unicode码位与Surrogate Pair，各种花里胡哨的模式），堪称是一个史诗级的垃圾箱。&lt;/p&gt;
&lt;p&gt;在这个过程中，我也深入研究了 MongoDB 的查询语言，并将其翻译为标准 SQL。我甚至使用 Multicorn 写了一个 MongoDB 的外部数据源包装器 FDW 来做到这一点，顺便还水了篇 &lt;a href=&#34;https://vonng.com/pdf/unified_access_layer_with_postgresql_fdw.pdf&#34;&gt;关于 Mongo/HBase FDW 的论文&lt;/a&gt;。（比较巧的是，我那时候确实不知道 —— MongoDB 官方竟然也是这么用FDW干分析的！）&lt;/p&gt;
&lt;p&gt;总体来说，在这趟深度使用与迁移过程中，我对 MongoDB 感到非常失望，感觉到自己的时间被毫无意义的东西给浪费掉了。
当然后来我也发现，并不是只有我一个人有这种感受，在 HN 和 Reddit 上有无数关于 MongoDB 的嘲讽与吐槽：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/&#34;&gt;告别 MongoDB。迎接 PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.enterprisedb.com/postgres-plus-edb-blog/marc-linster/postgres-outperforms-mongodb-and-ushers-new-developer-reality&#34;&gt;Postgres 性能优于 MongoDB，并引领开发者新现实&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/errbit/errbit/issues/614&#34;&gt;MongoDB 已死。PostgreSQL 万岁 :)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/&#34;&gt;你永远不应该使用 MongoDB 的理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airpair.com/postgresql/posts/sql-vs-nosql-ko-postgres-vs-mongo&#34;&gt;SQL vs NoSQL 决斗。Postgres vs Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svs.io/post/31724990463/why-i-migrated-away-from-mongodb&#34;&gt;为什么我放弃了 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34;&gt;为什么你永远永远永远不该使用 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aptuz.com/blog/is-postgres-nosql-database-better-than-mongodb/&#34;&gt;Postgres NoSQL 比 MongoDB 更好吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.userlike.com/en/blog/2015/10/09/bye-by-mysql-and-mongodb-guten-tag-postgresql&#34;&gt;再见 MongoDB。你好 PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于这篇《MongoDB挑战PG》的新闻，HN评论区是这样的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hackernews.png&#34; src=&#34;/zh/blog/db/bad-mongo/hackernews.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于 MongoDB，Reddit 里的评论是这样的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;reddit-comment.png&#34; src=&#34;/zh/blog/db/bad-mongo/reddit-comment.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;能让开发者专门抽出时间写文章来骂它，MongoDB 的恶劣营销功不可没：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;blog.png&#34; src=&#34;/zh/blog/db/bad-mongo/blog.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;能让合作伙伴&lt;a href=&#34;https://mp.weixin.qq.com/s/e3_32Neoy5RVRBSozsa_7A&#34;&gt;破口大骂，吹哨揭发&lt;/a&gt;，我看 MongoDB 也是独此一家：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;shotgun.png&#34; src=&#34;/zh/blog/db/bad-mongo/shotgun.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mongodb没有未来&#34;&gt;MongoDB没有未来&lt;/h2&gt;
&lt;p&gt;Stonebraker 表示过，带有可扩展类型的关系模型早已覆盖了数据库世界的各个角落，而 NoSQL 运动是数据库发展历史上的一段弯路。
《种瓜得瓜》一文认为未来文档数据库的发展趋势是向关系数据库靠拢，重新把自己当初“鄙视”的 SQL / ACID 给加回来，以弥补自己与 RDBMS 的智力差距，最终趋同于 RDBMS 。&lt;/p&gt;
&lt;p&gt;但是问题就来了，如果这些文档数据库最终还是要变成关系数据库，那么为什么不直接用 PostgreSQL 关系数据库呢？难道用户可以指望 MongoDB 这孤家寡人的一家商业数据库公司，能够在这个赛道赶上整个 PostgreSQL 开源生态？—— 这个生态可是包含了几乎所有软件/云/科技巨头在内 —— &lt;strong&gt;能战胜一个生态的，只有另一个生态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 MongoDB 不断重新发明 RDBMS 世界的各种轮子，拙劣地跟在 PG 后面亦步亦趋补课，又同时把 PG 描述为 “复杂且容易出错旧的单片关系数据库” 时。PostgreSQL 已经成长为一个超出 MongoDB 想象的多模态超融合数据库，它已经通过几百个扩展插件成为&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;&lt;strong&gt;数据库领域的全能王霸主&lt;/strong&gt;&lt;/a&gt;。JSON 仅仅是其武库中的冰山一角，还有 XML，全文检索，向量嵌入，AIML，地理信息，时序数据，分布式，消息队列，FDW，以及二十多种存储过程语言支持。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ecosystem.jpg&#34; src=&#34;/zh/blog/db/bad-mongo/ecosystem.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 PostgreSQL ，你可以做到许多超出想象的事情：你可以在数据库内发 HTTP 请求，用XPATH 解析，用 Cron 插件调度写爬虫，原地入库后用机器学习扩展分析，调用大模型创建向量Embedding 用图扩展构建知识图谱，用包括JS在内的二十多种语言编写存储过程，并在库内拉起 HTTP 服务器对外 Serve。这种匪夷所思的能力是 MongoDB 以及其他“纯”关系型数据库难望其项背的。&lt;/p&gt;
&lt;p&gt;MongoDB 根本没有与 PostgreSQL 在产品、技术上堂堂正正一战的能力，因此只能在营销上使阴招，暗搓搓的下绊子，但这种做法只会让更多人看清它的真面目。&lt;/p&gt;
&lt;p&gt;作为一个上市公司，MongoDB 的股价也已经经历了一次大腰斩，而且亏损持续扩大。产品与技术上的落后，以及运营上的不诚信，都让人怀疑它的未来。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;stock.png&#34; src=&#34;/zh/blog/db/bad-mongo/stock.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我认为任何开发者，创业者，投资人都不应该把赌注押在 MongoDB 上
—— &lt;strong&gt;这确实是一个没有希望，也没有未来的数据库&lt;/strong&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: FerretDB：假扮成MongoDB的PG</title>
      <link>/zh/blog/pg/ferretdb/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/ferretdb/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/ferretdb/featured_hu1e4ff0222d0314d966cbf4927e40d805_371286_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="640"/>]]>
        
        &lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; 曾经是一项令人惊叹的技术，让开发者能够抛开关系型数据库的“模式束缚”，快速构建应用程序。然而随着时间推移，MongoDB 放弃了它的开源本质，这使得许多开源项目和早期商业项目无法使用它。&lt;/p&gt;
&lt;p&gt;大多数 MongoDB 用户其实并不需要 MongoDB 提供的高级功能，但他们确实需要一个易于使用的&lt;strong&gt;开源&lt;/strong&gt;文档数据库解决方案。PostgreSQL 的 JSON 功能支持已经足够完善了：二进制存储 JSONB，GIN 任意字段索引 ，各种 JSON 处理函数，JSON PATH 和 JSON Schema，PG早已是一个功能完备，性能强大的文档数据库了。但是提供替代的功能，和&lt;strong&gt;直接仿真&lt;/strong&gt;还是不一样的。&lt;/p&gt;
&lt;p&gt;为了填补这个空白，&lt;strong&gt;FerretDB&lt;/strong&gt; 应运而生，旨在提供一个&lt;strong&gt;真正开源&lt;/strong&gt;的 &lt;strong&gt;MongoDB&lt;/strong&gt; 替代。这是一个非常有趣的项目，之前的名字叫 “&lt;strong&gt;MangoDB&lt;/strong&gt;”，因为有碰瓷 &amp;ldquo;&lt;strong&gt;MongoDB&lt;/strong&gt;&amp;rdquo; 的嫌疑（芒果DB vs 蒙古DB），所以在 1.0 版本改成了现在的名字 FerretDB。FerretDB 可以为使用 MongoDB 驱动的应用提供一个丝滑迁移到 PostgreSQL 的过渡方案。&lt;/p&gt;
&lt;p&gt;它的功能就是让 PostgreSQL 假扮成 MongoDB。它是一个为 PG 提供 MongoDB Wire Protocol 支持的协议转换中间件/Proxy。上次做过这种事的插件是 AWS 的 Babelfish，让 PostgreSQL 兼容 SQL Service 的线缆协议假扮成 Microsoft SQL Server。&lt;/p&gt;
&lt;p&gt;FerretDB 作为一个选装组件，对丰富 PostgreSQL 生态大有裨益。Pigsty 在 1.x 中就提供了基于 Docker 的 FerretDB 模板，在 v2.3 中更是提供了原生部署支持。目前，Pigsty 社区已经与 FerretDB 社区成为了合作伙伴，后续将进行深度的合作与适配支持。&lt;/p&gt;
&lt;p&gt;本文简单介绍了 FerretDB 的安装、部署与使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;在部署 Mongo (FerretDB) 集群前，你需要先在配置清单中使用相关参数定义好它。下面的例子将默认的单节点 &lt;code&gt;pg-meta&lt;/code&gt; 集群的 &lt;code&gt;meta&lt;/code&gt; 数据库作为 FerretDB 的底层存储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_pgurl&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres://dbuser_meta:DBUser.Meta@10.10.10.10:5432/meta&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;mongo_cluster&lt;/code&gt; 与 &lt;code&gt;mongo_seq&lt;/code&gt; 属于不可或缺的身份参数，对于 FerretDB 来说，还有一个必须提供的参数是 &lt;code&gt;mongo_pgurl&lt;/code&gt;，指定了底层 PG 的位置。&lt;/p&gt;
&lt;p&gt;您可以使用 服务 来接入高可用的 PostgreSQL 集群，并部署多个 FerretDB 实例副本并绑定 L2 VIP 以实现 FerretDB 层本身的高可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ha&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.45&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.47&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_pgurl&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres://test:test@10.10.10.3:5436/test&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_vrid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;128&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;eth1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;管理&#34;&gt;管理&lt;/h2&gt;
&lt;h3 id=&#34;创建mongo集群&#34;&gt;创建Mongo集群&lt;/h3&gt;
&lt;p&gt;在配置清单中定义好MONGO集群后，您可以使用以下命令完成安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./mongo.yml -l ferret   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 在 ferret 分组上安装“MongoDB/FerretDB”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 FerretDB 使用了 PostgreSQL 作为底层存储，所以重复运行此剧本通常并无大碍。&lt;/p&gt;
&lt;h3 id=&#34;移除mongo集群&#34;&gt;移除Mongo集群&lt;/h3&gt;
&lt;p&gt;要移除 Mongo/FerretDB 集群，运行 &lt;code&gt;mongo.yml&lt;/code&gt;剧本的子任务：&lt;code&gt;mongo_purge&lt;/code&gt;，并使用 &lt;code&gt;mongo_purge&lt;/code&gt; 命令行参数即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./mongo.yml -e &lt;span style=&#34;color:#000&#34;&gt;mongo_purge&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt; -t mongo_purge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装mongosh&#34;&gt;安装MongoSH&lt;/h3&gt;
&lt;p&gt;您可以使用 MongoSH 作为客户端工具访问 FerretDB 集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt; /etc/yum.repos.d/mongo.repo &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;[mongodb-org-6.0]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;name=MongoDB Repository
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/6.0/$basearch/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;gpgcheck=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;enabled=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install -y mongodb-mongosh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，您也可以直接安装 &lt;code&gt;mongosh&lt;/code&gt; 的 RPM 包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/mongodb/yum/el7/RPMS/mongodb-mongosh-1.9.1.x86_64.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;连接到ferretdb&#34;&gt;连接到FerretDB&lt;/h3&gt;
&lt;p&gt;你可以使用 MongoDB 连接串，用任何语言的 MongoDB 驱动访问 FerretDB，这里以上面安装的 &lt;code&gt;mongosh&lt;/code&gt; 命令行工具为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://test:test@10.10.10.11:27017/test?authMechanism=PLAIN&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pigsty 管理的 PostgreSQL 集群默认使用 &lt;code&gt;scram-sha-256&lt;/code&gt; 作为默认的认证方式，因此，您必须使用 &lt;code&gt;PLAIN&lt;/code&gt; 认证方式连接至 FerretDB。参阅 FerretDB：认证[17] 获取详细信息。&lt;/p&gt;
&lt;p&gt;你也可以使用其他 PostgreSQL 用户来访问 FerretDB，只要在连接串中指定即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_dba:DBUser.DBA@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;p&gt;你可以连接到 FerretDB 并假装它是一个 MongoDB 集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongosh &amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;MongoDB 的命令会被翻译为&lt;code&gt;SQL&lt;/code&gt;命令，在底下的 PostgreSQL 中执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;                            &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE SCHEMA test;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.dropDatabase&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;                   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DROP SCHEMA test;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.createCollection&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE TABLE posts(_data JSONB,...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.insert&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;({&lt;/span&gt;                   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# INSERT INTO posts VALUES(...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Post One&amp;#39;&lt;/span&gt;,body: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Body of post one&amp;#39;&lt;/span&gt;,category: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;News&amp;#39;&lt;/span&gt;,tags: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;news&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;events&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;,status: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,date: Date&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.find&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;.limit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;.pretty&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SELECT * FROM posts LIMIT 2;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.createIndex&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;({&lt;/span&gt; title: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;})&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE INDEX ON posts(_data-&amp;gt;&amp;gt;&amp;#39;title&amp;#39;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你不是很熟悉 MongoDB，这里有一个快速上手教程，同样适用于 FerretDB： Perform CRUD Operations with MongoDB Shell[18]&lt;/p&gt;
&lt;p&gt;如果你希望生成一些样例负载，可以使用 &lt;code&gt;mongosh&lt;/code&gt; 执行以下的简易测试剧本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt; benchmark.js &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;&amp;#39;EOF&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;const coll = &amp;#34;testColl&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;const numDocs = 10000;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // insert
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).insert({ num: i, name: &amp;#34;MongoDB Benchmark Test&amp;#34; });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // select
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).find({ num: i });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // update
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).update({ num: i }, { $set: { name: &amp;#34;Updated&amp;#34; } });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // delete
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).deleteOne({ num: i });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt; benchmark.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以查阅 FerretDB 支持的 MongoDB命令，同时还有一些&lt;a href=&#34;https://docs.ferretdb.io/diff/&#34;&gt;已知的区别&lt;/a&gt;，对于基本的使用来说，通常不是什么大问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FerretDB uses the same protocol error names and codes, but the exact error messages may be different in some cases.&lt;/li&gt;
&lt;li&gt;FerretDB does not support NUL (&lt;code&gt;\0&lt;/code&gt;) characters in strings.&lt;/li&gt;
&lt;li&gt;FerretDB does not support nested arrays.&lt;/li&gt;
&lt;li&gt;FerretDB converts &lt;code&gt;-0&lt;/code&gt; (negative zero) to &lt;code&gt;0&lt;/code&gt; (positive zero).&lt;/li&gt;
&lt;li&gt;Document restrictions:
&lt;ul&gt;
&lt;li&gt;document keys must not contain &lt;code&gt;.&lt;/code&gt; sign;&lt;/li&gt;
&lt;li&gt;document keys must not start with &lt;code&gt;$&lt;/code&gt; sign;&lt;/li&gt;
&lt;li&gt;document fields of double type must not contain &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When insert command is called, insert documents must not have duplicate keys.&lt;/li&gt;
&lt;li&gt;Update command restrictions:
&lt;ul&gt;
&lt;li&gt;update operations producing &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; are not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database and collection names restrictions:
&lt;ul&gt;
&lt;li&gt;name cannot start with the reserved prefix &lt;code&gt;_ferretdb_&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;database name must not include non-latin letters;&lt;/li&gt;
&lt;li&gt;collection name must be valid UTF-8 characters;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FerretDB offers the same validation rules for the &lt;code&gt;scale&lt;/code&gt; parameter in both the &lt;code&gt;collStats&lt;/code&gt; and &lt;code&gt;dbStats&lt;/code&gt; commands. If an invalid &lt;code&gt;scale&lt;/code&gt; value is provided in the &lt;code&gt;dbStats&lt;/code&gt; command, the same error codes will be triggered as with the &lt;code&gt;collStats&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;剧本&#34;&gt;剧本&lt;/h2&gt;
&lt;p&gt;Pigsty 提供了一个内置的剧本： &lt;code&gt;mongo.yml&lt;/code&gt;，用于在节点上安装 FerretDB 集群。&lt;/p&gt;
&lt;h3 id=&#34;mongoyml&#34;&gt;&lt;code&gt;mongo.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;该剧本由以下子任务组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mongo_check&lt;/code&gt; ：检查 mongo 身份参数•&lt;code&gt;mongo_dbsu&lt;/code&gt; ：创建操作系统用户 mongod•&lt;code&gt;mongo_install&lt;/code&gt; ：安装 mongo/ferretdb RPM包•&lt;code&gt;mongo_purge&lt;/code&gt; ：清理现有 mongo/ferretdb 集群（默认不执行）•&lt;code&gt;mongo_config&lt;/code&gt; ：配置 mongo/ferretdb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo_cert&lt;/code&gt; ：签发 mongo/ferretdb SSL证书&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo_launch&lt;/code&gt; ：启动 mongo/ferretdb 服务•&lt;code&gt;mongo_register&lt;/code&gt;：将 mongo/ferretdb 注册到 Prometheus 监控中&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;监控&#34;&gt;监控&lt;/h2&gt;
&lt;p&gt;MONGO 模块提供了一个简单的监控面板：Mongo Overview&lt;/p&gt;
&lt;h3 id=&#34;mongo-overview&#34;&gt;Mongo Overview&lt;/h3&gt;
&lt;p&gt;Mongo Overview: Mongo/FerretDB 集群概览&lt;/p&gt;
&lt;p&gt;这个监控面板提供了关于 FerretDB 的基本监控指标，因为 FerretDB 底层使用了 PostgreSQL，所以更多的监控指标，还请参考 PostgreSQL 本身的监控。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/ferretdb/ferretdb-dashboard.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MONGO&lt;/code&gt;[24] 模块中提供了9个相关的配置参数，如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;mongo 实例号，必选身份参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 集群名，必选身份参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_pgurl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pgurl&lt;/td&gt;
&lt;td&gt;C/I&lt;/td&gt;
&lt;td&gt;mongo/ferretdb 底层使用的 PGURL 连接串，必选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_ssl_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo/ferretdb 是否启用SSL？默认为 &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_listen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ip&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 监听地址，默认留控则监听所有地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 服务端口，默认使用 27017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_ssl_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo TLS 监听端口，默认使用 27018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_exporter_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo exporter 端口，默认使用 9216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_extra_vars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;MONGO 服务器额外环境变量，默认为空白字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
