<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – MySQL</title>
    <link>/zh/tags/mysql/</link>
    <description>Recent content in MySQL on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 05 Nov 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: PZ：MySQL还有机会赶上PostgreSQL的势头吗？</title>
      <link>/zh/blog/db/can-mysql-catchup/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/can-mysql-catchup/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/can-mysql-catchup/featured_hu02aa61ae1d9de35cbe238d2676170cb9_143736_640x0_resize_q75_catmullrom.jpg" width="640" height="321"/>]]>
        
        &lt;p&gt;Percona 的老板 Peter Zaitsev最近发表一篇博客，讨论了MySQL是否还能跟上PostgreSQL的脚步。&lt;/p&gt;
&lt;p&gt;Percona 作为MySQL 生态扛旗者，Percona 开发了知名的PT系列工具，MySQL备份工具，监控工具与发行版。他们的看法在相当程度上代表了 MySQL 社区的想法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&#34;https://www.percona.com/blog/author/pz&#34;&gt;Peter Zaitsev&lt;/a&gt;，Percona 老板，原文：&lt;a href=&#34;https://www.percona.com/blog/how-can-mysql-catch-up-with-postgresqls-momentum/&#34;&gt;How Can MySQL Catch Up with PostgreSQL’s Momentum?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译者：&lt;a href=&#34;https://vonng.com/en&#34;&gt;冯若航&lt;/a&gt;，Vonng，&lt;a href=&#34;https://pigsty.io&#34;&gt;Pigsty&lt;/a&gt; 作者，PostgreSQL 大法师，数据库老司机，云计算泥石流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mysql还能跟上postgresql的步伐吗&#34;&gt;MySQL还能跟上PostgreSQL的步伐吗？&lt;/h2&gt;
&lt;p&gt;当我与MySQL社区的老前辈交谈时，我经常听到这样的问题：“&lt;em&gt;为什么MySQL如此出色，依然比PostgreSQL更受欢迎（至少根据DB-Engines的统计方法），但它的地位却在不断下降，而PostgreSQL的受欢迎程度却在不可阻挡地增长？&lt;/em&gt;” 在MySQL 生态能做些什么扭转这一趋势吗？让我们来深入探讨一下！&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine.png&#34; src=&#34;/zh/blog/db/can-mysql-catchup/db-engine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;让我们看看为什么PostgreSQL一直表现如此强劲，而MySQL却在走下坡路。我认为这归结为所有权与治理、许可证、社区、架构以及开源产品的势能。&lt;/p&gt;
&lt;h2 id=&#34;所有权和治理&#34;&gt;所有权和治理&lt;/h2&gt;
&lt;p&gt;MySQL 从未像 PostgreSQL 那样是“社区驱动”的。然而，当 MySQL 由瑞典小公司 MySQL AB 拥有，且由终身仁慈独裁者（BDFL）Michael “Monty” Widenius掌舵时，它获得了大量的社区信任，更重要的是，大公司并没有将其视为特别的威胁。&lt;/p&gt;
&lt;p&gt;现在情况不同了——Oracle 拥有 MySQL，业界的许多大公司，特别是云厂商，将 Oracle 视为竞争对手。显然它们没有理由去贡献代码与营销，为你的竞争对手创造价值。此外，拥有 MySQL 商标的 Oracle 在 MySQL 上总是会有额外的优先权。&lt;/p&gt;
&lt;p&gt;相比之下，PostgreSQL 由社区运营，领域内的每个商业供应商都站在同一起跑线上—— 像 EDB 这样的大公司与PostgreSQL 生态系统中的小公司相比，没有特殊的优待。&lt;/p&gt;
&lt;p&gt;这意味着大公司更愿意贡献并推荐 PostgreSQL 作为首选，因为这不会为他们的竞争对手创造价值，而且他们对PostgreSQL 项目的方向有更大的影响力。数百家小公司通过本地“草根”社区的开发和营销努力，使 PostgreSQL 在全球无处不在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL社区能做些什么来解决这个问题？&lt;/strong&gt; &lt;strong&gt;MySQL 社区能做的很少&lt;/strong&gt;——这完全掌握在 Oracle 手中。正如我在&lt;a href=&#34;https://mp.weixin.qq.com/s/1zlDPie_bVvP7eO6_uTkSw&#34;&gt;《Oracle能拯救MySQL吗？》&lt;/a&gt;中所写，将 MySQL 移交给一个中立的基金会（如 Linux 或 Kubernetes 项目）将提供与 PostgreSQL 竞争的机会。不过，我并不抱太大希望，因为我认为Oracle此刻更感兴趣的是“硬性”变现，而不是扩大采用率。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;MySQL 采用双许可证模式： GPLv2 和可从 Oracle 购买的商业许可证，而PostgreSQL则采用非常宽松的 PostgreSQL 许可证。&lt;/p&gt;
&lt;p&gt;这实际上意味着您可以轻松创建使用商业许可的 &lt;a href=&#34;https://wiki.postgresql.org/wiki/PostgreSQL_derived_databases&#34;&gt;PostgreSQL衍生版本&lt;/a&gt;，或将其嵌入到商业许可的项目中，而无需任何“变通方法”。构建此类产品的人们当然是在支持和推广 PostgreSQL。&lt;/p&gt;
&lt;p&gt;MySQL 确实允许云供应商创建自己的商业分支，具有MySQL兼容性的 Amazon Aurora 是最知名和最成功的此类分支，但在软件发行时这样做是不允许的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL社区能做什么？&lt;/strong&gt;  &lt;strong&gt;还是那句话，能做的不多&lt;/strong&gt; ——唯一能在宽松许可证下重新授权MySQL的公司是Oracle，而我没有理由相信他们会想要放松控制，尽管“开放核心”和“仅限云”的版本通常与宽松许可的“核心”软件配合良好。&lt;/p&gt;
&lt;h2 id=&#34;社区&#34;&gt;社区&lt;/h2&gt;
&lt;p&gt;我认为，当我们考虑开源社区时，最好考虑 &lt;a href=&#34;https://peterzaitsev.com/there-are-three-open-source-communities-not-just-one/&#34;&gt;三个不同的社区&lt;/a&gt;，而不仅仅是一个。&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;用户社区&lt;/strong&gt;。MySQL在这方面仍然表现不错，尽管 PostgreSQL 正日益成为新应用的首选数据库。然而，用户社区往往是其他几个社区工作的成果。&lt;/p&gt;
&lt;p&gt;其次，&lt;strong&gt;贡献者社区&lt;/strong&gt;。PostgreSQL 有着更强大的贡献者社区，这并不奇怪，因为它是由众多组织而非单一组织驱动的。我们举办了针对贡献者的活动，还编写了关于如何为 PostgreSQL 作出贡献的书籍。PostgreSQL 的可扩展架构也有助于轻松扩展 PostgreSQL，并公开分享工作成果。&lt;/p&gt;
&lt;p&gt;最后，&lt;strong&gt;供应商社区&lt;/strong&gt;。我认为这正是主要问题所在，没有那么多公司有兴趣推广 MySQL，因为这样做可能只是为Oracle 创造价值。你可能会问，这难道不会鼓励所有 Oracle 的“合作伙伴”去推广 MySQL 吗？可能会，在全球范围内也确实有一些合作伙伴支持的MySQL活动，但这些与供应商对 PostgreSQL 的支持相比，简直微不足道，因为这是 “属于他们的项目”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL社区能做什么？&lt;/strong&gt; 这里社区还是可以发挥一点作用的 —— 尽管当前的状况使得工作更困难，回报更少，但我们仍然可以做很多事情。如果你关心 MySQL 的未来，我鼓励你组织与参与各种活动，尤其是在狭窄的 MySQL生态之外，去撰写文章、录制视频、出版书籍。在社交媒体上推广它们，并将它们提交到 Hacker News。&lt;/p&gt;
&lt;p&gt;特别是，不要错过&lt;a href=&#34;https://www.mysqlandfriends.eu/&#34;&gt; FOSDEM 2025 MySQL Devroom &lt;/a&gt;的征稿！&lt;/p&gt;
&lt;p&gt;这也是 Oracle 可以参与的部分，它们可以在不减少盈利的情况下参与这些活动，并与潜在的贡献者互动 —— 举办一些外部贡献者可以参与的活动，与他们分享计划，支持他们的贡献 —— 至少在他们与你的“MySQL社区”蓝图一致的情况下。&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;p&gt;一些 PostgreSQL 同行认为，PostgreSQL 发展势头更好的原因源于更好的架构和更干净的代码库。我认为这可能是一个因素，但并非主要原因，这里的原因值得讨论。&lt;/p&gt;
&lt;p&gt;PostgreSQL 的设计高度可扩展，而且已经实现有大量强大的扩展插件，而 MySQL 的扩展可能性则非常有限。一个显著例外是存储引擎接口 —— MySQL支持多种不同的存储引擎，而 PostgreSQL 只有一个（尽管像 &lt;a href=&#34;https://neon.tech/&#34;&gt;Neon&lt;/a&gt; 或 &lt;a href=&#34;https://www.orioledb.com/&#34;&gt;OrioleDB&lt;/a&gt; 这样的分叉可以通过打补丁来改变这一点）。&lt;/p&gt;
&lt;p&gt;这种可扩展性使得在 PostgreSQL 上进行创新更加容易，（特别是PG还有着一个更强大的贡献者社区支持），而无需将新功能纳入核心代码库中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL社区能做些什么？&lt;/strong&gt; 我认为即使 MySQL 的可扩展性很有限，我们仍然可以通过MySQL已经支持的&lt;a href=&#34;https://dev.mysql.com/doc/extending-mysql/8.0/en/plugin-types.html&#34;&gt;各种类型的插件&lt;/a&gt;和&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.4/en/components.html&#34;&gt;“组件”&lt;/a&gt;来实现很多功能。&lt;/p&gt;
&lt;p&gt;我们首先需要为MySQL建立一个“社区插件市场”，这将鼓励开发者构建更多插件并让它们得到更多曝光。我们还需要Oracle的支持 —— 承诺扩展MySQL的插件架构，赋能开发者构建插件 —— 即使这会与Oracle的产品产生一些竞争。例如，如果 MySQL 有插件可以创建自定义数据类型和可插拔索引，或许我们已经会看到 MySQL 的 PGVector替代品了。&lt;/p&gt;
&lt;h2 id=&#34;开源产品的势头&#34;&gt;开源产品的势头&lt;/h2&gt;
&lt;p&gt;选择数据库是一个长期的赌注，因为更换数据库并不容易。去问问那些几十年前选择了 Oracle 而现在被其束缚的人吧。这意味着在选择数据库时，你需要考虑未来，不仅要考虑这些数据库在十年后是否依然存在，而且要考虑随着时间的发展，它是否还能满足未来的技术需求。&lt;/p&gt;
&lt;p&gt;正如我在文章 &lt;a href=&#34;https://mp.weixin.qq.com/s/1zlDPie_bVvP7eO6_uTkSw&#34;&gt;《Oracle最终还是杀死了MySQL！》&lt;/a&gt; 中所写到的，我认为Oracle已经将大量开发重心转移到专有商业版和云专属的 MySQL 版本上 —— 几乎放弃了 MySQL 社区版。虽然今日的 MySQL 仍然在许多应用中表现出色，但它确实正在落后过气中，MySQL 社区中的许多人都在质疑它是还有未来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL社区能做什么？&lt;/strong&gt; 还是那句话，决定权在 Oracle 手中，因为他们是唯一能决定 MySQL 官方路线的人。你可能会问，那么我们的 &lt;a href=&#34;https://www.percona.com/mysql/software/percona-server-for-mysql&#34;&gt;Percona Server for MySQL&lt;/a&gt; 呢？我相信在Percona，我们确实提供了一个领先的 Oracle MySQL的开源替代品，但因为我们专注于完整的 MySQL 兼容性，所以必须谨慎对待对 MySQL 所做的变更，以避免破坏这种兼容性或使上游合并成本过高。&lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt; 做出了不同的利弊权衡；不受限制的创新使其与MySQL 的兼容性越来越差，而且每个新版本都离 MySQL 越来越远。&lt;/p&gt;
&lt;h2 id=&#34;mariadb&#34;&gt;MariaDB&lt;/h2&gt;
&lt;p&gt;既然提到了MariaDB，你可能会问，MariaDB 不是已经尽可能地解决了所有这些问题吗？—— 毕竟 MariaDB 不是由 MariaDB基金会等机构管理的吗？别急，我认为MariaDB是 &lt;a href=&#34;https://www.percona.com/blog/open-source-and-flawed-foundations/&#34;&gt;一个有缺陷的基金会&lt;/a&gt;，它并不拥有所有的知识产权，&lt;strong&gt;尤其是商标&lt;/strong&gt;，无法为所有供应商提供公平的竞争环境。它仍然存在商标垄断问题，因为只有一家公司可以提供所有 “MariaDB” 相关的服务，地位高于其他所有公司。&lt;/p&gt;
&lt;p&gt;然而，MariaDB 可能有一个机会窗口；随着 MariaDB（公司）刚刚被&lt;a href=&#34;https://k1.com/k1-acquires-mariadb/&#34;&gt;K1收购&lt;/a&gt;，MariaDB的治理和商标所有权有机会向 PostgreSQL 的模式靠近。&lt;strong&gt;不过，我并不抱太大希望&lt;/strong&gt;，因为放松对商标知识产权的控制并不是私募股权公司所惯常做的。&lt;/p&gt;
&lt;p&gt;当然，MariaDB 基金会也可以选择通过将项目更名为 SomethingElseDB 来获得对商标的完全控制，但这意味着MariaDB 将失去所有的品牌知名度；这也不太可能发生。&lt;/p&gt;
&lt;p&gt;MariaDB 也已经与 MySQL 有了显著的分歧，调和这些差异将需要多年的努力，但我认为如果有足够的资源和社区意愿，这也许是一个可以解决的问题。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;正如你所看到的，由于 MySQL 的所有权和治理方式，MySQL 社区在其能做的事情上受到限制。从长远来看，我认为 MySQL 社区唯一能与 PostgreSQL 竞争的方法是所有重要的参与者联合起来（就像&lt;a href=&#34;https://valkey.io/&#34;&gt;Valkey项目&lt;/a&gt;那样），在不同的品牌下创建一个 MySQL 的替代品 —— 这可以解决上述大部分问题。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MySQL 已死，PostgreSQL 当立</title>
      <link>/zh/blog/db/mysql-is-dead/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/mysql-is-dead/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/mysql-is-dead/featured_hu02aa61ae1d9de35cbe238d2676170cb9_828502_640x0_resize_q75_catmullrom.jpg" width="640" height="366"/>]]>
        
        &lt;p&gt;本月，MySQL 9.0 终于发布了（@2024-07），距离上一次大版本更新 8.0 (&lt;a href=&#34;https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-0.html&#34;&gt;@2016-09&lt;/a&gt;) 已经过去八年了。然而这个空洞无物的所谓“创新版本”却犹如一个恶劣的玩笑，宣告着 MySQL &lt;strong&gt;正在死去&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;PostgreSQL 正在高歌猛进，而 MySQL 却日薄西山，作为 MySQL 生态主要扛旗者的 Percona 也不得不悲痛地承认这一现实，连发三篇《&lt;a href=&#34;/zh/blog/db/sakila-where-are-you-going&#34;&gt;MySQL将何去何从&lt;/a&gt;》，《&lt;a href=&#34;/zh/blog/db/oracle-kill-mysql&#34;&gt;Oracle最终还是杀死了MySQL&lt;/a&gt;》，《&lt;a href=&#34;/zh/blog/db/can-oracle-save-mysql&#34;&gt;Oracle还能挽救MySQL吗&lt;/a&gt;》，公开表达了对 MySQL 的失望与沮丧；&lt;/p&gt;
&lt;p&gt;Percona 的 CEO Peter Zaitsev 也表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;有了 PostgreSQL，谁还需要 MySQL 呢？&lt;/strong&gt; —— 但如果 MySQL 死了，PostgreSQL 就真的垄断数据库世界了，所以 MySQL 至少还可以作为 PostgreSQL 的磨刀石，让 PG 进入全盛状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有的数据库正在&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;吞噬数据库世界&lt;/a&gt;，而有的数据库正在&lt;a href=&#34;/zh/blog/db/mysql-is-dead&#34;&gt;黯然地凋零死去&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL is dead，Long live PostgreSQL！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#空洞无物的创新版本&#34;&gt;空洞无物的创新版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#糊弄了事的向量类型&#34;&gt;糊弄了事的向量类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#姗姗来迟的js函数&#34;&gt;姗姗来迟的JS函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#日渐落后的功能特性&#34;&gt;日渐落后的功能特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#越新越差的性能表现&#34;&gt;越新越差的性能表现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#无可救药的质量水平&#34;&gt;无可救药的质量水平&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#枯萎收缩的生态规模&#34;&gt;枯萎收缩的生态规模&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#究竟是谁杀死了mysql&#34;&gt;究竟是谁杀死了MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/mysql-is-dead/#pg驶向云外mysql安魂九霄&#34;&gt;PG驶向云外，MySQL安魂九霄&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;空洞无物的创新版本&#34;&gt;空洞无物的创新版本&lt;/h2&gt;
&lt;p&gt;MySQL 官网发布的 &lt;a href=&#34;https://dev.mysql.com/doc/refman/9.0/en/mysql-nutshell.html&#34;&gt;&amp;ldquo;What&amp;rsquo;s New in MySQL 9.0&amp;rdquo;&lt;/a&gt; 介绍了 9.0 版本引入的几个新特性，而 &lt;a href=&#34;https://mp.weixin.qq.com/s/puDWYINtIs-pfM_F5s3jaw&#34;&gt;MySQL 9.0 新功能概览&lt;/a&gt; 一文对此做了扼要的总结：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql9-feature.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/mysql9-feature.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后呢？就这些吗？这就没了！？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这确实是让人惊诧不已，因为 PostgreSQL 每年的大版本发布都有无数的新功能特性，例如计划今秋发布的 &lt;a href=&#34;/zh/blog/pg/pg-17-beta1/&#34;&gt;PostgreSQL 17&lt;/a&gt; 还只是 beta1，就已然有着蔚为壮观的新增特性列表：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg17-feature.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg17-feature.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而最近几年的 PostgreSQL 新增特性甚至足够专门编成一本书了。比如《&lt;a href=&#34;https://mp.weixin.qq.com/s/2bjblo9t7KNQh1isRwbs2w&#34;&gt;快速掌握PostgreSQL版本新特性&lt;/a&gt;》便收录了 PostgreSQL 最近七年的重要新特性 —— 将目录塞的满满当当：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-features.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg-features.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;回头再来看看 MySQL 9 更新的六个特性，后四个都属于无关痛痒，一笔带过的小修补，拿出来讲都嫌丢人。而前两个 &lt;strong&gt;向量数据类型&lt;/strong&gt; 和 &lt;strong&gt;JS存储过程&lt;/strong&gt; 才算是重磅亮点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BUT ——&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL 9.0 的向量数据类型只是 &lt;code&gt;BLOB&lt;/code&gt; 类型换皮 —— 只加了个数组长度函数，这种程度的功能，&lt;strong&gt;28年前&lt;/strong&gt; PostgreSQL 诞生的时候就支持了。&lt;/p&gt;
&lt;p&gt;而 MySQL Javascript 存储过程支持，竟然还是一个 &lt;strong&gt;企业版独占特性&lt;/strong&gt;，开源版不提供 —— 而同样的功能，&lt;strong&gt;13年前&lt;/strong&gt; 的 PostgreSQL 9.1 就已经有了。&lt;/p&gt;
&lt;p&gt;时隔八年的 “创新大版本” 更新就带来了俩 “老特性”，其中一个还是企业版特供。“&lt;strong&gt;创新&lt;/strong&gt;”这俩字，在这里显得如此辣眼与讽刺。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;糊弄了事的向量类型&#34;&gt;糊弄了事的向量类型&lt;/h2&gt;
&lt;p&gt;这两年 AI 爆火，也带动了向量数据库赛道。当下几乎所有主流 DBMS 都已经提供向量数据类型支持 —— &lt;strong&gt;MySQL 除外&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用户可能原本期待着在 9.0 创新版，向量支持能弥补一些缺憾，结果发布后等到的只有震撼 —— &lt;strong&gt;竟然还可以这么糊弄？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 MySQL 9.0 的 &lt;a href=&#34;https://dev.mysql.com/doc/refman/9.0/en/vector-functions.html&#34;&gt;官方文档&lt;/a&gt; 上，只有三个关于向量类型的函数。抛开与字符串互转的两个，真正的功能函数就一个 &lt;code&gt;VECTOR_DIM&lt;/code&gt;：返回向量的维度！（计算数组长度）&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-vector-func.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/mysql-vector-func.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;向量数据库的门槛不是一般的低 —— 有个向量距离函数就行（内积，10行C代码，小学生水平编程任务），这样至少可以通过全表扫描求距离 + &lt;code&gt;ORDER BY d LIMIT n&lt;/code&gt; 实现向量检索，是个可用的状态。
但 MySQL 9 甚至连这样一个最基本的向量距离函数都懒得去实现，这绝对不是能力问题，而是 Oracle 根本就不想好好做 MySQL 了。
老司机一眼就能看出这里的所谓 “向量类型” 不过是 &lt;code&gt;BLOB&lt;/code&gt; 的别名 —— 它只管你写入二进制数据，压根不管用户怎么查找使用。
当然，也不排除 Oracle 在自己的 MySQL Heatwave 上有一个不糊弄的版本。可在 MySQL 上，最后实际交付的东西，就是一个十分钟就能写完的玩意糊弄了事。&lt;/p&gt;
&lt;p&gt;不糊弄的例子可以参考 MySQL 的老对手 PostgreSQL。在过去一年中，PG 生态里就涌现出了至少六款向量数据库扩展（ &lt;code&gt;pgvector&lt;/code&gt;，&lt;code&gt;pgvector.rs&lt;/code&gt;，&lt;code&gt;pg_embedding&lt;/code&gt;，&lt;code&gt;latern&lt;/code&gt;，&lt;code&gt;pase&lt;/code&gt;，&lt;code&gt;pgvectorscale&lt;/code&gt;），并在你追我赶的赛马中卷出了新高度。
最后的胜出者是 2021 年就出来的 &lt;a href=&#34;/zh/blog/dev/llm-and-pgvector&#34;&gt;&lt;code&gt;pgvector&lt;/code&gt;&lt;/a&gt; ，它在无数开发者、厂商、用户的共同努力下，站在 PostgreSQL 的肩膀上，很快便达到了许多专业向量数据库都无法企及的高度，甚至可以说凭借一己之力，干死了这个数据库细分领域 —— 《&lt;a href=&#34;/zh/blog/db/svdb-is-dead&#34;&gt;专用向量数据库凉了吗？&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;在这一年内，&lt;code&gt;pgvector&lt;/code&gt; &lt;a href=&#34;https://jkatz05.com/post/postgres/pgvector-performance-150x-speedup/&#34;&gt;性能翻了 150 倍&lt;/a&gt;，功能上更是有了翻天覆地的变化 —— &lt;code&gt;pgvector&lt;/code&gt; 提供了 float向量，半精度向量，bit向量，稀疏向量几种数据类型；提供了L1距离，L2距离，内积距离，汉明距离，Jaccard距离度量函数；提供了各种向量、标量计算函数与运算符；支持 IVFFLAT，HNSW 两种专用向量索引算法（扩展的扩展 pgvectorscale 还提供了 DiskANN 索引）；支持了并行索引构建，向量量化处理，稀疏向量处理，子向量索引，混合检索，可以使用 SIMD 指令加速。这些丰富的功能，加上开源免费的协议，以及整个 PG 生态的合力与协同效应 —— 让 &lt;code&gt;pgvector&lt;/code&gt; 大获成功，并与 PostgreSQL 一起，成为无数 AI 项目使用的默认（向量）数据库。&lt;/p&gt;
&lt;p&gt;拿 &lt;code&gt;pgvector&lt;/code&gt; 与来比似乎不太合适，因为 MySQL 9 所谓的“向量”，甚至都远远不如 1996 年 PG 诞生时自带的“多维数组类型” —— “至少它还有一大把数组函数，而不是只能求个数组长度”。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/vector-json-pg/&#34;&gt;&lt;strong&gt;向量是新的JSON&lt;/strong&gt;&lt;/a&gt;，然而向量数据库的宴席都已经散场了，MySQL 都还没来得及上桌 —— 它完美错过了下一个十年 AI 时代的增长动能，正如它在上一个十年里错过互联网时代的JSON文档数据库一样。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;姗姗来迟的js函数&#34;&gt;姗姗来迟的JS函数&lt;/h2&gt;
&lt;p&gt;另一个 MySQL 9.0 带来的 “重磅” 特性是 —— &lt;strong&gt;Javascript 存储过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而用 Javascript 写存储过程并不是什么新鲜事 —— 早在 2011 年，PostgreSQL 9.1 就已经可以通过 &lt;a href=&#34;https://github.com/plv8/plv8/tree/v0.1.0&#34;&gt;&lt;code&gt;plv8&lt;/code&gt;&lt;/a&gt; 扩展编写 Javascript 存储过程了，MongoDB 也差不多在同一时期提供了对 Javascript 存储过程的支持。&lt;/p&gt;
&lt;p&gt;如果我们查看 DB-Engine 近十二年的 “&lt;a href=&#34;https://demo.pigsty.cc/d/db-analysis/db-engine-analysis?orgId=1&amp;var-year=2012&amp;viewPanel=24&#34;&gt;数据库热度趋势&lt;/a&gt;” ，不难发现只有 PostgreSQL 与 Mongo 两款 DBMS 在独领风骚 —— MongoDB (2009) 与 PostgreSQL 9.2 (2012) 都极为敏锐地把握住了互联网开发者的需求 —— 在 “JSON崛起” 的第一时间就添加 &lt;a href=&#34;/zh/blog/pg/vector-json-pg/&#34;&gt;JSON 特性支持&lt;/a&gt;（文档数据库），从而在过去十年间吃下了数据库领域最大的增长红利。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/db-engine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，MySQL 的干爹 —— Oracle 也在2014年底的12.1中添加了 JSON 特性与 Javascript 存储过程的支持 —— 而 MySQL 自己则不幸地等到了 2024 年才补上这一课 —— &lt;strong&gt;但已经太迟了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oracle 支持用 C，SQL，PL/SQL，Pyhton，Java，Javascript 编写存储过程。但在 PostgreSQL 支持的二十多种存储过程语言面前，只能说也是小巫见大巫，只能甘拜下风了：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-pl.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg-pl.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;不同于 PostgreSQL 与 Oracle 的开发理念，MySQL 的各种最佳实践里都不推荐使用存储过程 —— 所以 Javascript 函数对于 MySQL 来说是个鸡肋特性。
然而即便如此，Oracle 还是把 Javascript 存储过程支持做成了一个 &lt;strong&gt;MySQL企业版专属&lt;/strong&gt; 的特性 —— 考虑到绝大多数 MySQL 用户使用的都是开源社区版本，这个特性属实是发布了个寂寞。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;日渐落后的功能特性&#34;&gt;日渐落后的功能特性&lt;/h2&gt;
&lt;p&gt;MySQL 在功能上缺失的绝不仅仅是是编程语言/存储过程支持，在各个功能维度上，MySQL 都落后它的竞争对手 PostgreSQL 太多了 —— 功能落后不仅仅是在数据库内核功能上，更发生在扩展生态维度。&lt;/p&gt;
&lt;p&gt;来自 CMU 的 Abigale Kim 对&lt;a href=&#34;https://abigalekim.github.io/assets/pdf/Anarchy_in_the_Database_PGConfDev2024.pdf&#34;&gt;主流数据库的可扩展性&lt;/a&gt;进行了研究：PostgreSQL 有着所有 DBMS 中最好的 &lt;strong&gt;可扩展性&lt;/strong&gt;（Extensibility），以及其他数据库生态难望其项背的扩展插件数量 —— &lt;strong&gt;375+&lt;/strong&gt;，这还只是 PGXN 注册在案的实用插件，&lt;a href=&#34;https://gist.github.com/joelonsql/e5aa27f8cc9bd22b8999b7de8aee9d47&#34;&gt;实际生态扩展总数已经破千&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dbms-extensibility.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/dbms-extensibility.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些扩展插件为 PostgreSQL 提供了各种各样的功能 —— 地理空间，时间序列，向量检索，机器学习，OLAP分析，全文检索，图数据库，让 PostgreSQL 真正成为一专多长的全栈数据库 —— 单一数据库选型便可替代各式各样的专用组件： MySQL，MongoDB，Kafka，Redis，ElasticSearch，Neo4j，甚至是专用分析数仓与数据湖。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-extensions.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg-extensions.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;当 MySQL 还局限在 “&lt;strong&gt;关系型 OLTP 数据库&lt;/strong&gt;” 的定位时， PostgreSQL 早已经放飞自我，从一个关系型数据库发展成了一个多模态的数据库，成为了一个数据管理的抽象框架与开发平台。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt; —— 它正在通过插件的方式，将整个数据库世界内化其中。“&lt;a href=&#34;/zh/blog/pg/just-use-pg/&#34;&gt;一切皆用 Postgres&lt;/a&gt;” 也已经不再是少数精英团队的前沿探索，而是成为了一种进入主流视野的最佳实践。&lt;/p&gt;
&lt;p&gt;而在新功能支持上，MySQL 却显得十分消极 —— 一个应该有大量 Breaking Change 的“创新大版本更新”，不是糊弄人的摆烂特性，就是企业级的特供鸡肋，一个大版本就连鸡零狗碎的小修小补都凑不够数。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;越新越差的性能表现&#34;&gt;越新越差的性能表现&lt;/h2&gt;
&lt;p&gt;缺少功能也许并不是一个无法克服的问题 —— 对于一个数据库来说，只要它能将自己的本职工作做得足够出彩，那么架构师总是可以多费些神，用各种其他的数据积木一起拼凑出所需的功能。&lt;/p&gt;
&lt;p&gt;MySQL 曾引以为傲的核心特点便是 &lt;strong&gt;性能&lt;/strong&gt; —— 至少对于互联网场景下的简单 OLTP CURD 来说，它的性能是非常不错的。然而不幸地是，这一点也正在遭受挑战：Percona 的博文《&lt;a href=&#34;/zh/blog/db/sakila-where-are-you-going/&#34;&gt;Sakila：你将何去何从&lt;/a&gt;》中提出了一个令人震惊的结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 的版本越新，性能反而越差。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-perf-bench.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/mysql-perf-bench.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据 Percona 的测试，在 sysbench 与 TPC-C 测试下，最新 MySQL 8.4 版本的性能相比 MySQL 5.7 出现了平均高达 &lt;strong&gt;20%&lt;/strong&gt; 的下降。而 MySQL 专家 Mark Callaghan 进一步进行了 &lt;a href=&#34;https://smalldatum.blogspot.com/2024/02/perf-regressions-in-mysql-from-5621-to.html&#34;&gt;详细的性能回归测试&lt;/a&gt;，确认了这一现象：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-perf.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/mysql-perf.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 8.0.36 相比 5.6 ，QPS 吞吐量性能下降了 25% ～ 40% ！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管 MySQL 的优化器在 8.x 有一些改进，一些复杂查询场景下的性能有所改善，但分析与复杂查询本来就不是 MySQL 的长处与适用场景，只能说聊胜于无。相反，如果作为基本盘的 OLTP CRUD 性能出了这么大的折损，那确实是完全说不过去的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://benchmark.clickhouse.com/&#34;&gt;&lt;img alt=&#34;clickbench-en.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/clickbench-en.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClickBench：MySQL 打这个榜确实有些不明智&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Peter Zaitsev 在博文《&lt;a href=&#34;/zh/blog/db/oracle-kill-mysql&#34;&gt;Oracle最终还是杀死了MySQL&lt;/a&gt;》中评论：“与 MySQL 5.6 相比，MySQL 8.x 单线程简单工作负载上的性能出现了大幅下滑。你可能会说增加功能难免会以牺牲性能为代价，但 MariaDB 的性能退化要轻微得多，而 PostgreSQL 甚至能在 &lt;a href=&#34;https://smalldatum.blogspot.com/2024/06/postgres-17beta1-vs-sysbench-on-large.html&#34;&gt;&lt;strong&gt;新增功能的同时显著提升性能&lt;/strong&gt;&lt;/a&gt;”。&lt;/p&gt;
&lt;p&gt;MySQL的性能随版本更新而逐步衰减，但在同样的性能回归测试中，PostgreSQL 性能却可以随版本更新有着稳步提升。特别是在最关键的写入吞吐性能上，最新的 PostgreSQL 17beta1 相比六年前的 PG 10 甚至有了 30% ～ 70% 的提升。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-mysql-write-qps.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg-mysql-write-qps.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Mark Callaghan 的 &lt;a href=&#34;https://smalldatum.blogspot.com/2023/10/postgres-vs-mysql-impact-of-cpu.html&#34;&gt;性能横向对比&lt;/a&gt; （sysbench 吞吐场景） 中，我们可以看到五年前 PG 11 与 MySQL 5.6 的性能比值（蓝），与当下 PG 16 与 MySQL 8.0.34 的性能比值（红）。PostgreSQL 和 MySQL 的性能差距在这五年间拉的越来越大。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-vs-mysql-qps.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/pg-vs-mysql-qps.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;几年前的业界共识是 PostgreSQL 与 MySQL 在 &lt;strong&gt;简单 OLTP CRUD 场景&lt;/strong&gt; 下的性能基本相同。然而此消彼长之下，现在 PostgreSQL 的性能已经远远甩开 MySQL 了。
PostgreSQL 的各种读吞吐量相比 MySQL 高 25% ～ 100% 不等，在一些写场景下的吞吐量更是达到了 200% 甚至 500% 的恐怖水平。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 赖以安身立命的性能优势，已经不复存在了。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;无可救药的质量水平&#34;&gt;无可救药的质量水平&lt;/h2&gt;
&lt;p&gt;如果新版本只是性能不好，总归还有办法来优化修补。但如果是质量出了问题，那真就是无可救药了。&lt;/p&gt;
&lt;p&gt;例如，Percona 最近刚刚在 MySQL 8.0.38 以上的版本（8.4.x, 9.0.0）中发现了一个 &lt;a href=&#34;https://perconadev.atlassian.net/browse/PS-9306&#34;&gt;严重Bug&lt;/a&gt; —— 如果数据库里表超过 1万张，那么重启的时候 MYSQL 服务器会直接崩溃！
一个数据库里有1万张表并不常见，但也并不罕见 —— 特别是当用户使用了一些分表方案，或者应用会动态创建表的时候。而直接崩溃显然是可用性故障中最严重的一类情形。&lt;/p&gt;
&lt;p&gt;但 MySQL 的问题不仅仅是几个软件 Bug，而是根本性的问题 —— 《&lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;MySQL正确性竟有如此大的问题？&lt;/a&gt;》一文指出，在&lt;strong&gt;正确性&lt;/strong&gt;这个体面数据库产品必须的基本属性上，MySQL 的表现一塌糊涂。&lt;/p&gt;
&lt;p&gt;权威的分布式事务测试组织 &lt;a href=&#34;https://jepsen.io/analyses/mysql-8.0.34&#34;&gt;JEPSEN&lt;/a&gt; 研究发现，MySQL 文档声称实现的 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 隔离等级，实际提供的正确性保证要弱得多 —— MySQL 8.0.34 默认使用的 RR 隔离等级实际上并不可重复读，甚至既不&lt;strong&gt;原子&lt;/strong&gt;也不&lt;strong&gt;单调&lt;/strong&gt;，连 &lt;strong&gt;单调原子视图/MAV&lt;/strong&gt; 的基本水平都不满足。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;&lt;img alt=&#34;mysql-bad-case.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/mysql-bad-case.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 的 ACID 存在缺陷，且与文档承诺不符&lt;/strong&gt; —— 而轻信这一虚假承诺可能会导致严重的正确性问题，例如数据错漏与对账不平。对于一些数据完整性很关键的场景 —— 例如金融，这一点是无法容忍的。&lt;/p&gt;
&lt;p&gt;此外，能“避免”这些异常的 MySQL &lt;strong&gt;可串行化/SR&lt;/strong&gt; 隔离等级难以生产实用，也非官方文档与社区认可的最佳实践；尽管专家开发者可以通过在查询中显式加锁来规避此类问题，但这样的行为极其影响性能，而且容易出现死锁。&lt;/p&gt;
&lt;p&gt;与此同时，PostgreSQL 在 9.1 引入的 可串行化快照隔离（SSI） 算法可以用极小的性能代价提供完整可串行化隔离等级 —— 而且 PostgreSQL 的 SR 在正确性实现上毫无瑕疵 —— 这一点即使是 Oracle 也难以企及。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;consistency.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/consistency.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;李海翔教授在《&lt;a href=&#34;https://mp.weixin.qq.com/s/_BhAjcMkmthTf8Zw3RWKDw&#34;&gt;一致性八仙图&lt;/a&gt;》论文中，系统性地评估了主流 DBMS 隔离等级的正确性，图中蓝/绿色代表正确用规则/回滚避免异常；黄A代表异常，越多则正确性问题就越多；红“D”指使用了影响性能的死锁检测来处理异常，红D越多性能问题就越严重；&lt;/p&gt;
&lt;p&gt;不难看出，这里正确性最好（无黄A）的实现是 PostgreSQL SR，与基于PG的 CockroachDB SR，其次是略有缺陷 Oracle SR；主要都是通过机制与规则避免并发异常；而 MySQL 出现了大面积的黄A与红D，正确性水平与实现手法糙地不忍直视。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做正确的事很重要，而正确性是不应该拿来做利弊权衡的&lt;/strong&gt;。在这一点上，开源关系型数据库两巨头 MySQL 和 PostgreSQL 在早期实现上就选择了两条截然相反的道路： MySQL 追求性能而牺牲正确性；而学院派的 PostgreSQL 追求正确性而牺牲了性能。&lt;/p&gt;
&lt;p&gt;在互联网风口上半场中，MySQL 因为性能优势占据先机乘风而起。但当性能不再是核心考量时，正确性就成为了 MySQL 的&lt;strong&gt;致命出血点&lt;/strong&gt;。
更为可悲的是，MySQL 连牺牲正确性换来的性能，都已经不再占优了，这着实让人唏嘘不已。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;枯萎收缩的生态规模&#34;&gt;枯萎收缩的生态规模&lt;/h2&gt;
&lt;p&gt;对一项技术而言，用户的&lt;strong&gt;规模&lt;/strong&gt;直接决定了生态的繁荣程度。瘦死的骆驼比马大，烂船也有三斤钉。
MySQL 曾经搭乘互联网东风扶摇而起，攒下了丰厚的家底，它的 Slogan 就很能说明问题 —— “&lt;strong&gt;世界上最流行的开源关系型数据库&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;so-rank.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/so-rank.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;不幸地是在 2023 年，至少根据全世界最权威的开发者调研之一的 &lt;a href=&#34;/zh/blog/pg/pg-is-no1&#34;&gt;StackOverflow Annual Developer Survey&lt;/a&gt; 结果来看，MySQL 的使用率已经被 PostgreSQL 反超了 —— &lt;strong&gt;最流行数据库的桂冠已经被 PostgreSQL 摘取&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;特别是，如果将过去七年的调研数据放在一起，就可以得到这幅 PostgreSQL / MySQL 在专业开发者中使用率的变化趋势图（左上） —— 在横向可比的同一标准下，PostgreSQL 流行与 MySQL 过气的趋势显得一目了然。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;so-trend.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/so-trend.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于中国来说，此消彼长的变化趋势也同样成立。但如果对中国开发者说 PostgreSQL 比 MySQL 更流行，那确实是违反直觉与事实的。&lt;/p&gt;
&lt;p&gt;将 StackOverflow 专业开发者按照国家细分，不难看出在主要国家中（样本数 &amp;gt; 600 的 31 个国家），中国的 MySQL 使用率是最高的 —— 58.2% ，而 PG 的使用率则是最低的 —— 仅为 27.6%，MySQL 用户几乎是 PG 用户的一倍。&lt;/p&gt;
&lt;p&gt;与之恰好反过来的另一个极端是真正遭受国际制裁的俄联邦：由开源社区运营，不受单一主体公司控制的 PostgreSQL 成为了俄罗斯的数据库大救星 —— 其 PG 使用率以 60.5% 高居榜首，是其 MySQL 使用率 27% 的两倍。&lt;/p&gt;
&lt;p&gt;中国因为同样的自主可控信创逻辑，最近几年 PostgreSQL 的使用率也出现了显著跃升 ——  PG 的使用率翻了三倍，而 PG 与 MySQL 用户比例已经从六七年前的 5:1 ，到三年前的3:1，再迅速发展到现在的 2:1，相信会在未来几年内会很快追平并反超世界平均水平。
毕竟，有这么多的国产数据库，都是基于 PostgreSQL 打造而成 —— 如果你做政企信创生意，那么大概率已经在用 PostgreSQL 了。&lt;/p&gt;
&lt;p&gt;抛开政治因素，用户选择使用一款数据库与否，核心考量还是质量、安全、效率、成本等各个方面是否“&lt;strong&gt;先进&lt;/strong&gt;”。先进的因会反映为流行的果，流行的东西因为落后而过气，而先进的东西会因为先进变得流行，没有“先进”打底，再“流行”也难以长久。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;究竟是谁杀死了mysql&#34;&gt;究竟是谁杀死了MySQL？&lt;/h2&gt;
&lt;p&gt;究竟是谁杀死了 MySQL，难道是 PostgreSQL 吗？Peter Zaitsev 在《&lt;a href=&#34;/zh/blog/db/sakila-where-are-you-going&#34;&gt;Oracle最终还是杀死了MySQL&lt;/a&gt;》一文中控诉 —— &lt;strong&gt;Oracle 的不作为与瞎指挥最终害死了 MySQL&lt;/strong&gt;；并在后续《&lt;a href=&#34;https://pigsty.io/zh/blog/db/can-oracle-save-mysql&#34;&gt;Oracle还能挽救MySQL吗&lt;/a&gt;》一文中指出了真正的根因：&lt;/p&gt;
&lt;p&gt;MySQL 的知识产权被 Oracle 所拥有，它不是像 PostgreSQL 那种 “由社区拥有和管理” 的数据库，也没有 PostgreSQL 那样广泛的独立公司贡献者。不论是 MySQL 还是其分叉 MariaDB，它们都不是真正意义上像 Linux，PostgreSQL，Kubernetes 这样由社区驱动的的原教旨纯血开源项目，而是由单一商业公司主导。&lt;/p&gt;
&lt;p&gt;比起向一个商业竞争对手贡献代码，白嫖竞争对手的代码也许是更为明智的选择 —— AWS 和其他云厂商利用 MySQL 内核参与数据库领域的竞争，却不回馈任何贡献。于是作为竞争对手的 Oracle 也不愿意再去管理好 MySQL，而干脆自己也参与进来搞云 —— 仅仅只关注它自己的 MySQL heatwave 云版本，就像 AWS 仅仅专注于其 RDS 管控和 Aurora 服务一样。在 MySQL 社区凋零的问题上，云厂商也难辞其咎。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dbms-market.png&#34; src=&#34;/zh/blog/db/mysql-is-dead/dbms-market.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;逝者不可追，来者犹可待。PostgreSQL 应该从 MySQL 的衰亡中吸取教训 —— 尽管 PostgreSQL 社区非常小心地避免出现一家独大的情况出现，但生态确实在朝着一家/几家巨头云厂商独大的不利方向在发展。&lt;a href=&#34;/zh/blog/cloud/paradigm&#34;&gt;&lt;strong&gt;云正在吞噬开源&lt;/strong&gt;&lt;/a&gt; —— 云厂商编写了开源软件的管控软件，组建了专家池，通过提供维护攫取了软件生命周期中的绝大部分价值，但却通过搭便车的行为将最大的成本 —— &lt;strong&gt;产研&lt;/strong&gt;交由整个开源社区承担。而 &lt;a href=&#34;/zh/blog/cloud/dba-vs-rds#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%96%B0%E6%8C%91%E6%88%98&#34;&gt;&lt;strong&gt;真正有价值的管控/监控代码却从来不回馈开源社区&lt;/strong&gt;&lt;/a&gt; —— 在数据库领域，我们已经在 MongoDB，ElasticSearch，Redis，以及 MySQL 上看到了这一现象，而 PostgreSQL 社区确实应当引以为鉴。&lt;/p&gt;
&lt;p&gt;好在 PG 生态总是不缺足够头铁的人和公司，愿意站出来维护生态的平衡，反抗公有云厂商的霸权。例如，我自己开发的 PostgreSQL 发行版 &lt;a href=&#34;https://pigsty.io&#34;&gt;Pigsty&lt;/a&gt;，旨在提供一个开箱即用、本地优先的开源云数据库 RDS 替代，将社区自建 PostgreSQL 数据库服务的底线，拔高到云厂商 RDS PG 的水平线。而我的《&lt;a href=&#34;/zh/blog/cloud&#34;&gt;云计算泥石流&lt;/a&gt;》系列专栏则旨在扒开云服务背后的信息不对称，从而帮助公有云厂商更加体面，亦称得上是成效斐然。&lt;/p&gt;
&lt;p&gt;尽管我是 PostgreSQL 的坚定支持者，但我也赞同 Peter Zaitsev 的观点：&lt;em&gt;“如果 MySQL 彻底死掉了，开源关系型数据库实际上就被 PostgreSQL 一家垄断了，而垄断并不是一件好事，因为它会导致发展停滞与创新减缓。PostgreSQL 要想进入全盛状态，有一个 MySQL 作为竞争对手并不是坏事”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;至少，MySQL 可以作为一个鞭策激励，让 PostgreSQL 社区保持凝聚力与危机感，不断提高自身的技术水平，并继续保持开放、透明、公正的社区治理模式，从而持续推动数据库技术的发展。&lt;/p&gt;
&lt;p&gt;MySQL 曾经也辉煌过，也曾经是“开源软件”的一杆标杆，但再精彩的演出也会落幕。MySQL 正在死去 —— 更新疲软，功能落后，性能劣化，质量出血，生态萎缩，此乃天命，实非人力所能改变。
而 PostgreSQL ，将带着开源软件的初心与愿景继续坚定前进 —— 它将继续走 MySQL 未走完的长路，写 MySQL 未写完的诗篇。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pg驶向云外mysql安魂九霄&#34;&gt;PG驶向云外，MySQL安魂九霄&lt;/h2&gt;
&lt;p&gt;我那些残梦，灵异九霄&lt;/p&gt;
&lt;p&gt;徒忙漫奋斗，满目沧愁&lt;/p&gt;
&lt;p&gt;在滑翔之后，完美坠落&lt;/p&gt;
&lt;p&gt;在四维宇宙，眩目遨游&lt;/p&gt;
&lt;p&gt;我那些烂曲，流窜九州&lt;/p&gt;
&lt;p&gt;云游魂飞奏，音愤符吼&lt;/p&gt;
&lt;p&gt;在宿命身后，不停挥手&lt;/p&gt;
&lt;p&gt;视死如归仇，毫无保留&lt;/p&gt;
&lt;p&gt;黑色的不是夜晚，是漫长的孤单&lt;/p&gt;
&lt;p&gt;看脚下一片黑暗，望头顶星光璀璨&lt;/p&gt;
&lt;p&gt;叹世万物皆可盼，唯真爱最短暂&lt;/p&gt;
&lt;p&gt;失去的永不复返，世守恒而今倍还&lt;/p&gt;
&lt;p&gt;摇旗呐喊的热情，携光阴渐远去&lt;/p&gt;
&lt;p&gt;人世间悲喜烂剧，昼夜轮播不停&lt;/p&gt;
&lt;p&gt;纷飞的滥情男女，情仇爱恨别离&lt;/p&gt;
&lt;p&gt;一代人终将老去，但总有人正年轻&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;train.jpg&#34; src=&#34;/zh/blog/db/mysql-is-dead/train.jpg&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/can-oracle-save-mysql&#34;&gt;Oracle还能拯救MySQL吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/oracle-killed-mysql&#34;&gt;Oracle最终还是杀死了MySQL！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/sakila-where-are-you-going&#34;&gt;MySQL性能越来越差，Sakila将何去何从？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;MySQL的正确性为何如此拉垮？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-17-beta1&#34;&gt;PostgreSQL 17 Beta1 发布！牙膏管挤爆了！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-for-everything&#34;&gt;为什么PostgreSQL是未来数据的基石？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world/&#34;&gt;PostgreSQL is eating the database world&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/just-use-pg&#34;&gt;技术极简主义：一切皆用Postgres&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-is-no1&#34;&gt;PostgreSQL：世界上最成功的数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-performance&#34;&gt;PostgreSQL 到底有多强？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/svdb-is-dead&#34;&gt;专用向量数据库凉了吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/vector-json-pg&#34;&gt;向量是新的JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/dev/llm-and-pgvector/&#34;&gt;AI大模型与PGVECTOR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/cloud/dba-vs-rds&#34;&gt;云数据库的模式与新挑战&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/cloud&#34;&gt;云计算泥石流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/redis-oss/&#34;&gt;Redis不开源是“开源”之耻，更是公有云之耻&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-license/&#34;&gt;PostgreSQL会修改开源许可证吗？&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Oracle 还能挽救 MySQL 吗？</title>
      <link>/zh/blog/db/can-oracle-save-mysql/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/can-oracle-save-mysql/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/can-oracle-save-mysql/featured_hu2987e68cf81063d96724a18a545685d0_41623_640x0_resize_q75_catmullrom.jpg" width="640" height="274"/>]]>
        
        &lt;p&gt;Percona 作为 MySQL 生态的主要扛旗者，开发了一系列用户耳熟能详的工具：PMM 监控，XtraBackup 备份，PT 系列工具，以及 MySQL 发行版。
然而近日，Percona 创始人 Peter Zaitsev 在官方博客上公开表达了对 MySQL，及其知识产权属主 Oracle 的失望，以及对版本越高性能越差的不满，这确实是一个值得关注的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/1zlDPie_bVvP7eO6_uTkSw&#34;&gt;Oracle最终还是干死了MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/nKD00j84R-EcOU1VPL1ibA&#34;&gt;Percona：Sakila啊，你将何去何从？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Percona Blog，Marco Tusa，MySQL 生态的重要贡献者，开发了知名的PT系列工具，MySQL备份工具，监控工具与发行版。&lt;/p&gt;
&lt;p&gt;译者：冯若航，网名 Vonng，Pigsty 作者，PostgreSQL 专家与布道师。下云倡导者，数据库下云实践者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我之前写了篇文章 &lt;a href=&#34;/zh/blog/oracle-kill-mysql/&#34;&gt;Oracle最终还是杀死了MySQL&lt;/a&gt; ，引发了不少回应 —— 包括 The Register 上的几篇精彩文章（&lt;a href=&#34;https://www.theregister.com/2024/06/11/early_mysql_engineer_questions_whether/&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://www.theregister.com/2024/06/14/oracles_love_and_hate_relationship/&#34;&gt;2&lt;/a&gt;）。这确实引出了几个值得讨论的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AWS和其他云厂商参与竞争，却不回馈任何贡献，那你还指望 Oracle 做啥呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先 —— 我认为 AWS 和其他云厂商如果愿意对 MySQL 作出更多贡献，那当然是一件好事。
不过我们也应该注意到， Oracle 与这些公司都是竞争关系，并且在 MySQL 这并没有一个公平的竞争环境（AWS 为什么会来参与这种不公平的竞争是另一个话题）。&lt;/p&gt;
&lt;p&gt;对你的竞争对手贡献知识产权可能并不是一个很好的商业决策，特别是 Oracle 还要求贡献者签署的 CLA（贡献者授权协议）。
只要 Oracle 拥有这些知识产权，合理的预期就是由 Oracle 自己来承担大部分维护、改进和推广 MySQL 的责任。&lt;/p&gt;
&lt;p&gt;没错 …… ，但如果 Oracle 不愿意，或不再有能力管理好 MySQL，而仅仅只关注它自己的云版本，就像 AWS 仅仅专注于其 RDS 和 Aurora 服务，我们又能怎么办呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一个解决方案 —— Oracle 应该将 MySQL Community 转让给 Linux Foundation、Apache Foundation 或其他独立实体，允许公平竞争，并专注于他们的 Cloud（Heatwave）和企业级产品。&lt;/strong&gt; 有趣的是，Oracle 已经有了这样的先例：&lt;a href=&#34;https://www.zdnet.com/article/oracle-gives-openoffice-to-apache/&#34;&gt;将 OpenOffice 转交给 Apache 软件基金会&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另一个很好的例子是 &lt;a href=&#34;https://linkerd.io/&#34;&gt;LinkerD&lt;/a&gt; —— 它由 Buoyant 公司 &lt;a href=&#34;https://linkerd.io/2017/01/24/linkerd-joins-the-cloud-native-computing-foundation/&#34;&gt;引入 CNCF&lt;/a&gt; —— 而 Buoyant 也在持续构建它的扩展版本 — &lt;a href=&#34;https://buoyant.io/linkerd-enterprise&#34;&gt;Buoyant Enterprise for LinkerD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在这种情况下，维护和发展开源的 MySQL 成为了一个生态问题：我很确信，如果不是向竞争对手拥有的知识产权贡献，AWS 与其他云厂商肯定愿意参与更多。实际上我们确实可以在 PostgreSQL、Linux 或 Kubernetes 项目中看到云厂商在大力参与。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;有了 PostgreSQL；谁还需要 MySQL 呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PostgreSQL 确实是一个出色的数据库，有着活跃的社区，并且近年来发展迅速。然而仍有很多人更偏好于 MySQL ，也有很多现有应用程序仍然在使用 MySQL —— 因此我们希望 MySQL 能继续健康发展，长命百岁。&lt;/p&gt;
&lt;p&gt;当然还有一点：如果 MySQL 死掉了，开源关系型数据库实际上就被 PostgreSQL 一家垄断了，在我看来，垄断并不是一件好事，因为它会导致发展停滞与创新减缓。PostgreSQL 要想进入全盛状态，有一个 MySQL 作为竞争对手并不是坏事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;难道 MariaDB 不是一个新的、更好的、由社区管理的 MySQL 吗？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为 MariaDB 的存在很好地向 Oracle 施加了压力，迫使其不得不投资 MySQL 。虽然我们没法确定地说如果没有 MariaDB 会怎样，但如果没有它，很可能 MySQL 很久以前就被 Oracle 忽视了。&lt;/p&gt;
&lt;p&gt;话虽如此，虽然 MariaDB 在组织架构上与 Oracle 大有不同，但它也显然不是像 PostgreSQL 那种 “由社区拥有和管理” 的数据库，也没有 PostgreSQL 那样广泛的独立公司贡献者。我认为 MariaDB 确实可以采取一些措施，争取 MySQL 领域的领导地位，但这值得另单一篇文章展开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结一下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 和 MariaDB 是出色的数据库，如果没有它们，开源社区将被绑死在 Oracle 的贼船上，陷入糟糕的境地，但它们今天都还不能完全替代 MySQL。
MySQL 社区的最好结果应该是 Oracle 与达成协议，共同努力，尽可能一起建设好 MySQL。如果不行，MySQL 社区需要一个计划B。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/can-oracle-save-mysql/&#34;&gt;Can Oracle Save MySQL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pigsty.cc/zh/blog/db/sakila-where-are-you-going/&#34;&gt;MySQL性能越来越差，Sakila将何去何从？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pigsty.cc/zh/blog/db/bad-mysql/&#34;&gt;MySQL 的正确性为何如此垃圾？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/is-oracle-finally-killing-mysql/&#34;&gt;Is Oracle Finally Killing MySQL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/can-oracle-save-mysql/&#34;&gt;Can Oracle Save MySQL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/sakila-where-are-you-going/&#34;&gt;Sakila, Where Are You Going?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smalldatum.blogspot.com/2023/10/postgres-vs-mysql-impact-of-cpu.html&#34;&gt;Postgres vs MySQL: the impact of CPU overhead on performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smalldatum.blogspot.com/2024/02/perf-regressions-in-mysql-from-5621-to.html&#34;&gt;Perf regressions in MySQL from 5.6.21 to 8.0.36 using sysbench and a small server&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;英文原文&#34;&gt;英文原文&lt;/h2&gt;
&lt;p&gt;I got quite a response to my article on whether &lt;a href=&#34;https://www.percona.com/blog/is-oracle-finally-killing-mysql/&#34;&gt;Oracle is Killing MySQL,&lt;/a&gt; including a couple of great write-ups on The Register (&lt;a href=&#34;https://www.theregister.com/2024/06/11/early_mysql_engineer_questions_whether/&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://www.theregister.com/2024/06/14/oracles_love_and_hate_relationship/&#34;&gt;2&lt;/a&gt;) on the topic. There are a few questions in this discussion that I think are worth addressing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AWS and other cloud vendors compete, without giving anything back, what else would you expect Oracle to do ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, yes. I think it would be great if AWS and other cloud providers would contribute more to MySQL. We should note, though, that Oracle is a competitor for many of those companies, and there is no “level playing field” when it comes to MySQL (the fact AWS is willing on this unlevel field is another point). Contributing IP to your competitor, especially considering CLA Oracle requires might not be a great business decision. Until Oracle owns that IP, it is reasonable to expect, for Oracle to have most of the burden to maintain, improve, and promote MySQL, too.&lt;/p&gt;
&lt;p&gt;Yes… but what if Oracle is unwilling or unable to be a great MySQL steward anymore and would rather only focus on its cloud version, similar to AWS being solely focused on its RDS and Aurora offerings?  *&lt;strong&gt;There is a solution for that – Oracle should transfer MySQL Community to Linux Foundation, Apache Foundation, or another independent entity, open up the level playing field, and focus on their Cloud (Heatwave) and Enterprise offering.*&lt;/strong&gt; Interestingly enough, there is already a precedent for that with Oracle &lt;a href=&#34;https://www.zdnet.com/article/oracle-gives-openoffice-to-apache/&#34;&gt;transferring OpenOffice to Apache Software Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another great example would be&lt;a href=&#34;https://linkerd.io/&#34;&gt; LinkerD&lt;/a&gt; — which &lt;a href=&#34;https://linkerd.io/2017/01/24/linkerd-joins-the-cloud-native-computing-foundation/&#34;&gt;was brought to CNCF&lt;/a&gt; by Buyant — which continues to build its extended edition&lt;a href=&#34;https://buoyant.io/linkerd-enterprise&#34;&gt; – Buoyant Enterprise for LinkerD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this case, maintaining and growing open source MySQL will become an ecosystem problem and I’m quite sure AWS and other cloud vendors will participate more when they are not contributing to IP owned by their competitors. We can actually see it with PostgreSQL, Linux, or Kubernetes projects which have great participation from cloud vendors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;There is PostgreSQL; who needs MySQL anyway?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed, PostgreSQL is a fantastic database with a great community and has been growing a lot recently. Yet there are still a lot of existing applications on MySQL and many folks who prefer MySQL, and so we need MySQL healthy for many years to come. But there is more; if MySQL were to die, we would essentially have a monopoly with popular open source relational databases, and, in my opinion, monopoly is not a good thing as it leads to stagnation and slows innovation. To have PostgreSQL to be as great as it can be it is very helpful to have healthy competition from MySQL!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Isn’t MariaDB a new, better, community-governed MySQL ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think MariaDB’s existence has been great at putting pressure on Oracle to invest in MySQL. We can’t know for certain “what would have been,” but chances are we would have seen more MySQL neglect earlier if not for MariaDB. Having said that, while organizationally, MariaDB is not Oracle, it is not as cleanly “community owned and governed” as PostgreSQL and does not have as broad a number of independent corporate contributors as PostgreSQL.I think there are steps MariaDB can do to really take a leadership position in MySQL space… but it deserves another article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To sum things up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL and MariaDB are fantastic databases, and if not for them, the open source community would be in a very bad bind with Oracle’s current MySQL stewardship. Neither is quite a MySQL replacement today, and the best outcome for the MySQL community would be for Oracle to come to terms and work with the community to build MySQL into the best database it can be. If not, the MySQL community needs to come up with a plan B.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Oracle最终还是杀死了MySQL</title>
      <link>/zh/blog/db/oracle-kill-mysql/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/oracle-kill-mysql/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/oracle-kill-mysql/featured_hue3f87ec8a4da851341c119062f705f52_45736_640x0_resize_q75_catmullrom.jpg" width="640" height="358"/>]]>
        
        &lt;p&gt;大约15年前，&lt;a href=&#34;https://www.oracle.com/corporate/pressrelease/oracle-buys-sun-042009.html&#34;&gt;Oracle收购了Sun公司&lt;/a&gt;，从而也拥有了MySQL，互联网上关于Oracle何时会“扼杀MySQL”的&lt;a href=&#34;https://www.quora.com/Did-Oracle-buy-MySQL-in-order-to-kill-it&#34;&gt;讨论&lt;/a&gt;此起彼伏。当时流传有各种理论：从彻底扼杀 MySQL 以减少对 Oracle 专有数据库的竞争，到干掉 MySQL 开源项目，只留下 “MySQL企业版” 作为唯一选择。这些谣言的传播对 MariaDB，PostgreSQL 以及其他小众竞争者来说都是好生意，因此在当时传播得非常广泛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Percona Blog，Marco Tusa，MySQL 生态的重要贡献者，开发了知名的PT系列工具，MySQL备份工具，监控工具与发行版。&lt;/p&gt;
&lt;p&gt;译者：冯若航，网名 Vonng，Pigsty 作者，PostgreSQL 专家与布道师。下云倡导者，数据库下云实践者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而实际上，Oracle 最终把 MySQL 管理得还不错。MySQL 团队基本都保留下来了，由 MySQL 老司机 Tomas Ulin 掌舵。MySQL 也变得更稳定、更安全。许多技术债务也解决了，许多现代开发者想要的功能也有了，例如 JSON支持和高级 SQL 标准功能的支持。&lt;/p&gt;
&lt;p&gt;虽然确实有 &lt;a href=&#34;https://www.mysql.com/products/enterprise/&#34;&gt;“MySQL企业版”&lt;/a&gt; 这么个东西，但它实际上关注的是开发者不太在乎的企业需求：可插拔认证、审计、防火墙等等。虽然也有专有的 GUI 图形界面、监控与备份工具（例如 MySQL 企业监控），但业内同样有许多开源和商业软件竞争者，因此也说不上有特别大的供应商锁定。&lt;/p&gt;
&lt;p&gt;在此期间我也常为 Oracle 辩护，因为许多人都觉得 MySQL 会遭受虐待，毕竟 —— Oracle 的名声确实比较糟糕。&lt;/p&gt;
&lt;p&gt;不过在那段期间，我认为 Oracle 确实遵守了这条众所周知的开源成功黄金定律：“&lt;strong&gt;转换永远不应该妨碍采用&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;conversion.png&#34; src=&#34;/zh/blog/db/oracle-kill-mysql/conversion.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：“Conversion should never compromise Adoption” 这句话指在开发或改进开源软件时，转换或升级过程中的任何变动都不应妨碍现有用户的使用习惯或新用户的加入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而随着近些年来 Oracle 推出了 “MySQL Heatwave”（一种 MySQL 云数据库服务），事情开始起变化了。&lt;/p&gt;
&lt;p&gt;MySQL Heatwave 引入了许多 MySQL 社区版或企业版中没有的功能，如 加速分析查询 与 机器学习。&lt;/p&gt;
&lt;p&gt;在“&lt;strong&gt;分析查询&lt;/strong&gt;”上，MySQL 的问题相当严重，到现在甚至都还不支持 &lt;strong&gt;并行查询&lt;/strong&gt;。市场上新出现的 CPU 核数越来越多，都到几百个了，但单核性能并没有显著增长，而不支持并行严重制约了 MySQL 的分析性能提升 —— 不仅仅影响分析应用的查询，日常事务性应用里面简单的 &lt;code&gt;GROUP BY&lt;/code&gt; 查询也会受影响。（备注：MySQL 8 对 DDL 有一些 &lt;a href=&#34;https://dev.mysql.com/blog-archive/mysql80-innodb-parallel-threads-ddl/&#34;&gt;并行支持&lt;/a&gt;，但查询没有这种支持）&lt;/p&gt;
&lt;p&gt;这么搞的原因，是不是希望用户能够有更多理由去买 MySQL Heatwave？但或者，人们其实也可以直接选择用分析能力更强的 PostgreSQL 和 ClickHouse。&lt;/p&gt;
&lt;p&gt;另一个开源 MySQL 极为拉垮的领域是 &lt;strong&gt;向量检索&lt;/strong&gt;。其他主流开源数据库都已经添加了向量检索功能，MariaDB 也正在努力实现这个功能，但就目前而言，MySQL 生态里只有云上限定的  &lt;a href=&#34;https://blogs.oracle.com/mysql/post/introducing-vector-store-and-generative-ai-in-mysql-heatwave&#34;&gt;MySQL Heatwave&lt;/a&gt; 才有这个功能，这实在是令人遗憾。&lt;/p&gt;
&lt;p&gt;然后就是最奇怪的决策了 —— Javascript 功能只在企业版中提供，我认为 MySQL 应该尽可能去赢得 Javascript 开发者的心，而现在很多 JS 开发者都已经更倾向于更简单的 MongoDB 了。&lt;/p&gt;
&lt;p&gt;我认为这些决策都违背了前面提到的开源黄金法则 —— 它们显然限制了 MySQL 的采用与普及 —— 不论是这些“XX限定”的特定功能，还是对 MySQL 未来政策变化的担忧。&lt;/p&gt;
&lt;p&gt;这还没完，MySQL 的性能也出现了严重下降，也许是因为 &lt;a href=&#34;https://smalldatum.blogspot.com/2024/04/sysbench-on-small-server-mariadb-and.html&#34;&gt;多年来无视性能工程部门&lt;/a&gt;。与MySQL 5.6 相比，MySQL 8.x 单线程简单工作负载上的性能出现了大幅下滑。你可能会说增加功能难免会以牺牲性能为代价，但 MariaDB 的性能退化要轻微得多，而 PostgreSQL 甚至能在 &lt;a href=&#34;https://smalldatum.blogspot.com/2023/10/postgres-vs-mysql-impact-of-cpu.html&#34;&gt;&lt;strong&gt;新增功能的同时 显著提升性能&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;显然，我不知道 Oracle 管理团队是怎么想的，也不能说这到底是蠢还是坏，但过去几年的这些产品决策，显然不利于 MySQL 的普及，特别是在同一时间，PostgreSQL 在引领用户心智上高歌猛进，根据 DB-Engines 热度排名，大幅缩小了与 MySQL 的差距；而根据 &lt;a href=&#34;https://survey.stackoverflow.co/2023/#technology-most-popular-technologies&#34;&gt;StackOverflow开发者调查&lt;/a&gt; ，甚至已经超过 MySQL 成为最流行的数据库了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine.png&#34; src=&#34;/zh/blog/db/oracle-kill-mysql/db-engine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论如何，除非甲骨文转变其关注点，顾及现代开发者对关系数据库的需求，否则 MySQL 迟早要完 —— 无论是被 Oracle 的行为杀死，还是被 Oracle 的不作为杀死。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pigsty.cc/zh/blog/db/sakila-where-are-you-going/&#34;&gt;MySQL性能越来越差，Sakila将何去何从？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pigsty.cc/zh/blog/db/bad-mysql/&#34;&gt;MySQL 的正确性为何如此垃圾？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/is-oracle-finally-killing-mysql/&#34;&gt;Is Oracle Finally Killing MySQL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/can-oracle-save-mysql/&#34;&gt;Can Oracle Save MySQL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/sakila-where-are-you-going/&#34;&gt;Sakila, Where Are You Going?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smalldatum.blogspot.com/2023/10/postgres-vs-mysql-impact-of-cpu.html&#34;&gt;Postgres vs MySQL: the impact of CPU overhead on performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smalldatum.blogspot.com/2024/02/perf-regressions-in-mysql-from-5621-to.html&#34;&gt;Perf regressions in MySQL from 5.6.21 to 8.0.36 using sysbench and a small server&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MySQL性能越来越差，Sakila将何去何从？</title>
      <link>/zh/blog/db/sakila-where-are-you-going/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/sakila-where-are-you-going/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/sakila-where-are-you-going/featured_hu8ed8690932d8569a6d213e2ccba32157_57485_640x0_resize_q75_catmullrom.jpg" width="640" height="274"/>]]>
        
        &lt;p&gt;在 Percona，我们时刻关注用户的需求，并尽力满足他们。我们特别监控了 MySQL 版本的分布和使用情况，发现了一个引人注目的趋势：从版本 5.7 迁移到 8.x 的步伐明显缓慢。更准确地说，许多用户仍需坚持使用 5.7 版本。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql_versions_adoption_trend.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/mysql_versions_adoption_trend.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于这一发现，我们采取了几项措施。首先，我们与一些仍在使用 MySQL 5.7 的用户聊了聊，探究他们不想迁移到 8.x 的原因。为此，我们制定了 EOL 计划，为 5.7 版本提供&lt;a href=&#34;https://www.percona.com/post-mysql-5-7-eol-support&#34;&gt;延长的生命周期支持&lt;/a&gt;，确保需要依赖旧版本、二进制文件及代码修复的用户能够得到专业支持。&lt;/p&gt;
&lt;p&gt;同时，我们对不同版本的 MySQL 进行了广泛测试，以评估是否有任何性能下降。虽然测试尚未结束，但我们已经收集了足够的数据，开始绘制相关图表。本文是对我们测试结果的初步解读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;剧透警告：对于像我这样热爱 Sakila 的人来说，这些发现可能并不令人高兴。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;译者注：Sakila 是 MySQL 的吉祥物海豚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Percona Blog，Marco Tusa，MySQL 生态的重要贡献者，开发了知名的PT系列工具，MySQL备份工具，监控工具与发行版。&lt;/p&gt;
&lt;p&gt;译者：冯若航，网名 Vonng，Pigsty 作者，PostgreSQL 专家与布道师。下云倡导者，数据库下云实践者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;h3 id=&#34;假设&#34;&gt;假设&lt;/h3&gt;
&lt;p&gt;测试的方法五花八门，我们当然明白，测试结果可能因各种要素而异，（例如：运行环境， MySQL 服务器配置）。但如果我们在同样的平台上，比较同一个产品的多个版本，那么可以合理假设，在不改变 MySQL 服务器配置的前提下，影响结果的变量可以最大程度得到控制。&lt;/p&gt;
&lt;p&gt;因此，我首先根据 &lt;strong&gt;MySQL 默认配置&lt;/strong&gt; 运行性能测试，这里的工作假设很明确，你发布产品时使用的默认值，通常来说是最安全的配置，也经过了充分的测试。&lt;/p&gt;
&lt;p&gt;当然，我还做了一些 &lt;a href=&#34;https://github.com/Tusamarco/blogs/blob/master/sakila_where_are_you_going/config_changes.txt&#34;&gt;&lt;strong&gt;配置优化&lt;/strong&gt;&lt;/a&gt; ，并评估优化后的参数配置会如何影响性能。&lt;/p&gt;
&lt;h3 id=&#34;我们进行哪些测试&#34;&gt;我们进行哪些测试？&lt;/h3&gt;
&lt;p&gt;我们跑了 &lt;a href=&#34;https://github.com/akopytov/sysbench&#34;&gt;sysbench&lt;/a&gt; 与 &lt;a href=&#34;https://www.tpc.org/tpcc/&#34;&gt;TPC-C Like&lt;/a&gt; 两种 Benchmark。
可以在这里找到完整的&lt;a href=&#34;https://github.com/Tusamarco/benchmarktools/blob/main/docs/plan.md&#34;&gt;测试方法与细节&lt;/a&gt;，实际执行的命令则可以在这里找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Tusamarco/benchmarktools/blob/main/software/fill_sysbench_map.sh&#34;&gt;sysbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Tusamarco/benchmarktools/blob/main/software/fill_tpcc_map.sh&#34;&gt;TPC-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;
&lt;p&gt;我们跑完了上面一整套测试，&lt;a href=&#34;https://github.com/Tusamarco/blogs/tree/master/sakila_where_are_you_going&#34;&gt;所有的结果都可以在这里找到&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但为了保持文章的简洁和高质量，我在这里只对 Sysbench 读写测试和 TPC-C 的结果进行分析与介绍。 之所以选择这两项测试，是因为它们直接且全面地反映了 MySQL 服务器的表现，同时也是最常见的应用场景。其他测试更适合用来深入分析特定的问题。&lt;/p&gt;
&lt;p&gt;在此报告中，下面进行的 sysbench 读写测试中，写操作比例约为 36%，读操作比例约为 64%，读操作由点查询和范围查询组成。而在 TPC-C 测试中，读写操作的比例则均为 50/50 %。&lt;/p&gt;
&lt;h3 id=&#34;sysbench-读写测试&#34;&gt;sysbench 读写测试&lt;/h3&gt;
&lt;p&gt;首先我们用默认配置来测试不同版本的 MySQL。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小数据集，默认配置：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql_default_small.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/mysql_default_small.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小数据集，优化后的结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql_optimized_small.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/mysql_optimized_small.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大数据集，默认配置：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql_default_large.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/mysql_default_large.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大数据集，优化配置：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql_optimized_large.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/mysql_optimized_large.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;前两幅图表很有趣，但很显然说明了一点，我们不能拿&lt;strong&gt;默认配置&lt;/strong&gt;来测性能，我们可以用它们作为基础，从中找出更好的默认值。&lt;/p&gt;
&lt;p&gt;Oracle 最近决定在 8.4 中修改许多参数的默认值，也证实了这一点（&lt;a href=&#34;https://lefred.be/content/mysql-8-4-lts-new-production-ready-defaults-for-innodb/&#34;&gt;参见文章&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;有鉴于此，我将重点关注通过优化参数配置后进行的性能评测结果。&lt;/p&gt;
&lt;p&gt;看看上面的图表，我们不难看出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用默认值的 MySQL 5.7 ，在两种情况（大小数据集）下的表现都更好。&lt;/li&gt;
&lt;li&gt;MySQL 8.0.36 因为默认配置参数不佳，使其在第一种（小数据集）的情况表现拉垮。但只要进行一些优化调整，就能让它的性能表现超过 8.4，并更接近 5.7。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tpc-c-测试&#34;&gt;TPC-C 测试&lt;/h3&gt;
&lt;p&gt;如上所述，TPC-C 测试应为写入密集型，会使用事务，执行带有 JOIN，GROUP，以及排序的复杂查询。&lt;/p&gt;
&lt;p&gt;我们使用最常用的两种 &lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;&lt;strong&gt;隔离等级&lt;/strong&gt;&lt;/a&gt;，可重复读（Repeatable Read），以及读已提交（Read Committed），来运行 TPC-C 测试。&lt;/p&gt;
&lt;p&gt;尽管我们在多次重复测试中遇到了一些问题，但都是因为一些锁超时导致的随机问题。因此尽管图中有一些空白，但都不影响大趋势，只是压力打满的表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，优化配置，RR隔离等级：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc-rr-optimized.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc-rr-optimized.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，优化配置，RC隔离等级：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc-rc-optimized.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc-rc-optimized.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在本次测试中，我们可以观察到，MySQL 5.7 的性能比其他 MySQL 版本要更好。&lt;/p&gt;
&lt;h3 id=&#34;与-percona-的-mysql-和-mariadb-比会怎样&#34;&gt;与 Percona 的 MySQL 和 MariaDB 比会怎样？&lt;/h3&gt;
&lt;p&gt;为了简洁起见，我将仅在这里介绍优化参数配置的测试，原因上面说过了，默认参数没毛用没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sysbench读写，小数据集的测试结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;vs-percona-small.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/vs-percona-small.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sysbench读写，大数据集的测试结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;vs-percona-large.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/vs-percona-large.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们将 MySQL 的各个版本与 Percona Server MySQL 8.0.36 以及 MariaDB 11.3 进行对比时，
可以看到 MySQL 8.4 只有和 MariaDB 比时表现才更好，与 MySQL 8.0.36 比较时仍然表现落后。&lt;/p&gt;
&lt;h4 id=&#34;tpc-c&#34;&gt;TPC-C&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RR隔离等级的测试结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc-rr-optimized-all.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc-rr-optimized-all.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RC隔离等级的测试结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc-rc-optimized-all.png&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc-rc-optimized-all.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如预期的那样，MySQL 8.4 在这里的表现也不佳，只有 MariaDB 表现更差来垫底。
顺便一提，Percona Server for MySQL 8.0.36 是唯一能处理好并发争用增加的 MySQL。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;这些测试说明了什么&#34;&gt;这些测试说明了什么？&lt;/h2&gt;
&lt;p&gt;坦白说，我们在这里测出来的结果，也是我们大多数用户的亲身经历 —— &lt;strong&gt;MySQL 的性能随着版本增加而下降&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然，MySQL 8.x 有一些有趣的新增功能，但如果你将性能视为首要且最重要的主题，那么 MySQL 8.x 并没有更好。&lt;/p&gt;
&lt;p&gt;话虽如此，我们必须承认 —— 大多数仍在使用 MySQL 5.7 的人可能是对的（有成千上万的人）。为什么要冒着极大的风险进行迁移，结果发现却损失了相当大一部分的性能呢？&lt;/p&gt;
&lt;p&gt;关于这一点，可以用 TPC-C 测试结果来说明，我们可以把数据转换为每秒事务数吞吐量，然后比较性能损失了多少：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RR隔离等级，MySQL 8.4 的性能折损：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc_trx_lost_rr.jpg&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc_trx_lost_rr.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RC隔离等级，MySQL 8.4 的性能折损：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc_trx_lost_rc.jpg&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc_trx_lost_rc.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，在两项测试中，MySQL 8.x 的性能劣化都非常明显，而其带来的好处（如果有的话）却并不显著。&lt;/p&gt;
&lt;p&gt;使用数据的绝对值：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RR隔离等级，MySQL 8.4 的性能折损：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc_trx_lost_rr-1.jpg&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc_trx_lost_rr-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TPC-C，RC隔离等级，MySQL 8.4 的性能折损：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tpcc_trx_lost_rc-1.jpg&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/tpcc_trx_lost_rc-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，我们需要问一下自己：我的业务可以应对这样的性能劣化吗？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一些思考&#34;&gt;一些思考&lt;/h2&gt;
&lt;p&gt;当年 MySQL 被卖给 SUN Microsystems 时，我就在 MySQL AB 工作，我对这笔收购非常不高兴。
当 Oracle 接管 SUN 时，我非常担心 Oracle 可能会决定干掉 MySQL，我决定加入另一家公司继续搞这个。&lt;/p&gt;
&lt;p&gt;此后几年里，我改了主意，开始支持和推广 Oracle 在 MySQL 上的工作。从各种方面来看，我现在依然还在支持和推广它。&lt;/p&gt;
&lt;p&gt;他们在规范开发流程方面做得很好，代码清理工作也卓有成效。但是，其他代码上却没啥进展，我们看到的性能下降，就是这种缺乏进展的代价；请参阅 Peter 的文章《&lt;a href=&#34;/zh/blog/db/oracle-kill-mysql&#34;&gt;Oracle 最终会杀死 MySQL 吗？》。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一方面，我们不得不承认 Oracle 确实在 OCI/MySQL/Heatwave 这些产品的性能和功能上投资了很多 —— 只不过这些改进没有体现在 MySQL 的代码中，无论是社区版还是企业版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再次强调，我认为这一点非常可悲，但我也能理解为什么&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当 AWS 和 Google 等云厂商使用 MySQL 代码、对其进行优化以供自己使用、赚取数十亿美元，甚至不愿意将代码回馈时，凭什么 Oracle 就要继续免费优化 MySQL 的代码？&lt;/p&gt;
&lt;p&gt;我们知道这种情况已经持续了很多年了，我们也知道这对开源生态造成了极大的负面影响。&lt;/p&gt;
&lt;p&gt;MySQL 只不过是更大场景中的一块乐高积木而已，在这个场景中，&lt;strong&gt;云计算公司正在吞噬其他公司的工作成果，自己用来发大财&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们又能做什么？我只能希望我们能很快看到不一样的东西：开放代码，投资项目，帮助像 MySQL 这样的社区收复失地。&lt;/p&gt;
&lt;p&gt;与此同时，我们必须承认，许多客户与用户使用 MySQL 5.7 是有非常充分的理由的。
在我们能解决这个问题之前，他们可能永远也不会决定迁移，或者，如果必须迁移的话，迁移到其他替代上，比如 PostgreSQL。&lt;/p&gt;
&lt;p&gt;然后，Sakila 将像往常一样，因为人类的贪婪而缓慢而痛苦地死去，从某种意义上说，这种事儿并不新鲜，但很糟糕。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;fin.jpg&#34; src=&#34;/zh/blog/db/sakila-where-are-you-going/fin.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;祝大家使用 MySQL 快乐。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/sakila-where-are-you-going/&#34;&gt;Sakila, Where Are You Going?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smalldatum.blogspot.com/2024/02/perf-regressions-in-mysql-from-5621-to.html&#34;&gt;Perf regressions in MySQL from 5.6.21 to 8.0.36 using sysbench and a small server&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MySQL正确性竟如此垃圾？</title>
      <link>/zh/blog/db/bad-mysql/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/bad-mysql/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/bad-mysql/featured_hu02aa61ae1d9de35cbe238d2676170cb9_143736_640x0_resize_q75_catmullrom.jpg" width="640" height="321"/>]]>
        
        &lt;p&gt;MySQL &lt;strong&gt;曾经&lt;/strong&gt;是世界上最流行的开源关系型数据库，然而流行并不意味着先进，流行的东西也会出大问题。&lt;a href=&#34;https://jepsen.io/analyses/mysql-8.0.34&#34;&gt;JEPSEN&lt;/a&gt; 对 MySQL 的隔离等级评测捅穿了这层窗户纸 —— 在&lt;strong&gt;正确性&lt;/strong&gt;这个体面数据库产品必须的基本属性上，MySQL 的表现一塌糊涂。&lt;/p&gt;
&lt;p&gt;MySQL 文档声称实现了 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 隔离等级，但实际提供的正确性保证却弱得多。JEPSEN 在 Hermitage 的研究基础上进一步指出，MySQL 的 可重复读/RR 隔离等级实际上并不可重复读，甚至既不&lt;strong&gt;原子&lt;/strong&gt;也不&lt;strong&gt;单调&lt;/strong&gt;，连 &lt;strong&gt;单调原子视图/MAV&lt;/strong&gt; 的基本水平都不满足。&lt;/p&gt;
&lt;p&gt;此外，能“避免”这些异常的 MySQL &lt;strong&gt;可串行化/SR&lt;/strong&gt; 隔离等级难以生产实用，也非官方文档与社区认可的最佳实践；而且在AWS RDS默认配置下，MySQL SR 也没有真正达到“串行化”的要求；而李海翔教授的对 MySQL 一致性的分析进一步指出了 SR 的设计缺陷与问题。&lt;/p&gt;
&lt;p&gt;综上， &lt;strong&gt;MySQL 的 ACID 存在缺陷，且与文档承诺不符&lt;/strong&gt; —— 这可能会导致严重的正确性问题。尽管可以通过显式加锁等方式规避此类问题，但用户确实应当充分意识到这里的利弊权衡与风险：在对正确性/一致性有要求的场景中选用 MySQL 时，请务必保持谨慎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#正确性为什么很重要&#34;&gt;正确性为什么很重要？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#hermitage的结果怎么说&#34;&gt;Hermitage的结果怎么说？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#jepsen-又有什么新发现&#34;&gt;JEPSEN 又有什么新发现？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#隔离性问题不可重复读&#34;&gt;隔离性问题：不可重复读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#原子性问题非单调视图&#34;&gt;原子性问题：非单调视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#串行化问题鸡肋且糟糕&#34;&gt;串行化问题：鸡肋且糟糕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#正确性与性能的利弊权衡&#34;&gt;正确性与性能的利弊权衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/db/bad-mysql/#参考&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/gQZ3Q5JKV8gaBNhc1puPcA&#34;&gt;&lt;img src=&#34;/zh/blog/db/bad-mysql/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正确性为什么很重要&#34;&gt;正确性为什么很重要？&lt;/h2&gt;
&lt;p&gt;可靠的系统需要应对各种错误，在数据系统的残酷现实中，更是很多事情都可能出错。要保证数据不丢不错，实现可靠的数据处理是一件工作量巨大且极易错漏的事情。而&lt;strong&gt;事务&lt;/strong&gt;的出现解决了这个问题。事务是数据处理领域最伟大的抽象之一，也是关系型数据库引以为傲的金字招牌和尊严所在。&lt;/p&gt;
&lt;p&gt;事务这个抽象让所有可能的结果被归结为两种情况：&lt;strong&gt;要么成功完事 COMMIT，要么失败了事 ROLLBACK&lt;/strong&gt;，有了后悔药，程序员不用再担心处理数据时半路翻车，留下数据一致性被破坏的惨不忍睹的车祸现场。应用程序的错误处理变得简单多了，因为它不用再担心部分失败的情况了。而它提供的保证，用四个单词的缩写，被概括为 &lt;strong&gt;ACID&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;acid.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-acid.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;事务的&lt;strong&gt;原子性/A&lt;/strong&gt;让你在提交前能随时中止事务并丢弃所有写入，相应地，事务的&lt;strong&gt;持久性/D&lt;/strong&gt;则承诺一旦事务成功提交，即使发生硬件故障或数据库崩溃，写入的任何数据也不会丢失。事务的&lt;strong&gt;隔离性/I&lt;/strong&gt;确保每个事务可以假装它是唯一在整个数据库上运行的事务 —— 数据库会确保当多个事务被提交时，结果与它们一个接一个地串行运行是一样的，尽管实际上它们可能是并发运行的。而原子性与隔离性则服务于 &lt;strong&gt;一致性/Consistency&lt;/strong&gt; —— 也就是应用的&lt;strong&gt;正确性/Correctness&lt;/strong&gt; —— ACID 中的C是应用的属性而非事务本身的属性，属于用来凑缩写的。&lt;/p&gt;
&lt;p&gt;然而在工程实践中，完整的&lt;strong&gt;隔离性/I&lt;/strong&gt;是很少见的 —— 用户很少会使用所谓的 “&lt;strong&gt;可串行化/SR&lt;/strong&gt;” 隔离等级，因为它有可观的性能损失。一些流行的数据库如 Oracle 甚至没有实现它 —— 在 Oracle 中有一个名为 “可串行化” 的隔离级别，但实际上它实现了一种叫做 &lt;strong&gt;快照隔离（snapshot isolation）&lt;/strong&gt; 的功能，&lt;strong&gt;这是一种比可串行化更弱的保证&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ansi-sql.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-ansi-sql.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;RDBMS 允许使用不同的&lt;strong&gt;隔离级别&lt;/strong&gt;，供用户在&lt;strong&gt;性能&lt;/strong&gt;与&lt;strong&gt;正确性&lt;/strong&gt;之间进行权衡。ANSI SQL92 用三种&lt;strong&gt;并发异常（Anomaly）&lt;/strong&gt;，划分出四种不同的&lt;strong&gt;隔离级别&lt;/strong&gt;，将这种利弊权衡进行了（糟糕的）标准化。：更弱的隔离级别“理论上”可以提供更好的性能，但也会出现更多种类的&lt;strong&gt;并发异常（Anomaly）&lt;/strong&gt;，这会影响应用的正确性。&lt;/p&gt;
&lt;p&gt;为了确保正确性，用户可以使用额外的并发控制机制，例如显式加锁或 SELECT FOR UPDATE ，但这会引入额外的复杂度并影响系统的简单性。对于金融场景而言，正确性是极其重要的 —— 记账错漏，对账不平很可能会在现实世界中产生严重后果；然而对于糙猛快的互联网场景而言，错漏几条数据并非不可接受 —— 正确性的优先级通常会让位于性能。
这也为伴随互联网东风而流行的 &lt;strong&gt;MySQL&lt;/strong&gt; 的正确性问题埋下了祸根。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;hermitage的结果怎么说&#34;&gt;Hermitage的结果怎么说？&lt;/h2&gt;
&lt;p&gt;在介绍 JEPSEN 的研究之前，我们先来回顾一下 &lt;a href=&#34;https://github.com/ept/hermitage&#34;&gt;Hermitage&lt;/a&gt;  项目。。这是互联网名著 《DDIA》 作者 Martin Kelppmann 在 &lt;strong&gt;2014&lt;/strong&gt; 年发起的项目，旨在评测各种主流关系数据库的&lt;strong&gt;正确性&lt;/strong&gt;。项目设计了一系列并发运行的事务场景，用于评定数据库标称隔离等级的实际水平。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hermitage.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-hermitage.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;从 Hermitage 的评测结果表格中不难看出，在主流数据库的隔离级别实现里有两处缺陷，用红圈标出：Oracle 的 &lt;strong&gt;可串行化/SR&lt;/strong&gt; 因无法避免 G2 异常，而被认为实际上是 “&lt;strong&gt;快照隔离/SI&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;MySQL 的问题更为显著：因为默认使用的 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 隔离等级无法避免 PMP / G-Single 异常，Hermitage 将其实际等级定为 &lt;strong&gt;单调原子视图/MAV&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-level.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-level.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要指出 ANSI SQL 92 隔离等级是一个糟糕简陋且广为诟病的标准，它只定义了三种异常现象并用它们区分出四个隔离等级 —— 但实际上的异常种类/隔离等级要多得多。著名的《A Critique of ANSI SQL Isolation Levels》论文对此提出了修正，并介绍了几种重要的新隔离等级，并给出了它们之间的强弱关系偏序图（图左）。&lt;/p&gt;
&lt;p&gt;在新的模型下，许多数据库的 “&lt;strong&gt;读已提交/RC&lt;/strong&gt;” 与 “&lt;strong&gt;可重复读/RR&lt;/strong&gt;” 实际上是更为实用的 “&lt;strong&gt;单调原子视图/MAV&lt;/strong&gt;” 和 “&lt;strong&gt;快照隔离/SI&lt;/strong&gt;” 。但 MySQL 确实别具一格：在 Hermitage 的评测中，MySQL的 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 与 &lt;strong&gt;快照隔离/SI&lt;/strong&gt; 相距甚远，也不满足 ANSI 92 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 的标准，实际水平为 **单调原子视图/MAV。**而 JEPSEN 的研究进一步指出，MySQL &lt;strong&gt;可重复读/RR&lt;/strong&gt; 实际上连 &lt;strong&gt;单调原子视图/MAV&lt;/strong&gt; 都不满足，仅仅略强于 &lt;strong&gt;读已提交/RC&lt;/strong&gt; 。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jepsen-又有什么新发现&#34;&gt;JEPSEN 又有什么新发现？&lt;/h2&gt;
&lt;p&gt;JEPSEN 是分布式系统领域最为权威的测试框架，他们最近发布了针对 MySQL 最新的 8.0.34 版本的研究与测评。建议读者直接&lt;a href=&#34;https://jepsen.io/analyses/mysql-8.0.34&#34;&gt;阅读原文&lt;/a&gt;，以下是论文摘要：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 是流行的关系型数据库。我们重新审视了 Kleppmann （DDIA作者）在2014年发起的 &lt;a href=&#34;https://github.com/ept/hermitage&#34;&gt;Hermitage&lt;/a&gt; 项目结果，并确认了在当下 MySQL 的 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 隔离等级依然会出现 G2-item、G-single 和丢失更新异常。我们用事务一致性检查组件 —— Elle，发现了 MySQL 可重复读隔离等级也违反了内部一致性。更有甚者 —— 它违反了单调原子视图（MAV）：即一个事务可以先观察到另一个事务的结果，再次尝试观察后却又无法复现同样的结果。作为彩蛋，我们还发现 AWS RDS 的 MySQL集群经常出现违反串行要求的异常。这项研究是独立进行的，没有报酬，并遵循 &lt;a href=&#34;https://jepsen.io/ethics&#34;&gt;Jepsen研究伦理&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL 8.0.34 的 &lt;strong&gt;RU&lt;/strong&gt;，&lt;strong&gt;RC&lt;/strong&gt;，&lt;strong&gt;SR&lt;/strong&gt; 隔离等级符合 ANSI 标准的描述。且默认配置（RR，且&lt;code&gt;innodb_flush_log_at_trx_commit = on&lt;/code&gt;）下的 &lt;strong&gt;持久性/D&lt;/strong&gt; 并没有问题。问题出在MySQL 默认的 &lt;strong&gt;可重复读/RR&lt;/strong&gt; 隔离等级上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不满足 ANSI SQL92 可重复读（G2，WriteSkew）&lt;/li&gt;
&lt;li&gt;不满足快照隔离（G-single, ReadSkew, LostUpdate）&lt;/li&gt;
&lt;li&gt;不满足游标稳定性（LostUpdate）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;违反内部一致性&lt;/strong&gt;（Hermitage 披露）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;违反读单调性&lt;/strong&gt;（JEPSEN新披露）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-level.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-level.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;MySQL RR 下的事务观察到了违反内部一致性、单调性、原子性的现象。这使得其评级被进一步调整至一个仅略高于 RC 的未定隔离等级水平上。&lt;/p&gt;
&lt;p&gt;在 JEPSEN 的测试中共披露了六项异常，其中在2014年已知的问题我们先跳过，这里重点关注 JEPSEN 的新发现的异常，下面是几个具体的例子。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;隔离性问题不可重复读&#34;&gt;隔离性问题：不可重复读&lt;/h2&gt;
&lt;p&gt;在这个测试用例（JEPSEN 2.3）中是用来一张简单的表 &lt;code&gt;people&lt;/code&gt; ，&lt;code&gt;id&lt;/code&gt; 作为主键，预填充一行数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gender&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gender&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;moss&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;enby&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随即并发运行一系列写事务 —— 每个事务先读这一行的 &lt;code&gt;name&lt;/code&gt; 字段；然后更新 &lt;code&gt;gender&lt;/code&gt; 字段，随即再次读取 &lt;code&gt;name&lt;/code&gt; 字段。正确的可重复读意味着在这个事务中，两次对 &lt;code&gt;name&lt;/code&gt; 的读取返回的结果应该是一致的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ISOLATION&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;LEVEL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;REPEATABLE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;READ&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;START&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                     &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 开启RR事务
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 结果为 &amp;#34;pebble&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;UPDATE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gender&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;femme&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 随便更新点什么
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 结果为 “moss”
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;COMMIT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是在测试结果中 ，9048个事务中的126个出现了&lt;strong&gt;内部一致性错误&lt;/strong&gt; —— 尽管是在 可重复读 隔离等级上运行的，但是实际读到的名字还是出现了变化。这样的行为与 MySQL 的&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read&#34;&gt;隔离级别文档&lt;/a&gt;矛盾，该文档声称：“同一事务中的一致读取，会读取第一次读取建立的快照”。它与 MySQL 的&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html&#34;&gt;一致性读文档&lt;/a&gt;相矛盾，该文档特别指出，“InnoDB 在事务的第一次读时分配一个时间点，并发事务的影响不应出现在后续的读取中”。&lt;/p&gt;
&lt;p&gt;ANSI / Adya 可重复读实质是：一旦事务观察到某个值，它就可以指望该值在事务的其余部分保持稳定。MySQL 则相反：&lt;strong&gt;写入请求是邀请另一个事务潜入，并破坏用户刚刚读取的状态&lt;/strong&gt;。这样的隔离设计与行为表现确实是难以置信地愚蠢。但这儿还有更离谱的事情 —— 比如&lt;strong&gt;单调性&lt;/strong&gt;和&lt;strong&gt;原子性&lt;/strong&gt;问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原子性问题非单调视图&#34;&gt;原子性问题：非单调视图&lt;/h2&gt;
&lt;p&gt;Kleppmann 在 Hermitage 中将 MySQL 可重复读评级为&lt;a href=&#34;https://jepsen.io/consistency/models/monotonic-atomic-view&#34;&gt;单调原子视图/MAV&lt;/a&gt;。根据 &lt;a href=&#34;https://amplab.cs.berkeley.edu/wp-content/uploads/2013/10/hat-vldb2014.pdf&#34;&gt;Bailis 等&lt;/a&gt; 的定义，单调原子视图确保一旦事务 &lt;em&gt;T2&lt;/em&gt; 观察到事务&lt;em&gt;T1&lt;/em&gt; 的任意结果，&lt;em&gt;T2&lt;/em&gt; 即观察到 &lt;em&gt;T1&lt;/em&gt; 的所有结果。&lt;/p&gt;
&lt;p&gt;如果 MySQL 的 RR 只是在每次执行写入查询时重新获取一个快照，那么如果快照是单调的，它还是可以提供 MAV 等级的隔离保证 —— 而这正是 PostgreSQL &lt;strong&gt;读已提交/RC&lt;/strong&gt; 隔离级别的工作原理。&lt;/p&gt;
&lt;p&gt;然而在常规的 MySQL 单节点部署中，情况并非如此：MySQL 在 RR 隔离等级时经常违反单调原子视图。JEPSEN（2.4）的这个例子用于说明这一点：这里有一张 &lt;code&gt;mav&lt;/code&gt; 表，预填充两条记录（&lt;code&gt;id=0,1&lt;/code&gt;），&lt;code&gt;value&lt;/code&gt; 字段初始值都是 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;noop&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;noop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;noop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;负载是读写混合事务：有写入事务会在同一个事务里去同时自增这两条记录的 &lt;code&gt;value&lt;/code&gt; 字段；根据事务的原子性，其他事务在观察这两行记录时，&lt;code&gt;value&lt;/code&gt; 的值应当是保持同步锁定增长的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;START&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;--&amp;gt; 0 读取到了0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;noop&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;--&amp;gt; “邀请”新的快照进来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;--&amp;gt; 1 读取到了新值1，那么另一行的值应该也是1才对
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mav&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;--&amp;gt; 0 结果读取到了旧值0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;COMMIT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而在上面这个读取事务看来，它观察到了“中间状态”。读取事务首先读0号记录的 &lt;code&gt;value&lt;/code&gt;，然后将 1 号记录的 &lt;code&gt;noop&lt;/code&gt; 设置为一个随机值（根据上面一个案例，就能看见其他事务的变更了），接着再依次读取 0/1 号记录的 &lt;code&gt;value&lt;/code&gt; 值。结果出现这种情况：读取0号记录拿到了新值，读取1号记录时获取到了旧值，这意味着&lt;strong&gt;单调性&lt;/strong&gt;和&lt;strong&gt;原子性&lt;/strong&gt;都出现了严重缺陷。&lt;/p&gt;
&lt;p&gt;MySQL 的&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html&#34;&gt;一致性读取文档&lt;/a&gt;广泛讨论了快照，但这种行为看起来&lt;strong&gt;根本不像快照&lt;/strong&gt;。快照系统通常提供数据库状态的一致的、时间点的视图。它们通常是原子性的：要么包含事务的所有结果，要么全都不包含。即使 MySQL 以某种方式从写入事务的&lt;strong&gt;中间状态&lt;/strong&gt;拿到了&lt;strong&gt;非原子性快照&lt;/strong&gt;，它也必须得在获取行1新值前看到行0的新值。然而情况并非如此：此读取事务观察到行1的变化，但却没有看到行0的变化结果，&lt;strong&gt;这算哪门子快照&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;因此，MySQL 的可重复读/RR 隔离等级既不原子，也不单调。在这一点上它甚至比不上绝大多数数据库的 &lt;strong&gt;读已提交/RC&lt;/strong&gt;，起码它们实质上还是原子且单调的 &lt;strong&gt;单调原子视图/MAV&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外一个值得一提的问题是：MySQL 默认配置下的事务会出现违背&lt;strong&gt;原子性&lt;/strong&gt;的现象。我已经在&lt;a href=&#34;https://mp.weixin.qq.com/s/KBypNeeM4puvzGiKFJ1FmQ&#34;&gt;两年前的文章&lt;/a&gt;中抛出该问题供业界讨论，MySQL 社区的观点认为这是一个可以通过 &lt;code&gt;sql_mode&lt;/code&gt; 进行配置的特性而非缺陷。&lt;/p&gt;
&lt;p&gt;但这种说法无法改变这一事实：MySQL确实违反了最小意外原则，在默认配置下允许用户做出这种违背原子性的蠢事来。与之类似的还有 &lt;code&gt;replica_preserve_commit_order&lt;/code&gt; 参数。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-atom.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-atom.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;串行化问题鸡肋且糟糕&#34;&gt;串行化问题：鸡肋且糟糕&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可串行化/SR&lt;/strong&gt; 可以阻止上面的并发异常出现吗？理论上可以，可串行化就是为这个目的而设计的。但令人深感不安的是，JEPSEN 在 AWS RDS 集群中观察到，MySQL 在 &lt;strong&gt;可串行化/SR&lt;/strong&gt; 隔离等级下也出现了 “Fractured Read-Like” 异常，这是G2异常的一个例子。这种异常是被 &lt;strong&gt;RR&lt;/strong&gt; 所禁止的，应该只会在 &lt;strong&gt;RC&lt;/strong&gt; 或更低级别出现。&lt;/p&gt;
&lt;p&gt;深入研究发现这一现象与 MySQL 的 &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_preserve_commit_order&#34;&gt;&lt;code&gt;replica_preserve_commit_order&lt;/code&gt;&lt;/a&gt; 参数有关：禁用此参数允许 MySQL 以正确性作为代价，在重放日志时提供更高的并行性。当此选项被禁用时，JEPSEN在本地集群的 SR 隔离级别中也观察到了类似的 G-Single 和 G2-Item 异常。&lt;/p&gt;
&lt;p&gt;可串行化系统应该保证事务（看起来是）全序执行，不能在副本上保留这个顺序是一件非常糟糕的事情。因此这个参数过去（8.0.26及以下）默认是禁用的，而在 MySQL 8.0.27 （2021-10-19）中被修改为默认启用。但是 AWS RDS 集群的参数组仍然使用“OFF”的旧默认值，并且缺少相关的文档说明，所以才会出现这样的现象。&lt;/p&gt;
&lt;p&gt;尽管这一异常行为可以通过启用该参数进行规避，但使用 Serializable 本身也并非 MySQL 官方/社区鼓励的行为。MySQL 社区中普遍的观点是：除非绝对必要，否则应避免使用 &lt;strong&gt;可串行化/SR&lt;/strong&gt; 隔离等级；MySQL 文档声称：&lt;em&gt;“&lt;code&gt;SERIALIZABLE&lt;/code&gt; 执行比 &lt;code&gt;REPEATABLE READ&lt;/code&gt; 更严格的规则，主要用于&lt;strong&gt;特殊情况&lt;/strong&gt;，例如 XA 事务以及解决并发和死锁问题。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，专门研究数据库一致性的李海翔教授（前鹅厂T14）在其《第三代分布式数据库》系列文章中，也对包括 MySQL （InnoDB/8.0.20）在内的多种数据库的实际隔离等级进行了测评，并从另一个视角给出了下面这幅更为细化的 “《&lt;a href=&#34;https://mp.weixin.qq.com/s/_BhAjcMkmthTf8Zw3RWKDw&#34;&gt;一致性八仙图&lt;/a&gt;》”。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-baxiantu.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-baxiantu.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在图中蓝/绿色代表正确用规则/回滚避免异常；&lt;strong&gt;黄色的A代表出现异常，黄色“A”越多，正确性问题就越多&lt;/strong&gt;；红色的“D”指使用了影响性能的死锁检测来处理异常，&lt;strong&gt;红色D越多，性能问题就越严重&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;不难看出，正确性最好的是 PostgreSQL SR 与基于其构建的 CockroachDB SR，其次是 Oracle SR；都主要是通过机制与规则避免并发异常；而 MySQL 的正确性水平令人不忍直视。&lt;/p&gt;
&lt;p&gt;李海翔教授在专文《&lt;a href=&#34;https://mp.weixin.qq.com/s/__mnrLBN88RPgpET0kq3vg&#34;&gt;一无是处的MySQL&lt;/a&gt;》对此有过详细分析：尽管MySQL的 &lt;strong&gt;可串行化/SR&lt;/strong&gt; 可以通过大面积使用死锁检测算法保证正确性，但这样处理并发异常，会严重影响数据库的&lt;strong&gt;性能与实用价值&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正确性与性能的利弊权衡&#34;&gt;正确性与性能的利弊权衡&lt;/h2&gt;
&lt;p&gt;李海翔教授在《&lt;a href=&#34;https://mp.weixin.qq.com/s/zz_184uqiSXQ1nSYENGuxg&#34;&gt;第三代分布式数据库：踢球时代&lt;/a&gt;》中抛出了一个问题：&lt;strong&gt;如何对系统的正确性与性能进行利弊权衡？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库圈有一些“习惯成自然”的怪圈，例如很多数据库的默认隔离等级都是 &lt;strong&gt;读已提交/RC&lt;/strong&gt;，有很多人会说“数据库的隔离级别设置为 &lt;strong&gt;RC&lt;/strong&gt; 足够了”！可是为什么？为什么要设置为 RC ？因为他们觉得 RC 级别数据库性能好。&lt;/p&gt;
&lt;p&gt;可如下图所示，这里存在一个死循环：用户希望数据库性能更好，于是开发者把应用的隔离级别设置为RC。然而用户，特别是金融保险证券电信等行业的用户，又期望保证数据的正确性，于是开发者不得不在 SQL 语句中加入 &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt; 加锁以确保数据的正确性。而此举又会导致数据库系统性能下降严重。在TPC-C和YCSB场景下测试结果表明，用户主动加锁的方式会导致数据库系统性能下降严重，反而是强隔离级别下的性能损耗并没有那么严重。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;circle.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-circle.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用弱隔离等级其实严重背离了“事务”这个抽象的初衷 —— &lt;strong&gt;在较低隔离级别的重要数据库中编写可靠事务极其复杂&lt;/strong&gt;，而与弱隔离等级相关的错误的数量和影响被广泛低估[13]。使用弱隔离级别本质上是把本应由数据库来保证的正确性 &amp;amp; 性能责任&lt;strong&gt;踢&lt;/strong&gt;给了应用开发者。&lt;/p&gt;
&lt;p&gt;惯于使用弱隔离等级这个问题的根，可能出在 Oracle 和 MySQL 上。例如，Oracle 从来没有提供真正的可串行化隔离等级（SR 实际上是 &lt;strong&gt;快照隔离/SI&lt;/strong&gt;），直到今天亦然。因此他们必须将*“&lt;strong&gt;使用 RC 隔离等级&lt;/strong&gt;”* 宣传为一件好事。Oracle 是过去最流行的数据之一，所以后来者也纷纷效仿。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;consistency.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-consistency.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而使用弱隔离等级性能更好的刻板印象可能源于 MySQL —— 大面积使用&lt;strong&gt;死锁检测&lt;/strong&gt;（标红）实现的 SR 性能确实糟糕。&lt;strong&gt;但对于其他 DBMS 来说并非必然如此&lt;/strong&gt;。例如，PostgreSQL 在 9.1 引入的 &lt;strong&gt;可串行化快照隔离（SSI）&lt;/strong&gt; 算法可以在提供完整可串行化前提下，相比&lt;strong&gt;快照隔离/SI&lt;/strong&gt; &lt;a href=&#34;https://lchsk.com/benchmarking-concurrent-operations-in-postgresql&#34;&gt;并没有多少性能损失&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pgbench.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-pgbench.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;更进一步讲，&lt;a href=&#34;https://mp.weixin.qq.com/s/1OSRcBfd58s0tgZTUZHB9g&#34;&gt;摩尔定律加持下的硬件的性能进步与价格坍缩&lt;/a&gt;，让OLTP性能不再成为稀缺品 —— 在&lt;a href=&#34;https://thume.ca/2023/01/02/one-machine-twitter/&#34;&gt;单台服务器就能跑起推特&lt;/a&gt;的当下，超配充裕的硬件性能实在用不了几个钱。而比起数据错漏造成的潜在损失与心智负担，担心可串行化隔离等级带来的性能损失确实是杞人忧天了。&lt;/p&gt;
&lt;p&gt;时过境迁，软硬件的进步让 “&lt;strong&gt;默认可串行化隔离，优先确保100%正确性&lt;/strong&gt;” 这件事切实可行起来。为些许性能而牺牲正确性这样的利弊权衡，即使对糙猛快的互联网场景也开始显得不合时宜了。新一代的分布式数据库诸如 CockroachDB 与 FoundationDB 都选择了默认使用 &lt;strong&gt;可串行化&lt;/strong&gt; 隔离等级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做正确的事很重要，而正确性是不应该拿来做利弊权衡的&lt;/strong&gt;。在这一点上，开源关系型数据库两巨头 MySQL 和 PostgreSQL 在早期实现上就选择了两条截然相反的道路：MySQL 追求性能而牺牲正确性；而学院派的 PostgreSQL 追求正确性而牺牲了性能。在互联网风口上半场中，MySQL 因为性能优势占据先机乘风而起。但当性能不再是核心考量时，正确性就成为了 MySQL 的&lt;strong&gt;致命出血点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;解决性能问题有许多种办法，甚至坐等硬件性能指数增长也是一种切实可行的办法（如 Paypal）；而正确性问题往往涉及到全局性的架构重构，解决起来绝非一夕之功。过去十年间，PostgreSQL守正出奇，在确保最佳正确性的前提下大步前进，&lt;a href=&#34;https://mp.weixin.qq.com/s/651zXDKGwFy8i0Owrmm-Xg&#34;&gt;很多场景的性能都反超了 MySQL&lt;/a&gt;；而在功能上更是籍由其扩展生态引入的向量、JSON，GIS，时序，全文检索等扩展特性&lt;a href=&#34;https://mp.weixin.qq.com/s/y3qY9eBfOic6tQYOiErIHg&#34;&gt;全方位碾压 MySQL&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;sf2023.png&#34; src=&#34;/zh/blog/db/bad-mysql/mysql-sf2023.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 在 2023 年 StackOverflow 的全球开发者用户调研中，开发者使用率正式超过了 MySQL ，成为&lt;a href=&#34;https://mp.weixin.qq.com/s/xewE87WEaZHp-K5hjuk65A&#34;&gt;世界上最流行的数据库&lt;/a&gt;。而在正确性上一塌糊涂，且与高性能难以得兼的 MySQL ，确实应该好好思考一下自己的破局之路了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; JEPSEN: &lt;em&gt;&lt;a href=&#34;https://jepsen.io/analyses/mysql-8.0.34&#34;&gt;https://jepsen.io/analyses/mysql-8.0.34&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; Hermitage: &lt;em&gt;&lt;a href=&#34;https://github.com/ept/hermitage&#34;&gt;https://github.com/ept/hermitage&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[4]&lt;/code&gt; Jepsen研究伦理: &lt;em&gt;&lt;a href=&#34;https://jepsen.io/ethics&#34;&gt;https://jepsen.io/ethics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[5]&lt;/code&gt; &lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt;: &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[6]&lt;/code&gt; 隔离级别文档: &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[7]&lt;/code&gt; 一致性读文档: &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[9]&lt;/code&gt; 单调原子视图/MAV: &lt;em&gt;&lt;a href=&#34;https://jepsen.io/consistency/models/monotonic-atomic-view&#34;&gt;https://jepsen.io/consistency/models/monotonic-atomic-view&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[10]&lt;/code&gt; Highly Available Transactions: Virtues and Limitations，Bailis 等: &lt;em&gt;&lt;a href=&#34;https://amplab.cs.berkeley.edu/wp-content/uploads/2013/10/hat-vldb2014.pdf&#34;&gt;https://amplab.cs.berkeley.edu/wp-content/uploads/2013/10/hat-vldb2014.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[12]&lt;/code&gt; &lt;code&gt;replica_preserve_commit_order&lt;/code&gt;: &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_preserve_commit_order&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_preserve_commit_order&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[13]&lt;/code&gt; 与弱隔离等级相关的错误的数量和影响被广泛低估: &lt;em&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3035918.3064037&#34;&gt;https://dl.acm.org/doi/10.1145/3035918.3064037&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[14]&lt;/code&gt; 测试PostgreSQL的并行性能: &lt;em&gt;&lt;a href=&#34;https://lchsk.com/benchmarking-concurrent-operations-in-postgresql&#34;&gt;https://lchsk.com/benchmarking-concurrent-operations-in-postgresql&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[15]&lt;/code&gt; 在单台服务器上跑起推特: &lt;em&gt;&lt;a href=&#34;https://thume.ca/2023/01/02/one-machine-twitter/&#34;&gt;https://thume.ca/2023/01/02/one-machine-twitter/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
