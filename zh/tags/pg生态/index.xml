<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – PG生态</title>
    <link>/zh/tags/pg%E7%94%9F%E6%80%81/</link>
    <description>Recent content in PG生态 on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 02 Nov 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/pg%E7%94%9F%E6%80%81/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: PostgreSQL神功大成！最全扩展仓库来了！</title>
      <link>/zh/blog/pg/pg-ext-repo/</link>
      <pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-ext-repo/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-ext-repo/featured_hua49e85834b344fe1b85a922a5102032f_362146_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="366"/>]]>
        
        &lt;p&gt;最近没怎么更新，因为在憋大招。最近功成出关，遂发此文为贺 —— 我做了一个收录PG生态所有能打的340个扩展的&lt;a href=&#34;https://ext.pigsty.io&#34;&gt;仓库&lt;/a&gt;，让 PostgreSQL 在成为数据库全能王的道路上又往前迈出了坚实的一步！&lt;/p&gt;
&lt;p&gt;自从我在 《&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;&lt;strong&gt;PostgreSQL正在吞噬数据库世界&lt;/strong&gt;&lt;/a&gt;》 一文中指出 &lt;strong&gt;可扩展性&lt;/strong&gt; 对于 PostgreSQL 的重要性以来，PG 社区对此进行了&lt;a href=&#34;/zh/blog/pg/pgcondev-2024&#34;&gt;&lt;strong&gt;热烈的讨论&lt;/strong&gt;&lt;/a&gt;，并且达成了共识。
最终体现在《&lt;a href=&#34;/zh/blog/pg/pg-17&#34;&gt;&lt;strong&gt;PostgreSQL 17 发布注记！&lt;/strong&gt;&lt;/a&gt;》中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/pg/pg-eat-deb-world&#34;&gt;&lt;img src=&#34;/img/pigsty/ecosystem.jpg&#34; style=&#34;max-width: 1000px; max-height: 1000px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但真正重要的事情不是认识世界，而是改变世界。既然大家都已经认清了扩展很重要，&lt;strong&gt;那么我们应该做什么，怎么做&lt;/strong&gt;，就成了真正关键的问题。&lt;/p&gt;
&lt;p&gt;那么什么是 PostgreSQL 扩展最关键的问题？在我看来，扩展用得上用不上，是 PG 扩展生态的首要问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pg-扩展分发现状&#34;&gt;PG 扩展分发现状&lt;/h2&gt;
&lt;p&gt;大家知道 PG 生态有很多扩展插件，但这些扩展插件如何安装使用？这第一道门槛就成了许多用户的拦路虎。怎么解决这个问题？
PGXN 说，用我的办法，我可以现场下载编译扩展；
Tembo 说，我提前帮你打好 docker 镜像；
StackGres 和 Omnigres 说，我们可以在线下载编译好的 So 文件；
八仙过海，各显神通。&lt;/p&gt;
&lt;p&gt;大家都有很多好想法，唯独没仔细考虑绝大多数用户到底是如何安装扩展的。
作为前 DBA，我只能说什么现场编译，OCI镜像，下载so文件，在实战中都有些离谱了 —— &lt;strong&gt;使用最广泛且最可靠的扩展安装方式，依然是用操作系统的包管理器安装签名二进制包&lt;/strong&gt;。
而 yum / dnf / apt 在解决这个问题上已经做的足够好了！所以真的问题其实是，谁来把这几百个扩展插件打成开箱即用的软件包？&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ext.pigsty.io/#/time&#34;&gt;&lt;strong&gt;TIME&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/timescaledb&#34;&gt;&lt;code&gt;timescaledb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/timescaledb_toolkit&#34;&gt;&lt;code&gt;timescaledb_toolkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/timeseries&#34;&gt;&lt;code&gt;timeseries&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/periods&#34;&gt;&lt;code&gt;periods&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/temporal_tables&#34;&gt;&lt;code&gt;temporal_tables&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/emaj&#34;&gt;&lt;code&gt;emaj&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/table_version&#34;&gt;&lt;code&gt;table_version&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_cron&#34;&gt;&lt;code&gt;pg_cron&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_later&#34;&gt;&lt;code&gt;pg_later&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_background&#34;&gt;&lt;code&gt;pg_background&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/gis&#34;&gt;&lt;strong&gt;GIS&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/postgis&#34;&gt;&lt;code&gt;postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/postgis_topology&#34;&gt;&lt;code&gt;postgis_topology&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/postgis_raster&#34;&gt;&lt;code&gt;postgis_raster&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/postgis_sfcgal&#34;&gt;&lt;code&gt;postgis_sfcgal&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/postgis_tiger_geocoder&#34;&gt;&lt;code&gt;postgis_tiger_geocoder&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/address_standardizer&#34;&gt;&lt;code&gt;address_standardizer&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/address_standardizer_data_us&#34;&gt;&lt;code&gt;address_standardizer_data_us&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgrouting&#34;&gt;&lt;code&gt;pgrouting&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pointcloud&#34;&gt;&lt;code&gt;pointcloud&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pointcloud_postgis&#34;&gt;&lt;code&gt;pointcloud_postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/h3&#34;&gt;&lt;code&gt;h3&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/h3_postgis&#34;&gt;&lt;code&gt;h3_postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/q3c&#34;&gt;&lt;code&gt;q3c&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/ogr_fdw&#34;&gt;&lt;code&gt;ogr_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/geoip&#34;&gt;&lt;code&gt;geoip&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_polyline&#34;&gt;&lt;code&gt;pg_polyline&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_geohash&#34;&gt;&lt;code&gt;pg_geohash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/mobilitydb&#34;&gt;&lt;code&gt;mobilitydb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/earthdistance&#34;&gt;&lt;code&gt;earthdistance&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/rag&#34;&gt;&lt;strong&gt;RAG&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/vector&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/vectorscale&#34;&gt;&lt;code&gt;vectorscale&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/vectorize&#34;&gt;&lt;code&gt;vectorize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_similarity&#34;&gt;&lt;code&gt;pg_similarity&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/smlar&#34;&gt;&lt;code&gt;smlar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_summarize&#34;&gt;&lt;code&gt;pg_summarize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_tiktoken&#34;&gt;&lt;code&gt;pg_tiktoken&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgml&#34;&gt;&lt;code&gt;pgml&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg4ml&#34;&gt;&lt;code&gt;pg4ml&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/fts&#34;&gt;&lt;strong&gt;FTS&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/pg_search&#34;&gt;&lt;code&gt;pg_search&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_bigm&#34;&gt;&lt;code&gt;pg_bigm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/zhparser&#34;&gt;&lt;code&gt;zhparser&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_cs_cz&#34;&gt;&lt;code&gt;hunspell_cs_cz&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_de_de&#34;&gt;&lt;code&gt;hunspell_de_de&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_en_us&#34;&gt;&lt;code&gt;hunspell_en_us&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_fr&#34;&gt;&lt;code&gt;hunspell_fr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_ne_np&#34;&gt;&lt;code&gt;hunspell_ne_np&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_nl_nl&#34;&gt;&lt;code&gt;hunspell_nl_nl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_nn_no&#34;&gt;&lt;code&gt;hunspell_nn_no&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_pt_pt&#34;&gt;&lt;code&gt;hunspell_pt_pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_ru_ru&#34;&gt;&lt;code&gt;hunspell_ru_ru&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hunspell_ru_ru_aot&#34;&gt;&lt;code&gt;hunspell_ru_ru_aot&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/fuzzystrmatch&#34;&gt;&lt;code&gt;fuzzystrmatch&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_trgm&#34;&gt;&lt;code&gt;pg_trgm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/olap&#34;&gt;&lt;strong&gt;OLAP&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/citus&#34;&gt;&lt;code&gt;citus&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/citus_columnar&#34;&gt;&lt;code&gt;citus_columnar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/columnar&#34;&gt;&lt;code&gt;columnar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_analytics&#34;&gt;&lt;code&gt;pg_analytics&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_duckdb&#34;&gt;&lt;code&gt;pg_duckdb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_mooncake&#34;&gt;&lt;code&gt;pg_mooncake&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/duckdb_fdw&#34;&gt;&lt;code&gt;duckdb_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_parquet&#34;&gt;&lt;code&gt;pg_parquet&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_fkpart&#34;&gt;&lt;code&gt;pg_fkpart&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_partman&#34;&gt;&lt;code&gt;pg_partman&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plproxy&#34;&gt;&lt;code&gt;plproxy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_strom&#34;&gt;&lt;code&gt;pg_strom&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tablefunc&#34;&gt;&lt;code&gt;tablefunc&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/feat&#34;&gt;&lt;strong&gt;FEAT&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/age&#34;&gt;&lt;code&gt;age&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hll&#34;&gt;&lt;code&gt;hll&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/rum&#34;&gt;&lt;code&gt;rum&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_graphql&#34;&gt;&lt;code&gt;pg_graphql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_jsonschema&#34;&gt;&lt;code&gt;pg_jsonschema&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/jsquery&#34;&gt;&lt;code&gt;jsquery&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_hint_plan&#34;&gt;&lt;code&gt;pg_hint_plan&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hypopg&#34;&gt;&lt;code&gt;hypopg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/index_advisor&#34;&gt;&lt;code&gt;index_advisor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plan_filter&#34;&gt;&lt;code&gt;plan_filter&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/imgsmlr&#34;&gt;&lt;code&gt;imgsmlr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_ivm&#34;&gt;&lt;code&gt;pg_ivm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgmq&#34;&gt;&lt;code&gt;pgmq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgq&#34;&gt;&lt;code&gt;pgq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_cardano&#34;&gt;&lt;code&gt;pg_cardano&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/rdkit&#34;&gt;&lt;code&gt;rdkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/bloom&#34;&gt;&lt;code&gt;bloom&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/lang&#34;&gt;&lt;strong&gt;LANG&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/pg_tle&#34;&gt;&lt;code&gt;pg_tle&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plv8&#34;&gt;&lt;code&gt;plv8&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pllua&#34;&gt;&lt;code&gt;pllua&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore_pllua&#34;&gt;&lt;code&gt;hstore_pllua&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plluau&#34;&gt;&lt;code&gt;plluau&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore_plluau&#34;&gt;&lt;code&gt;hstore_plluau&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plprql&#34;&gt;&lt;code&gt;plprql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pldbgapi&#34;&gt;&lt;code&gt;pldbgapi&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plpgsql_check&#34;&gt;&lt;code&gt;plpgsql_check&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plprofiler&#34;&gt;&lt;code&gt;plprofiler&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plsh&#34;&gt;&lt;code&gt;plsh&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pljava&#34;&gt;&lt;code&gt;pljava&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plr&#34;&gt;&lt;code&gt;plr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgtap&#34;&gt;&lt;code&gt;pgtap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/faker&#34;&gt;&lt;code&gt;faker&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/dbt2&#34;&gt;&lt;code&gt;dbt2&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pltcl&#34;&gt;&lt;code&gt;pltcl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pltclu&#34;&gt;&lt;code&gt;pltclu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plperl&#34;&gt;&lt;code&gt;plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/bool_plperl&#34;&gt;&lt;code&gt;bool_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore_plperl&#34;&gt;&lt;code&gt;hstore_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/jsonb_plperl&#34;&gt;&lt;code&gt;jsonb_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plperlu&#34;&gt;&lt;code&gt;plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/bool_plperlu&#34;&gt;&lt;code&gt;bool_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/jsonb_plperlu&#34;&gt;&lt;code&gt;jsonb_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore_plperlu&#34;&gt;&lt;code&gt;hstore_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plpgsql&#34;&gt;&lt;code&gt;plpgsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/plpython3u&#34;&gt;&lt;code&gt;plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/jsonb_plpython3u&#34;&gt;&lt;code&gt;jsonb_plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/ltree_plpython3u&#34;&gt;&lt;code&gt;ltree_plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore_plpython3u&#34;&gt;&lt;code&gt;hstore_plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/type&#34;&gt;&lt;strong&gt;TYPE&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/prefix&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/semver&#34;&gt;&lt;code&gt;semver&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/unit&#34;&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/md5hash&#34;&gt;&lt;code&gt;md5hash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/asn1oid&#34;&gt;&lt;code&gt;asn1oid&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/roaringbitmap&#34;&gt;&lt;code&gt;roaringbitmap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgfaceting&#34;&gt;&lt;code&gt;pgfaceting&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_sphere&#34;&gt;&lt;code&gt;pg_sphere&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/country&#34;&gt;&lt;code&gt;country&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/currency&#34;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgmp&#34;&gt;&lt;code&gt;pgmp&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/numeral&#34;&gt;&lt;code&gt;numeral&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_rational&#34;&gt;&lt;code&gt;pg_rational&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/uint&#34;&gt;&lt;code&gt;uint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/uint128&#34;&gt;&lt;code&gt;uint128&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/ip4r&#34;&gt;&lt;code&gt;ip4r&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/uri&#34;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgemailaddr&#34;&gt;&lt;code&gt;pgemailaddr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/acl&#34;&gt;&lt;code&gt;acl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/debversion&#34;&gt;&lt;code&gt;debversion&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_rrule&#34;&gt;&lt;code&gt;pg_rrule&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/timestamp9&#34;&gt;&lt;code&gt;timestamp9&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/chkpass&#34;&gt;&lt;code&gt;chkpass&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/isn&#34;&gt;&lt;code&gt;isn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/seg&#34;&gt;&lt;code&gt;seg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/cube&#34;&gt;&lt;code&gt;cube&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/ltree&#34;&gt;&lt;code&gt;ltree&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hstore&#34;&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/citext&#34;&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/xml2&#34;&gt;&lt;code&gt;xml2&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/func&#34;&gt;&lt;strong&gt;FUNC&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/topn&#34;&gt;&lt;code&gt;topn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/gzip&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/zstd&#34;&gt;&lt;code&gt;zstd&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/http&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_net&#34;&gt;&lt;code&gt;pg_net&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_smtp_client&#34;&gt;&lt;code&gt;pg_smtp_client&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_html5_email_address&#34;&gt;&lt;code&gt;pg_html5_email_address&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgsql_tweaks&#34;&gt;&lt;code&gt;pgsql_tweaks&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_extra_time&#34;&gt;&lt;code&gt;pg_extra_time&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/timeit&#34;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/count_distinct&#34;&gt;&lt;code&gt;count_distinct&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/extra_window_functions&#34;&gt;&lt;code&gt;extra_window_functions&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/first_last_agg&#34;&gt;&lt;code&gt;first_last_agg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tdigest&#34;&gt;&lt;code&gt;tdigest&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/aggs_for_vecs&#34;&gt;&lt;code&gt;aggs_for_vecs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/aggs_for_arrays&#34;&gt;&lt;code&gt;aggs_for_arrays&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/arraymath&#34;&gt;&lt;code&gt;arraymath&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/quantile&#34;&gt;&lt;code&gt;quantile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/lower_quantile&#34;&gt;&lt;code&gt;lower_quantile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_idkit&#34;&gt;&lt;code&gt;pg_idkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_uuidv7&#34;&gt;&lt;code&gt;pg_uuidv7&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/permuteseq&#34;&gt;&lt;code&gt;permuteseq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_hashids&#34;&gt;&lt;code&gt;pg_hashids&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sequential_uuids&#34;&gt;&lt;code&gt;sequential_uuids&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_math&#34;&gt;&lt;code&gt;pg_math&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/random&#34;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/base36&#34;&gt;&lt;code&gt;base36&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/base62&#34;&gt;&lt;code&gt;base62&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_base58&#34;&gt;&lt;code&gt;pg_base58&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/floatvec&#34;&gt;&lt;code&gt;floatvec&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/financial&#34;&gt;&lt;code&gt;financial&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgjwt&#34;&gt;&lt;code&gt;pgjwt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_hashlib&#34;&gt;&lt;code&gt;pg_hashlib&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/shacrypt&#34;&gt;&lt;code&gt;shacrypt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/cryptint&#34;&gt;&lt;code&gt;cryptint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pguecc&#34;&gt;&lt;code&gt;pguecc&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgpcre&#34;&gt;&lt;code&gt;pgpcre&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/icu_ext&#34;&gt;&lt;code&gt;icu_ext&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgqr&#34;&gt;&lt;code&gt;pgqr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/envvar&#34;&gt;&lt;code&gt;envvar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_protobuf&#34;&gt;&lt;code&gt;pg_protobuf&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/url_encode&#34;&gt;&lt;code&gt;url_encode&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/refint&#34;&gt;&lt;code&gt;refint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/autoinc&#34;&gt;&lt;code&gt;autoinc&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/insert_username&#34;&gt;&lt;code&gt;insert_username&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/moddatetime&#34;&gt;&lt;code&gt;moddatetime&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tsm_system_time&#34;&gt;&lt;code&gt;tsm_system_time&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/dict_xsyn&#34;&gt;&lt;code&gt;dict_xsyn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tsm_system_rows&#34;&gt;&lt;code&gt;tsm_system_rows&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tcn&#34;&gt;&lt;code&gt;tcn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/uuid-ossp&#34;&gt;&lt;code&gt;uuid-ossp&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/btree_gist&#34;&gt;&lt;code&gt;btree_gist&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/btree_gin&#34;&gt;&lt;code&gt;btree_gin&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/intarray&#34;&gt;&lt;code&gt;intarray&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/intagg&#34;&gt;&lt;code&gt;intagg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/dict_int&#34;&gt;&lt;code&gt;dict_int&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/unaccent&#34;&gt;&lt;code&gt;unaccent&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/admin&#34;&gt;&lt;strong&gt;ADMIN&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/pg_repack&#34;&gt;&lt;code&gt;pg_repack&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_squeeze&#34;&gt;&lt;code&gt;pg_squeeze&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_dirtyread&#34;&gt;&lt;code&gt;pg_dirtyread&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgfincore&#34;&gt;&lt;code&gt;pgfincore&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgdd&#34;&gt;&lt;code&gt;pgdd&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/ddlx&#34;&gt;&lt;code&gt;ddlx&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/prioritize&#34;&gt;&lt;code&gt;prioritize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_checksums&#34;&gt;&lt;code&gt;pg_checksums&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_readonly&#34;&gt;&lt;code&gt;pg_readonly&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/safeupdate&#34;&gt;&lt;code&gt;safeupdate&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_permissions&#34;&gt;&lt;code&gt;pg_permissions&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgautofailover&#34;&gt;&lt;code&gt;pgautofailover&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_catcheck&#34;&gt;&lt;code&gt;pg_catcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pre_prepare&#34;&gt;&lt;code&gt;pre_prepare&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgcozy&#34;&gt;&lt;code&gt;pgcozy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_orphaned&#34;&gt;&lt;code&gt;pg_orphaned&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_crash&#34;&gt;&lt;code&gt;pg_crash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_cheat_funcs&#34;&gt;&lt;code&gt;pg_cheat_funcs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_savior&#34;&gt;&lt;code&gt;pg_savior&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/table_log&#34;&gt;&lt;code&gt;table_log&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_fio&#34;&gt;&lt;code&gt;pg_fio&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgpool_adm&#34;&gt;&lt;code&gt;pgpool_adm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgpool_recovery&#34;&gt;&lt;code&gt;pgpool_recovery&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgpool_regclass&#34;&gt;&lt;code&gt;pgpool_regclass&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgagent&#34;&gt;&lt;code&gt;pgagent&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/vacuumlo&#34;&gt;&lt;code&gt;vacuumlo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_prewarm&#34;&gt;&lt;code&gt;pg_prewarm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/oid2name&#34;&gt;&lt;code&gt;oid2name&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/lo&#34;&gt;&lt;code&gt;lo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/basic_archive&#34;&gt;&lt;code&gt;basic_archive&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/basebackup_to_shell&#34;&gt;&lt;code&gt;basebackup_to_shell&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/old_snapshot&#34;&gt;&lt;code&gt;old_snapshot&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/adminpack&#34;&gt;&lt;code&gt;adminpack&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/amcheck&#34;&gt;&lt;code&gt;amcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_surgery&#34;&gt;&lt;code&gt;pg_surgery&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/stat&#34;&gt;&lt;strong&gt;STAT&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/pg_profile&#34;&gt;&lt;code&gt;pg_profile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_show_plans&#34;&gt;&lt;code&gt;pg_show_plans&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_stat_kcache&#34;&gt;&lt;code&gt;pg_stat_kcache&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_stat_monitor&#34;&gt;&lt;code&gt;pg_stat_monitor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_qualstats&#34;&gt;&lt;code&gt;pg_qualstats&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_store_plans&#34;&gt;&lt;code&gt;pg_store_plans&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_track_settings&#34;&gt;&lt;code&gt;pg_track_settings&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_wait_sampling&#34;&gt;&lt;code&gt;pg_wait_sampling&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/system_stats&#34;&gt;&lt;code&gt;system_stats&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/meta&#34;&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgnodemx&#34;&gt;&lt;code&gt;pgnodemx&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_proctab&#34;&gt;&lt;code&gt;pg_proctab&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_sqlog&#34;&gt;&lt;code&gt;pg_sqlog&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/bgw_replstatus&#34;&gt;&lt;code&gt;bgw_replstatus&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgmeminfo&#34;&gt;&lt;code&gt;pgmeminfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/toastinfo&#34;&gt;&lt;code&gt;toastinfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/explain_ui&#34;&gt;&lt;code&gt;explain_ui&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_relusage&#34;&gt;&lt;code&gt;pg_relusage&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_top&#34;&gt;&lt;code&gt;pg_top&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pagevis&#34;&gt;&lt;code&gt;pagevis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/powa&#34;&gt;&lt;code&gt;powa&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pageinspect&#34;&gt;&lt;code&gt;pageinspect&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgrowlocks&#34;&gt;&lt;code&gt;pgrowlocks&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sslinfo&#34;&gt;&lt;code&gt;sslinfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_buffercache&#34;&gt;&lt;code&gt;pg_buffercache&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_walinspect&#34;&gt;&lt;code&gt;pg_walinspect&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_freespacemap&#34;&gt;&lt;code&gt;pg_freespacemap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_visibility&#34;&gt;&lt;code&gt;pg_visibility&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgstattuple&#34;&gt;&lt;code&gt;pgstattuple&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/auto_explain&#34;&gt;&lt;code&gt;auto_explain&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_stat_statements&#34;&gt;&lt;code&gt;pg_stat_statements&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sec&#34;&gt;&lt;strong&gt;SEC&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/passwordcheck_cracklib&#34;&gt;&lt;code&gt;passwordcheck_cracklib&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/supautils&#34;&gt;&lt;code&gt;supautils&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgsodium&#34;&gt;&lt;code&gt;pgsodium&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/supabase_vault&#34;&gt;&lt;code&gt;supabase_vault&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_session_jwt&#34;&gt;&lt;code&gt;pg_session_jwt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/anon&#34;&gt;&lt;code&gt;anon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_tde&#34;&gt;&lt;code&gt;pg_tde&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgsmcrypto&#34;&gt;&lt;code&gt;pgsmcrypto&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgaudit&#34;&gt;&lt;code&gt;pgaudit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgauditlogtofile&#34;&gt;&lt;code&gt;pgauditlogtofile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_auth_mon&#34;&gt;&lt;code&gt;pg_auth_mon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/credcheck&#34;&gt;&lt;code&gt;credcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgcryptokey&#34;&gt;&lt;code&gt;pgcryptokey&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_jobmon&#34;&gt;&lt;code&gt;pg_jobmon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/logerrors&#34;&gt;&lt;code&gt;logerrors&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/login_hook&#34;&gt;&lt;code&gt;login_hook&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/set_user&#34;&gt;&lt;code&gt;set_user&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_snakeoil&#34;&gt;&lt;code&gt;pg_snakeoil&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgextwlist&#34;&gt;&lt;code&gt;pgextwlist&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_auditor&#34;&gt;&lt;code&gt;pg_auditor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sslutils&#34;&gt;&lt;code&gt;sslutils&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/noset&#34;&gt;&lt;code&gt;noset&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sepgsql&#34;&gt;&lt;code&gt;sepgsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/auth_delay&#34;&gt;&lt;code&gt;auth_delay&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgcrypto&#34;&gt;&lt;code&gt;pgcrypto&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/passwordcheck&#34;&gt;&lt;code&gt;passwordcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/fdw&#34;&gt;&lt;strong&gt;FDW&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/wrappers&#34;&gt;&lt;code&gt;wrappers&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/multicorn&#34;&gt;&lt;code&gt;multicorn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/odbc_fdw&#34;&gt;&lt;code&gt;odbc_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/jdbc_fdw&#34;&gt;&lt;code&gt;jdbc_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/mysql_fdw&#34;&gt;&lt;code&gt;mysql_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/oracle_fdw&#34;&gt;&lt;code&gt;oracle_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/tds_fdw&#34;&gt;&lt;code&gt;tds_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/db2_fdw&#34;&gt;&lt;code&gt;db2_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sqlite_fdw&#34;&gt;&lt;code&gt;sqlite_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgbouncer_fdw&#34;&gt;&lt;code&gt;pgbouncer_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/mongo_fdw&#34;&gt;&lt;code&gt;mongo_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/redis_fdw&#34;&gt;&lt;code&gt;redis_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/redis&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/kafka_fdw&#34;&gt;&lt;code&gt;kafka_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/hdfs_fdw&#34;&gt;&lt;code&gt;hdfs_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/firebird_fdw&#34;&gt;&lt;code&gt;firebird_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/aws_s3&#34;&gt;&lt;code&gt;aws_s3&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/log_fdw&#34;&gt;&lt;code&gt;log_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/dblink&#34;&gt;&lt;code&gt;dblink&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/file_fdw&#34;&gt;&lt;code&gt;file_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/postgres_fdw&#34;&gt;&lt;code&gt;postgres_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/sim&#34;&gt;&lt;strong&gt;SIM&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/orafce&#34;&gt;&lt;code&gt;orafce&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgtt&#34;&gt;&lt;code&gt;pgtt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/session_variable&#34;&gt;&lt;code&gt;session_variable&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_statement_rollback&#34;&gt;&lt;code&gt;pg_statement_rollback&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_dbms_metadata&#34;&gt;&lt;code&gt;pg_dbms_metadata&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_dbms_lock&#34;&gt;&lt;code&gt;pg_dbms_lock&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_dbms_job&#34;&gt;&lt;code&gt;pg_dbms_job&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/babelfishpg_common&#34;&gt;&lt;code&gt;babelfishpg_common&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/babelfishpg_tsql&#34;&gt;&lt;code&gt;babelfishpg_tsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/babelfishpg_tds&#34;&gt;&lt;code&gt;babelfishpg_tds&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/babelfishpg_money&#34;&gt;&lt;code&gt;babelfishpg_money&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgmemcache&#34;&gt;&lt;code&gt;pgmemcache&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/etl&#34;&gt;&lt;strong&gt;ETL&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://ext.pigsty.io/#/pglogical&#34;&gt;&lt;code&gt;pglogical&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pglogical_origin&#34;&gt;&lt;code&gt;pglogical_origin&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pglogical_ticker&#34;&gt;&lt;code&gt;pglogical_ticker&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pgl_ddl_deploy&#34;&gt;&lt;code&gt;pgl_ddl_deploy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_failover_slots&#34;&gt;&lt;code&gt;pg_failover_slots&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/wal2json&#34;&gt;&lt;code&gt;wal2json&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/wal2mongo&#34;&gt;&lt;code&gt;wal2mongo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/decoderbufs&#34;&gt;&lt;code&gt;decoderbufs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/decoder_raw&#34;&gt;&lt;code&gt;decoder_raw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/test_decoding&#34;&gt;&lt;code&gt;test_decoding&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/mimeo&#34;&gt;&lt;code&gt;mimeo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/repmgr&#34;&gt;&lt;code&gt;repmgr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_fact_loader&#34;&gt;&lt;code&gt;pg_fact_loader&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ext.pigsty.io/#/pg_bulkload&#34;&gt;&lt;code&gt;pg_bulkload&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 的 PGDG 官方仓库中，提供了大约 &lt;strong&gt;100&lt;/strong&gt; 个左右的扩展，但存在各种问题：有的扩展在 Debian/Ubuntu 的 APT 仓库里有，在 EL 系统的 YUM 仓库里没有；
有的扩展在 EL8 上有，EL9 没有；有的扩展在 Ubuntu 22 上有，在 24 上没有；有的扩展针对 PostgreSQL 12 - 15 提供，PG 16，17 不提供；有的扩展只有 x86_64 架构，没有 arm 架构；有时候碰上这种问题确实蛮让人头疼。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;怎么办我行我上&#34;&gt;怎么办？我行我上！&lt;/h2&gt;
&lt;p&gt;作为一个 PostgreSQL 发行版维护者，我曾经寄希望于 PG 生态的其他人来解决这个问题。
每当我看见 PGDG 仓库有出现错漏缺失，我都会第一时间反馈给仓库维护者 Devrim 和 Cris 。&lt;/p&gt;
&lt;p&gt;有的时候这种模式挺管用，比如去年当我发现 pgvector 这个强力向量数据库扩展还没有二进制软件包制成品时，我第一时间&lt;a href=&#34;https://github.com/pgvector/pgvector/issues/76&#34;&gt;提给 Devrim&lt;/a&gt; ，
&lt;a href=&#34;/zh/blog/pg/vector-json-pg/#%E8%AF%91%E8%80%85%E8%AF%84%E8%AE%BA&#34;&gt;将其放入 PGDG 仓库&lt;/a&gt;，然后 pgvector 遂成为 PG 生态中的向量数据库事实标准，进入到各家云厂商 RDS 中。&lt;/p&gt;
&lt;p&gt;但有的时候，事情并不能总能如意。例如，&lt;strong&gt;Devrim&lt;/strong&gt; 表示，他绝对不会接受任何 Rust 扩展插件进入 PGDG YUM 仓库。
但我确实有二十多个用 Rust 编写的 PostgreSQL 扩展需要分发（例如自建 Supabase 就需要 pg_graphql, pg_jsonschema, wrappers 三个 Rust 扩展），怎么办呢？&lt;/p&gt;
&lt;p&gt;再比如说，最近 PG 生态非常火热的 &lt;a href=&#34;/zh/blog/pg/pg-duckdb&#34;&gt;DuckDB 缝合大赛&lt;/a&gt;，大家都在密集地更新跟进 DuckDB 系扩展 ，这些扩展插件我第一时间 &lt;a href=&#34;https://ext.pigsty.io/#/olap&#34;&gt;打好了 RPM/DEB 包&lt;/a&gt;，但是如何分发呢？&lt;/p&gt;
&lt;p&gt;思来想去，我决定还是我行我上，自己维护一个 PostgreSQL 扩展插件的 APT / YUM 仓库，分发 PG 扩展。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ext.pigsty.io&#34;&gt;&lt;img src=&#34;ext-website.png&#34; style=&#34;max-width: 800px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pg-扩展大全&#34;&gt;PG 扩展大全&lt;/h2&gt;
&lt;p&gt;在过去的半年中，我的工作重心放在 PG 扩展生态的整合上。而最近，这项工作终于达到了一个让我自己感到满意的里程碑。我建设了一个 PG Yum/APT 仓库，收录了 340 个可用 PG 扩展的元数据，以及二进制制成品。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Entry / Filter&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;All&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PGDG&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PIGSTY&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CONTRIB&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MISC&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MISS&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG17&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG16&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG15&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG14&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG13&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;PG12&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RPM Extension&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;334&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;119&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;139&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;301&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;330&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;333&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;319&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;307&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;294&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DEB Extension&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;326&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;104&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;143&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;302&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;322&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;325&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;316&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;303&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;293&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RPM Package&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;251&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;107&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;138&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;220&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;247&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;250&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;239&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;229&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DEB Package&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;241&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;90&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;142&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;218&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;237&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;240&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;234&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;223&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;213&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上是这个仓库的一些统计数字：总共有 340 个可用 Extension，去除 PG 自带的 70 个，总共 270 个第三方扩展插件。这 270 个扩展插件中，有小一半是 PGDG 官方仓库维护的（126个RPM扩展，102个DEB扩展），另外的大一半（131个RPM，143个DEB）都是由我维护，修复，编译，打包，测试，分发的。&lt;/p&gt;
&lt;p&gt;每一个扩展，我都针对最新的 PostgreSQL 12 - 17 这六个生命周期大版本分别打包构建，针对 EL8，EL9，Ubuntu 22.04，Ubuntu 24.04，以及 Debian 12 这五个绝对主流 Linux 发行版构建。此外也对 EL7，Debian 11， Ubuntu 20.04 这些过保系统提供部分有限支持。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ext.pigsty.io&#34;&gt;&lt;img src=&#34;usage.png&#34; style=&#34;max-width: 800px; max-height: 800px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个仓库还解决了扩展对齐的问题，例如，原本在 APT 和 YUM 仓库中的扩展，APT 有一小半几十个扩展 YUM 仓库没有，YUM 仓库有一小半 APT 仓库没有。我把两者独有的扩展都尽可能移植到另一个操作系统生态中，现在只有 7 个 APT 扩展在 YUM 仓库中缺失，16 个扩展在 APT 仓库缺失，只占总数的 6%。很多 PGDG 扩展版本缺失的问题，也在这里得到了一并修复。&lt;/p&gt;
&lt;p&gt;我提供了一个完整的目录，列出了支持的扩展，并且对每一个扩展，都给出了详情，依赖安装说明与注意事项。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ext.pigsty.io/#/postgis&#34;&gt;&lt;img src=&#34;postgis.png&#34; style=&#34;max-width: 1200px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我想，用户吭哧吭哧抱怨扩展编译失败的问题，应该能在这里得到最终的解决。&lt;/p&gt;
&lt;p&gt;当然题外话是广告时间，安装这些扩展，使用这个仓库的最简单的方式是什么？当然是开箱即用的 PostgreSQL 数据库发行版 —— &lt;strong&gt;Pigsty&lt;/strong&gt; —— &lt;strong&gt;但这并非必选项&lt;/strong&gt;。
你依然可以用简单的一行 shell 在任何 EL/Debian/Ubuntu 系统上启用此仓库。&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;使用Pigsty一次性配置好并拉起用于自建Supabase的PostgreSQL集群，只要简单地声明要安装哪些扩展插件即可！&lt;/summary&gt;&lt;br&gt;
&lt;p&gt;一键自建 Supabase 所需的 PostgreSQL 集群，请参考样例配置文件： &lt;a href=&#34;https://github.com/Vonng/pigsty/blob/main/conf/supa.yml&#34;&gt;&lt;code&gt;conf/dbms/supabase.yml&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pg-meta, the underlying postgres database for supabase&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-meta&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;primary } }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-meta&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_users&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# supabase roles: anon, authenticated, dashboard_user&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: anon           ,login&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: authenticated  ,login&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: dashboard_user ,login: false ,replication: true ,createdb: true ,createrole&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: service_role   ,login: false ,bypassrls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# supabase users: please use the same password&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_admin             ,password: &amp;#39;DBUser.Supa&amp;#39; ,pgbouncer: true ,inherit: true   ,roles: [ dbrole_admin ] ,superuser: true ,replication: true ,createdb: true ,createrole: true ,bypassrls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: authenticator              ,password: &amp;#39;DBUser.Supa&amp;#39; ,pgbouncer: true ,inherit: false  ,roles&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dbrole_admin, authenticated ,anon ,service_role ] }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_auth_admin        ,password: &amp;#39;DBUser.Supa&amp;#39; ,pgbouncer: true ,inherit: false  ,roles: [ dbrole_admin ] ,createrole&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_storage_admin     ,password: &amp;#39;DBUser.Supa&amp;#39; ,pgbouncer: true ,inherit: false  ,roles: [ dbrole_admin, authenticated ,anon ,service_role ] ,createrole&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_functions_admin   ,password: &amp;#39;DBUser.Supa&amp;#39; ,pgbouncer: true ,inherit: false  ,roles: [ dbrole_admin ] ,createrole&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_replication_admin ,password: &amp;#39;DBUser.Supa&amp;#39; ,replication: true ,roles&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dbrole_admin ]}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_read_only_user    ,password: &amp;#39;DBUser.Supa&amp;#39; ,bypassrls: true ,roles&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dbrole_readonly, pg_read_all_data ] }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_databases&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;baseline&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;supabase.sql&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;owner&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;supabase_admin&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;supabase postgres database&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;schemas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;extensions ,auth ,realtime ,storage ,graphql_public ,supabase_functions ,_analytics ,_realtime ]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pgcrypto  ,schema: extensions  } # 1.3   &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cryptographic functions&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pg_net    ,schema: extensions  } # 0.9.2 &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;async HTTP&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pgjwt     ,schema: extensions  } # 0.2.0 &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;json web token API for postgres&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: uuid-ossp ,schema: extensions  } # 1.1   &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;generate universally unique identifiers (UUIDs)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pgsodium        }                # 3.1.9 &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pgsodium is a modern cryptography library for Postgres.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: supabase_vault  }                # 0.2.8 &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Supabase Vault Extension&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pg_graphql      }                # 1.5.9 : pg_graphql&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GraphQL support&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pg_jsonschema   }                # 0.3.3 : pg_jsonschema&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Validate json schema&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: wrappers        }                # 0.4.3 : wrappers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FDW collections&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: http            }                # 1.6   : http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;allows web page retrieval inside the database.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pg_cron         }                # 1.6   : pg_cron&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Job scheduler for PostgreSQL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: timescaledb     }                # 2.17  : timescaledb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Enables scalable inserts and complex queries for time-series data&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: pg_tle          }                # 1.2   : pg_tle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Trusted Language Extensions for PostgreSQL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# supabase required extensions&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_libs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;pg_stat_statements, pgaudit, plpgsql, plpgsql_check, pg_cron, pg_net, timescaledb, auto_explain, pg_tle, plan_filter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_extensions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# extensions to be installed on this cluster&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;supa-stack&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;timescaledb pg_cron pg_timetable&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;postgis pg_geohash&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pgvector pgvectorscale pg_similarity smlar pg_summarize pg_tiktoken&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_search pg_bigm zhparser hunspell&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_analytics pg_parquet pg_duckdb&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_hint_plan hll rum pg_graphql pg_jsonschema index_advisor pg_plan_filter hypopg pg_ivm pgmq pg_cardano&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_tle plv8 plpgsql_check&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#pljava&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pgunit md5hash asn1oid roaringbitmap pgfaceting pgsphere pg_country pg_currency pgmp numeral pg_rational pguint pg_uint128 ip4r pg_uri pgemailaddr acl timestamp9&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_gzip pg_zstd pg_http pg_net pg_html5_email_address pgsql_tweaks pg_extra_time pg_timeit count_distinct extra_window_functions first_last_agg tdigest aggs_for_arrays aggs_for_vecs pg_arraymath quantile lower_quantile&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_idkit pg_uuidv7 permuteseq pg_hashids sequential_uuids pg_math pg_random pg_base36 pg_base62 pg_base58 floatvec pg_financial pgjwt pg_hashlib shacrypt cryptint pg_ecdsa pgpcre icu_ext pgqr envvar pg_protobuf url_encode&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_repack pg_squeeze pg_dirtyread ddlx pg_readonly safeupdate pg_permissions pg_savior pg_fio&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pg_profile pg_show_plans pg_stat_kcache pg_stat_monitor pg_qualstats pg_track_settings system_stats pg_meta pgnodemx pg_sqlog bgw_replstatus toastinfo pg_explain_ui pg_relusage&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;passwordcheck supautils pgsodium pg_vault anonymizer pgsmcrypto pgaudit pgauditlogtofile pg_auth_mon credcheck logerrors login_hook set_user pgextwlist pg_auditor sslutils noset&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;wrappers mysql_fdw redis_fdw pg_redis_pubsub aws_s3 log_fdw&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;pglogical wal2json decoder_raw pg_fact_loader&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_parameters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cron.database_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pgsodium.enable_event_trigger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;off&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_hba_rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# supabase hba rules, require access from docker network&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;user: all ,db: postgres  ,addr: intra         ,auth: pwd ,title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;allow supabase access from intranet&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;user: all ,db: postgres  ,addr: 172.17.0.0/16 ,auth: pwd ,title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;allow access from local docker network&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_vip_enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_vip_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10.10.2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_vip_interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;eth1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;这个仓库里有什么&#34;&gt;这个仓库里有什么？&lt;/h2&gt;
&lt;p&gt;在 Pigsty 的扩展仓库中，所有的扩展都已经被预先分为了十五类之一：TIME，GIS，RAG，FTS，OLAP，FEAT，LANG，TYPE，FUNC，ADMIN，STAT，SEC，FDW，SIM，ETL，如下所示。&lt;/p&gt;
&lt;p&gt;请移步 &lt;a href=&#34;https://ext.pigsty.io&#34;&gt;ext.pigsty.io&lt;/a&gt; 查看完整详情。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/time&#34;&gt;&lt;strong&gt;TIME&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/timescaledb&#34;&gt;&lt;code&gt;timescaledb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/timescaledb_toolkit&#34;&gt;&lt;code&gt;timescaledb_toolkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/timeseries&#34;&gt;&lt;code&gt;timeseries&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/periods&#34;&gt;&lt;code&gt;periods&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/temporal_tables&#34;&gt;&lt;code&gt;temporal_tables&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/emaj&#34;&gt;&lt;code&gt;emaj&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/table_version&#34;&gt;&lt;code&gt;table_version&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_cron&#34;&gt;&lt;code&gt;pg_cron&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_later&#34;&gt;&lt;code&gt;pg_later&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_background&#34;&gt;&lt;code&gt;pg_background&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/gis&#34;&gt;&lt;strong&gt;GIS&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/postgis&#34;&gt;&lt;code&gt;postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/postgis_topology&#34;&gt;&lt;code&gt;postgis_topology&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/postgis_raster&#34;&gt;&lt;code&gt;postgis_raster&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/postgis_sfcgal&#34;&gt;&lt;code&gt;postgis_sfcgal&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/postgis_tiger_geocoder&#34;&gt;&lt;code&gt;postgis_tiger_geocoder&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/address_standardizer&#34;&gt;&lt;code&gt;address_standardizer&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/address_standardizer_data_us&#34;&gt;&lt;code&gt;address_standardizer_data_us&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgrouting&#34;&gt;&lt;code&gt;pgrouting&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pointcloud&#34;&gt;&lt;code&gt;pointcloud&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pointcloud_postgis&#34;&gt;&lt;code&gt;pointcloud_postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/h3&#34;&gt;&lt;code&gt;h3&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/h3_postgis&#34;&gt;&lt;code&gt;h3_postgis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/q3c&#34;&gt;&lt;code&gt;q3c&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/ogr_fdw&#34;&gt;&lt;code&gt;ogr_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/geoip&#34;&gt;&lt;code&gt;geoip&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_polyline&#34;&gt;&lt;code&gt;pg_polyline&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_geohash&#34;&gt;&lt;code&gt;pg_geohash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/mobilitydb&#34;&gt;&lt;code&gt;mobilitydb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/earthdistance&#34;&gt;&lt;code&gt;earthdistance&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/rag&#34;&gt;&lt;strong&gt;RAG&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/vector&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/vectorscale&#34;&gt;&lt;code&gt;vectorscale&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/vectorize&#34;&gt;&lt;code&gt;vectorize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_similarity&#34;&gt;&lt;code&gt;pg_similarity&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/smlar&#34;&gt;&lt;code&gt;smlar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_summarize&#34;&gt;&lt;code&gt;pg_summarize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_tiktoken&#34;&gt;&lt;code&gt;pg_tiktoken&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgml&#34;&gt;&lt;code&gt;pgml&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg4ml&#34;&gt;&lt;code&gt;pg4ml&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/fts&#34;&gt;&lt;strong&gt;FTS&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/pg_search&#34;&gt;&lt;code&gt;pg_search&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_bigm&#34;&gt;&lt;code&gt;pg_bigm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/zhparser&#34;&gt;&lt;code&gt;zhparser&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_cs_cz&#34;&gt;&lt;code&gt;hunspell_cs_cz&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_de_de&#34;&gt;&lt;code&gt;hunspell_de_de&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_en_us&#34;&gt;&lt;code&gt;hunspell_en_us&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_fr&#34;&gt;&lt;code&gt;hunspell_fr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_ne_np&#34;&gt;&lt;code&gt;hunspell_ne_np&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_nl_nl&#34;&gt;&lt;code&gt;hunspell_nl_nl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_nn_no&#34;&gt;&lt;code&gt;hunspell_nn_no&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_pt_pt&#34;&gt;&lt;code&gt;hunspell_pt_pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_ru_ru&#34;&gt;&lt;code&gt;hunspell_ru_ru&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hunspell_ru_ru_aot&#34;&gt;&lt;code&gt;hunspell_ru_ru_aot&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/fuzzystrmatch&#34;&gt;&lt;code&gt;fuzzystrmatch&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_trgm&#34;&gt;&lt;code&gt;pg_trgm&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/olap&#34;&gt;&lt;strong&gt;OLAP&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/citus&#34;&gt;&lt;code&gt;citus&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/citus_columnar&#34;&gt;&lt;code&gt;citus_columnar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/columnar&#34;&gt;&lt;code&gt;columnar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_analytics&#34;&gt;&lt;code&gt;pg_analytics&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_duckdb&#34;&gt;&lt;code&gt;pg_duckdb&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_mooncake&#34;&gt;&lt;code&gt;pg_mooncake&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/duckdb_fdw&#34;&gt;&lt;code&gt;duckdb_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_parquet&#34;&gt;&lt;code&gt;pg_parquet&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_fkpart&#34;&gt;&lt;code&gt;pg_fkpart&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_partman&#34;&gt;&lt;code&gt;pg_partman&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plproxy&#34;&gt;&lt;code&gt;plproxy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_strom&#34;&gt;&lt;code&gt;pg_strom&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tablefunc&#34;&gt;&lt;code&gt;tablefunc&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/feat&#34;&gt;&lt;strong&gt;FEAT&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/age&#34;&gt;&lt;code&gt;age&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hll&#34;&gt;&lt;code&gt;hll&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/rum&#34;&gt;&lt;code&gt;rum&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_graphql&#34;&gt;&lt;code&gt;pg_graphql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_jsonschema&#34;&gt;&lt;code&gt;pg_jsonschema&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/jsquery&#34;&gt;&lt;code&gt;jsquery&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_hint_plan&#34;&gt;&lt;code&gt;pg_hint_plan&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hypopg&#34;&gt;&lt;code&gt;hypopg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/index_advisor&#34;&gt;&lt;code&gt;index_advisor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plan_filter&#34;&gt;&lt;code&gt;plan_filter&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/imgsmlr&#34;&gt;&lt;code&gt;imgsmlr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_ivm&#34;&gt;&lt;code&gt;pg_ivm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgmq&#34;&gt;&lt;code&gt;pgmq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgq&#34;&gt;&lt;code&gt;pgq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_cardano&#34;&gt;&lt;code&gt;pg_cardano&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/rdkit&#34;&gt;&lt;code&gt;rdkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/bloom&#34;&gt;&lt;code&gt;bloom&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/lang&#34;&gt;&lt;strong&gt;LANG&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/pg_tle&#34;&gt;&lt;code&gt;pg_tle&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plv8&#34;&gt;&lt;code&gt;plv8&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pllua&#34;&gt;&lt;code&gt;pllua&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore_pllua&#34;&gt;&lt;code&gt;hstore_pllua&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plluau&#34;&gt;&lt;code&gt;plluau&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore_plluau&#34;&gt;&lt;code&gt;hstore_plluau&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plprql&#34;&gt;&lt;code&gt;plprql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pldbgapi&#34;&gt;&lt;code&gt;pldbgapi&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plpgsql_check&#34;&gt;&lt;code&gt;plpgsql_check&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plprofiler&#34;&gt;&lt;code&gt;plprofiler&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plsh&#34;&gt;&lt;code&gt;plsh&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pljava&#34;&gt;&lt;code&gt;pljava&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plr&#34;&gt;&lt;code&gt;plr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgtap&#34;&gt;&lt;code&gt;pgtap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/faker&#34;&gt;&lt;code&gt;faker&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/dbt2&#34;&gt;&lt;code&gt;dbt2&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pltcl&#34;&gt;&lt;code&gt;pltcl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pltclu&#34;&gt;&lt;code&gt;pltclu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plperl&#34;&gt;&lt;code&gt;plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/bool_plperl&#34;&gt;&lt;code&gt;bool_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore_plperl&#34;&gt;&lt;code&gt;hstore_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/jsonb_plperl&#34;&gt;&lt;code&gt;jsonb_plperl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plperlu&#34;&gt;&lt;code&gt;plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/bool_plperlu&#34;&gt;&lt;code&gt;bool_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/jsonb_plperlu&#34;&gt;&lt;code&gt;jsonb_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore_plperlu&#34;&gt;&lt;code&gt;hstore_plperlu&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plpgsql&#34;&gt;&lt;code&gt;plpgsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/plpython3u&#34;&gt;&lt;code&gt;plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/jsonb_plpython3u&#34;&gt;&lt;code&gt;jsonb_plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/ltree_plpython3u&#34;&gt;&lt;code&gt;ltree_plpython3u&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore_plpython3u&#34;&gt;&lt;code&gt;hstore_plpython3u&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/type&#34;&gt;&lt;strong&gt;TYPE&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/prefix&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/semver&#34;&gt;&lt;code&gt;semver&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/unit&#34;&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/md5hash&#34;&gt;&lt;code&gt;md5hash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/asn1oid&#34;&gt;&lt;code&gt;asn1oid&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/roaringbitmap&#34;&gt;&lt;code&gt;roaringbitmap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgfaceting&#34;&gt;&lt;code&gt;pgfaceting&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_sphere&#34;&gt;&lt;code&gt;pg_sphere&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/country&#34;&gt;&lt;code&gt;country&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/currency&#34;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgmp&#34;&gt;&lt;code&gt;pgmp&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/numeral&#34;&gt;&lt;code&gt;numeral&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_rational&#34;&gt;&lt;code&gt;pg_rational&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/uint&#34;&gt;&lt;code&gt;uint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/uint128&#34;&gt;&lt;code&gt;uint128&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/ip4r&#34;&gt;&lt;code&gt;ip4r&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/uri&#34;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgemailaddr&#34;&gt;&lt;code&gt;pgemailaddr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/acl&#34;&gt;&lt;code&gt;acl&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/debversion&#34;&gt;&lt;code&gt;debversion&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_rrule&#34;&gt;&lt;code&gt;pg_rrule&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/timestamp9&#34;&gt;&lt;code&gt;timestamp9&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/chkpass&#34;&gt;&lt;code&gt;chkpass&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/isn&#34;&gt;&lt;code&gt;isn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/seg&#34;&gt;&lt;code&gt;seg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/cube&#34;&gt;&lt;code&gt;cube&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/ltree&#34;&gt;&lt;code&gt;ltree&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hstore&#34;&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/citext&#34;&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/xml2&#34;&gt;&lt;code&gt;xml2&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/func&#34;&gt;&lt;strong&gt;FUNC&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/topn&#34;&gt;&lt;code&gt;topn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/gzip&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/zstd&#34;&gt;&lt;code&gt;zstd&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/http&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_net&#34;&gt;&lt;code&gt;pg_net&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_smtp_client&#34;&gt;&lt;code&gt;pg_smtp_client&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_html5_email_address&#34;&gt;&lt;code&gt;pg_html5_email_address&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgsql_tweaks&#34;&gt;&lt;code&gt;pgsql_tweaks&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_extra_time&#34;&gt;&lt;code&gt;pg_extra_time&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/timeit&#34;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/count_distinct&#34;&gt;&lt;code&gt;count_distinct&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/extra_window_functions&#34;&gt;&lt;code&gt;extra_window_functions&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/first_last_agg&#34;&gt;&lt;code&gt;first_last_agg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tdigest&#34;&gt;&lt;code&gt;tdigest&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/aggs_for_vecs&#34;&gt;&lt;code&gt;aggs_for_vecs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/aggs_for_arrays&#34;&gt;&lt;code&gt;aggs_for_arrays&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/arraymath&#34;&gt;&lt;code&gt;arraymath&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/quantile&#34;&gt;&lt;code&gt;quantile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/lower_quantile&#34;&gt;&lt;code&gt;lower_quantile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_idkit&#34;&gt;&lt;code&gt;pg_idkit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_uuidv7&#34;&gt;&lt;code&gt;pg_uuidv7&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/permuteseq&#34;&gt;&lt;code&gt;permuteseq&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_hashids&#34;&gt;&lt;code&gt;pg_hashids&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/sequential_uuids&#34;&gt;&lt;code&gt;sequential_uuids&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_math&#34;&gt;&lt;code&gt;pg_math&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/random&#34;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/base36&#34;&gt;&lt;code&gt;base36&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/base62&#34;&gt;&lt;code&gt;base62&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_base58&#34;&gt;&lt;code&gt;pg_base58&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/floatvec&#34;&gt;&lt;code&gt;floatvec&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/financial&#34;&gt;&lt;code&gt;financial&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgjwt&#34;&gt;&lt;code&gt;pgjwt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_hashlib&#34;&gt;&lt;code&gt;pg_hashlib&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/shacrypt&#34;&gt;&lt;code&gt;shacrypt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/cryptint&#34;&gt;&lt;code&gt;cryptint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pguecc&#34;&gt;&lt;code&gt;pguecc&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgpcre&#34;&gt;&lt;code&gt;pgpcre&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/icu_ext&#34;&gt;&lt;code&gt;icu_ext&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgqr&#34;&gt;&lt;code&gt;pgqr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/envvar&#34;&gt;&lt;code&gt;envvar&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_protobuf&#34;&gt;&lt;code&gt;pg_protobuf&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/url_encode&#34;&gt;&lt;code&gt;url_encode&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/refint&#34;&gt;&lt;code&gt;refint&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/autoinc&#34;&gt;&lt;code&gt;autoinc&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/insert_username&#34;&gt;&lt;code&gt;insert_username&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/moddatetime&#34;&gt;&lt;code&gt;moddatetime&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tsm_system_time&#34;&gt;&lt;code&gt;tsm_system_time&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/dict_xsyn&#34;&gt;&lt;code&gt;dict_xsyn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tsm_system_rows&#34;&gt;&lt;code&gt;tsm_system_rows&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tcn&#34;&gt;&lt;code&gt;tcn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/uuid-ossp&#34;&gt;&lt;code&gt;uuid-ossp&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/btree_gist&#34;&gt;&lt;code&gt;btree_gist&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/btree_gin&#34;&gt;&lt;code&gt;btree_gin&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/intarray&#34;&gt;&lt;code&gt;intarray&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/intagg&#34;&gt;&lt;code&gt;intagg&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/dict_int&#34;&gt;&lt;code&gt;dict_int&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/unaccent&#34;&gt;&lt;code&gt;unaccent&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/admin&#34;&gt;&lt;strong&gt;ADMIN&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/pg_repack&#34;&gt;&lt;code&gt;pg_repack&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_squeeze&#34;&gt;&lt;code&gt;pg_squeeze&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_dirtyread&#34;&gt;&lt;code&gt;pg_dirtyread&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgfincore&#34;&gt;&lt;code&gt;pgfincore&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgdd&#34;&gt;&lt;code&gt;pgdd&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/ddlx&#34;&gt;&lt;code&gt;ddlx&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/prioritize&#34;&gt;&lt;code&gt;prioritize&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_checksums&#34;&gt;&lt;code&gt;pg_checksums&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_readonly&#34;&gt;&lt;code&gt;pg_readonly&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/safeupdate&#34;&gt;&lt;code&gt;safeupdate&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_permissions&#34;&gt;&lt;code&gt;pg_permissions&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgautofailover&#34;&gt;&lt;code&gt;pgautofailover&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_catcheck&#34;&gt;&lt;code&gt;pg_catcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pre_prepare&#34;&gt;&lt;code&gt;pre_prepare&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgcozy&#34;&gt;&lt;code&gt;pgcozy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_orphaned&#34;&gt;&lt;code&gt;pg_orphaned&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_crash&#34;&gt;&lt;code&gt;pg_crash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_cheat_funcs&#34;&gt;&lt;code&gt;pg_cheat_funcs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_savior&#34;&gt;&lt;code&gt;pg_savior&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/table_log&#34;&gt;&lt;code&gt;table_log&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_fio&#34;&gt;&lt;code&gt;pg_fio&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgpool_adm&#34;&gt;&lt;code&gt;pgpool_adm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgpool_recovery&#34;&gt;&lt;code&gt;pgpool_recovery&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgpool_regclass&#34;&gt;&lt;code&gt;pgpool_regclass&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgagent&#34;&gt;&lt;code&gt;pgagent&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/vacuumlo&#34;&gt;&lt;code&gt;vacuumlo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_prewarm&#34;&gt;&lt;code&gt;pg_prewarm&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/oid2name&#34;&gt;&lt;code&gt;oid2name&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/lo&#34;&gt;&lt;code&gt;lo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/basic_archive&#34;&gt;&lt;code&gt;basic_archive&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/basebackup_to_shell&#34;&gt;&lt;code&gt;basebackup_to_shell&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/old_snapshot&#34;&gt;&lt;code&gt;old_snapshot&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/adminpack&#34;&gt;&lt;code&gt;adminpack&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/amcheck&#34;&gt;&lt;code&gt;amcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_surgery&#34;&gt;&lt;code&gt;pg_surgery&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/stat&#34;&gt;&lt;strong&gt;STAT&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/pg_profile&#34;&gt;&lt;code&gt;pg_profile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_show_plans&#34;&gt;&lt;code&gt;pg_show_plans&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_stat_kcache&#34;&gt;&lt;code&gt;pg_stat_kcache&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_stat_monitor&#34;&gt;&lt;code&gt;pg_stat_monitor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_qualstats&#34;&gt;&lt;code&gt;pg_qualstats&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_store_plans&#34;&gt;&lt;code&gt;pg_store_plans&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_track_settings&#34;&gt;&lt;code&gt;pg_track_settings&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_wait_sampling&#34;&gt;&lt;code&gt;pg_wait_sampling&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/system_stats&#34;&gt;&lt;code&gt;system_stats&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/meta&#34;&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgnodemx&#34;&gt;&lt;code&gt;pgnodemx&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_proctab&#34;&gt;&lt;code&gt;pg_proctab&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_sqlog&#34;&gt;&lt;code&gt;pg_sqlog&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/bgw_replstatus&#34;&gt;&lt;code&gt;bgw_replstatus&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgmeminfo&#34;&gt;&lt;code&gt;pgmeminfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/toastinfo&#34;&gt;&lt;code&gt;toastinfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/explain_ui&#34;&gt;&lt;code&gt;explain_ui&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_relusage&#34;&gt;&lt;code&gt;pg_relusage&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_top&#34;&gt;&lt;code&gt;pg_top&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pagevis&#34;&gt;&lt;code&gt;pagevis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/powa&#34;&gt;&lt;code&gt;powa&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pageinspect&#34;&gt;&lt;code&gt;pageinspect&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgrowlocks&#34;&gt;&lt;code&gt;pgrowlocks&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/sslinfo&#34;&gt;&lt;code&gt;sslinfo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_buffercache&#34;&gt;&lt;code&gt;pg_buffercache&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_walinspect&#34;&gt;&lt;code&gt;pg_walinspect&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_freespacemap&#34;&gt;&lt;code&gt;pg_freespacemap&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_visibility&#34;&gt;&lt;code&gt;pg_visibility&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgstattuple&#34;&gt;&lt;code&gt;pgstattuple&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/auto_explain&#34;&gt;&lt;code&gt;auto_explain&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_stat_statements&#34;&gt;&lt;code&gt;pg_stat_statements&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/sec&#34;&gt;&lt;strong&gt;SEC&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/passwordcheck_cracklib&#34;&gt;&lt;code&gt;passwordcheck_cracklib&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/supautils&#34;&gt;&lt;code&gt;supautils&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgsodium&#34;&gt;&lt;code&gt;pgsodium&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/supabase_vault&#34;&gt;&lt;code&gt;supabase_vault&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_session_jwt&#34;&gt;&lt;code&gt;pg_session_jwt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/anon&#34;&gt;&lt;code&gt;anon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_tde&#34;&gt;&lt;code&gt;pg_tde&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgsmcrypto&#34;&gt;&lt;code&gt;pgsmcrypto&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgaudit&#34;&gt;&lt;code&gt;pgaudit&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgauditlogtofile&#34;&gt;&lt;code&gt;pgauditlogtofile&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_auth_mon&#34;&gt;&lt;code&gt;pg_auth_mon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/credcheck&#34;&gt;&lt;code&gt;credcheck&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgcryptokey&#34;&gt;&lt;code&gt;pgcryptokey&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_jobmon&#34;&gt;&lt;code&gt;pg_jobmon&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/logerrors&#34;&gt;&lt;code&gt;logerrors&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/login_hook&#34;&gt;&lt;code&gt;login_hook&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/set_user&#34;&gt;&lt;code&gt;set_user&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_snakeoil&#34;&gt;&lt;code&gt;pg_snakeoil&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgextwlist&#34;&gt;&lt;code&gt;pgextwlist&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_auditor&#34;&gt;&lt;code&gt;pg_auditor&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/sslutils&#34;&gt;&lt;code&gt;sslutils&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/noset&#34;&gt;&lt;code&gt;noset&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/sepgsql&#34;&gt;&lt;code&gt;sepgsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/auth_delay&#34;&gt;&lt;code&gt;auth_delay&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgcrypto&#34;&gt;&lt;code&gt;pgcrypto&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/passwordcheck&#34;&gt;&lt;code&gt;passwordcheck&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/fdw&#34;&gt;&lt;strong&gt;FDW&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/wrappers&#34;&gt;&lt;code&gt;wrappers&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/multicorn&#34;&gt;&lt;code&gt;multicorn&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/odbc_fdw&#34;&gt;&lt;code&gt;odbc_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/jdbc_fdw&#34;&gt;&lt;code&gt;jdbc_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/mysql_fdw&#34;&gt;&lt;code&gt;mysql_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/oracle_fdw&#34;&gt;&lt;code&gt;oracle_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/tds_fdw&#34;&gt;&lt;code&gt;tds_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/db2_fdw&#34;&gt;&lt;code&gt;db2_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/sqlite_fdw&#34;&gt;&lt;code&gt;sqlite_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgbouncer_fdw&#34;&gt;&lt;code&gt;pgbouncer_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/mongo_fdw&#34;&gt;&lt;code&gt;mongo_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/redis_fdw&#34;&gt;&lt;code&gt;redis_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/redis&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/kafka_fdw&#34;&gt;&lt;code&gt;kafka_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/hdfs_fdw&#34;&gt;&lt;code&gt;hdfs_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/firebird_fdw&#34;&gt;&lt;code&gt;firebird_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/aws_s3&#34;&gt;&lt;code&gt;aws_s3&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/log_fdw&#34;&gt;&lt;code&gt;log_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/dblink&#34;&gt;&lt;code&gt;dblink&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/file_fdw&#34;&gt;&lt;code&gt;file_fdw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/postgres_fdw&#34;&gt;&lt;code&gt;postgres_fdw&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/sim&#34;&gt;&lt;strong&gt;SIM&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/orafce&#34;&gt;&lt;code&gt;orafce&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgtt&#34;&gt;&lt;code&gt;pgtt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/session_variable&#34;&gt;&lt;code&gt;session_variable&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_statement_rollback&#34;&gt;&lt;code&gt;pg_statement_rollback&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_dbms_metadata&#34;&gt;&lt;code&gt;pg_dbms_metadata&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_dbms_lock&#34;&gt;&lt;code&gt;pg_dbms_lock&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_dbms_job&#34;&gt;&lt;code&gt;pg_dbms_job&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/babelfishpg_common&#34;&gt;&lt;code&gt;babelfishpg_common&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/babelfishpg_tsql&#34;&gt;&lt;code&gt;babelfishpg_tsql&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/babelfishpg_tds&#34;&gt;&lt;code&gt;babelfishpg_tds&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/babelfishpg_money&#34;&gt;&lt;code&gt;babelfishpg_money&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgmemcache&#34;&gt;&lt;code&gt;pgmemcache&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;/etl&#34;&gt;&lt;strong&gt;ETL&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;/pglogical&#34;&gt;&lt;code&gt;pglogical&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pglogical_origin&#34;&gt;&lt;code&gt;pglogical_origin&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pglogical_ticker&#34;&gt;&lt;code&gt;pglogical_ticker&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pgl_ddl_deploy&#34;&gt;&lt;code&gt;pgl_ddl_deploy&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_failover_slots&#34;&gt;&lt;code&gt;pg_failover_slots&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/wal2json&#34;&gt;&lt;code&gt;wal2json&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/wal2mongo&#34;&gt;&lt;code&gt;wal2mongo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/decoderbufs&#34;&gt;&lt;code&gt;decoderbufs&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/decoder_raw&#34;&gt;&lt;code&gt;decoder_raw&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/test_decoding&#34;&gt;&lt;code&gt;test_decoding&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/mimeo&#34;&gt;&lt;code&gt;mimeo&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/repmgr&#34;&gt;&lt;code&gt;repmgr&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_fact_loader&#34;&gt;&lt;code&gt;pg_fact_loader&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;/pg_bulkload&#34;&gt;&lt;code&gt;pg_bulkload&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一些感想与体会&#34;&gt;一些感想与体会&lt;/h2&gt;
&lt;p&gt;PG 每个大版本都会引入一些变动，因此维护一百多个扩展插件并不是一件轻松的事情。特别是一些扩展的作者都好几年没动静了，那还真就只能自己上。我自己修复了十几个扩展插件，提供了最新的 PG 大版本支持。能联系上作者的，我也提交了一堆 PR 或者 Issue，推动解决。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Vonng&#34;&gt;&lt;img src=&#34;github-contrib.png&#34; style=&#34;max-width: 800px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中，我和许多扩展作者都建立了联系。例如，我手把手帮助 ParadeDB 的老板与作者 &lt;a href=&#34;https://github.com/paradedb/paradedb/issues/1116&#34;&gt;解决了&lt;/a&gt; RPM / DEB 包打包与分发的问题。我说动了 duckdb_fdw 的作者使用一个单独的 libduckdb，并发布了 v1.0.0 ，我给一些PG扩展的作者发邮件/Issue，国产机器学习框架 PG4ML 的作者也找到了我希望能够通过这个渠道进行分发。&lt;/p&gt;
&lt;p&gt;再比如说，最近 PG 生态 OLAP 缝合 DuckDB 的竞赛如火如荼，但不管是ParadeDB 的 pg_analytics，国内个人开发者李红艳编写的 duckdb_fdw，CrunchyData 的 pg_parquet，MooncakeLab 的 pg_mooncake， Hydra 和 DuckDB 原厂 MotherDuck 亲自下场搞的 pg_duckdb ，都被我在第一时间编译打包收录整合其中，做到了 —— 你卷你的，反正我全都要。&lt;/p&gt;
&lt;p&gt;言归正传，&lt;strong&gt;我希望这个仓库能设立起 PostgreSQL 扩展安装分发的标准，解决让人头大的分发难题&lt;/strong&gt;。目前最让我感到高兴的进展是，流行的开源 PostgreSQL高可用集群搭建项目 &lt;a href=&#34;https://postgresql-cluster.org/&#34;&gt;&lt;code&gt;postgresql_cluster&lt;/code&gt;&lt;/a&gt; 的作者 Vitaliy Kukharik 已经将这个仓库作为默认启用的仓库来安装 PostgreSQL 扩展。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://x.com/VKukharik/status/1853012121623155117&#34;&gt;&lt;img src=&#34;pg-clusters.png&#34; style=&#34;max-width: 800px; width: 100%; height: auto;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前这个仓库 (repo.pigsty.io) 托管在 Cloudflare 上，所以没有什么流量成本。国内有一个镜像站点 repo.pigsty.cc，方便墙内用户使用，每个有小几百块流量费，不是什么大问题。两个仓库加起来，过去一个月的下载流量大概 200GB ，考虑到扩展平均几十KB到几MB的大小，总下载量小几十万是有了。&lt;/p&gt;
&lt;p&gt;因为&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487240&amp;idx=1&amp;sn=ba535fd0c1026bc2482ea6ad1e1fb8bf&amp;chksm=fe4b3ad3c93cb3c50bfeaed64963cce25c49bee80364d3a8ca78b87d7c9f19fd4d79d3c62ddc&amp;scene=21#wechat_redirect&#34;&gt;赛博菩萨 Cloudflare &lt;/a&gt;不收流量费，所以总的来说，我觉得做一个永久免费的声明与承诺并不困难，所以 So be it。我承诺这个仓库将持续维护并永久免费。如果有国内开源软件站点的朋友愿意赞助或提供镜像服务，欢迎联系我。&lt;/p&gt;
&lt;p&gt;我相信我的工作可以帮助到全球PG用户，并对 PostgreSQL 生态的繁荣贡献一份力量。我也希望我的工作可以帮到您，&lt;strong&gt;Enjoy PostgreSQL&lt;/strong&gt;！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MongoDB没有未来：好营销救不了烂芒果</title>
      <link>/zh/blog/db/bad-mongo/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/bad-mongo/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/bad-mongo/featured_hu02aa61ae1d9de35cbe238d2676170cb9_950024_640x0_resize_q75_catmullrom.jpg" width="640" height="366"/>]]>
        
        &lt;p&gt;这两天 MongoDB 整的营销花活让人眼花缭乱：《&lt;a href=&#34;https://mp.weixin.qq.com/s/ypV31fanKB6ZsFzuRYTwmQ&#34;&gt;MongoDB向PostgreSQL宣战&lt;/a&gt;》，《&lt;a href=&#34;https://mp.weixin.qq.com/s/SJw6S6k82bxOq1pWP3kDfw&#34;&gt;MongoDB 击败 PostgreSQL 赢下价值 300 亿美元项目&lt;/a&gt;》，以及原文 The Register 的《&lt;a href=&#34;https://www.theregister.com/2024/08/30/mongodb_postgresql/&#34;&gt;MongoDB在战胜强敌之后准备乱拳干翻 PostgreSQL&lt;/a&gt;》，活生生一副要乱拳打死老师傅的架势。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;300b.jpg&#34; src=&#34;/zh/blog/db/bad-mongo/300b.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;有朋友得意洋洋的特意转给我想看 PG 的笑话，这着实让我感到无奈 —— &lt;strong&gt;这么离谱的新闻都有人信！&lt;/strong&gt; 但事实是 —— &lt;strong&gt;这么离谱的东西真就有人信！&lt;/strong&gt; 包括某些CEO也照样会中招翻车。诚如石破天祖师爷所说：“&lt;strong&gt;永远不要低估好营销对烂产品的影响&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;把东西卖给估值300亿的公司，和做 300 亿的项目完全是两码事。当然，这不能怪人家眼拙，这是 MongoDB &lt;strong&gt;在营销上的一贯伎俩&lt;/strong&gt; —— 如果不仔细看原文，很难区分这个 300 亿指的是项目价值还是公司估值。&lt;/p&gt;
&lt;p&gt;在当下，MongoDB 在产品和技术上乏善可陈；在正确性，性能，功能以及各种维度上被 PostgreSQL 按在地上摩擦；在开发者中的流行度与口碑，以及DB-Engine 热度都不断下滑，MongoDB 公司本身也不赚钱，股价也刚经过大腰斩，亏损继续扩大；“营销” 也许是 MongoDB 唯一能拿出手的东西了。&lt;/p&gt;
&lt;p&gt;然而诚信是商业的根本，“好营销救不了烂芒果”，建立在谎言与忽悠之上的营销不会有好下场。今天我就来带大家看看，MongoDB 营销的锦绣丝绸被套里，填进去的都是些什么烂棉花。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;烂产品靠营销上位&#34;&gt;烂产品靠营销上位&lt;/h2&gt;
&lt;p&gt;图灵奖得主，数据库祖师爷 Stonebraker 老爷子在最近在 SIGMOD 2024 发表的名著级论文《&lt;a href=&#34;https://db.cs.cmu.edu/papers/2024/whatgoesaround-sigmodrec2024.pdf&#34;&gt;What goes around comes around&amp;hellip; And Around&lt;/a&gt;》中对此有过精辟的评价：“绝对不要低估好营销对&lt;strong&gt;烂产品&lt;/strong&gt;的影响 —— &lt;strong&gt;比如 MySQL 与 MongoDB&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/stonebraker.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个世界上有许多烂数据库 —— 但能用三寸不烂之舌把烂货成功吹成宝贝卖出去的，MongoDB 说自己是第一，MySQL 也只自认老二屈居人下。&lt;/p&gt;
&lt;p&gt;在所有关于 MongoDB 大忽悠的故事中，最让人印象深刻的是 LinkedIn 上的这篇《&lt;a href=&#34;https://mp.weixin.qq.com/s/e3_32Neoy5RVRBSozsa_7A&#34;&gt;MongoDB 3.2 —— 现由 PostgreSQL 强力驱动&lt;/a&gt;》 。
这篇文章的精彩之处在于，它是由 MongoDB 合作伙伴发出的血泪控诉：MongoDB 无视了自己合作伙伴的忠言劝告，拿了一个 PostgreSQL 伪装成自己的分析引擎，并在发布会上忽悠用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/mongo-powered-by-pg.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;作者作为 MongoDB 在分析领域的合作伙伴彻底灰心丧气，公开撰文发起控诉 —— “&lt;em&gt;MongoDB 的分析引擎是一个 PostgreSQL ，那你们真还不如直接去用 PostgreSQL&lt;/em&gt;”。&lt;/p&gt;
&lt;p&gt;像这样刻意造假忽悠的案例绝非个例，MongoDB 还在贬低同业产品自抬身价上有诸多记录。例如在官网文章《&lt;a href=&#34;https://www.mongodb.com/resources/compare/mongodb-postgresql/dsl-migrating-postgres-to-mongodb&#34;&gt;从PostgreSQL迁移到MongoDB&lt;/a&gt;》中，MongoDB 宣称自己是 “&lt;strong&gt;可扩展灵活的新一代现代通用数据库&lt;/strong&gt;”，
而 PostgreSQL 是 “&lt;strong&gt;复杂且容易出错的老旧单片关系数据库&lt;/strong&gt;”。完全无视了其实自己在整体的性能，功能，正确性，甚至自己标榜的应对大数据量的吞吐与可伸缩性上完全被 PostgreSQL 吊打的事实。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;功能被pgsql覆盖&#34;&gt;功能被PGSQL覆盖&lt;/h2&gt;
&lt;p&gt;JSON 文档确实是一个很受互联网应用开发者喜爱的特性。然而提供这一能力的数据库并非只有 MongoDB 。PostgreSQL 在十年前就已经提供了 SOTA 水平的 JSON 支持，并且仍然在不断演进改善。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/pg-jsonb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 的 JSON 支持是所有关系型数据库中最成熟与最早的（2012-2014），早于 SQL/JSON 标准或者说直接影响了 SQL/JSON 标准建立（2016）。
更重要的是，它的文档特性实现质量很高。相比之下 —— 同样在营销上号称支持 JSON 的MySQL，实际上是个简陋的 BLOB 换皮，&lt;a href=&#34;https://mp.weixin.qq.com/s/JgGCn9o2-DNPNqazPZXTtA&#34;&gt;跟 9.0 向量类型有一拼&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;数据库祖师爷 Stonebraker 表示过，带有可扩展类型的关系模型早已覆盖了数据库世界的各个角落，而 NoSQL 运动是数据库发展历史上的一段弯路：&lt;strong&gt;关系模型是向下兼容文档模型的&lt;/strong&gt;。
文档模型跟几十年前范式化 vs 反范式化的大讨论实质是一样的 —— 1.只有有任何非一对多的关系，就会出现数据重复；2. 用预计算的JOIN未必比现场JOIN更快；3 数据没有独立性。
用户可以假设自己的应用场景是独立 KV 式缓存访问，但哪怕只要添加一个稍微复杂一点的功能，开发者就会面临几十年前就讨论过的数据重复困境。&lt;/p&gt;
&lt;p&gt;PostgreSQL 在功能上是 MongoDB 的上位替代，所以可以对 MongoDB 的用例做到向下兼容 —— PostgreSQL 能做的MongoDB 做不了；而 MongoDB 能做的 PostgreSQL 也能做：你可以在PG中创建一个只有 &lt;code&gt;data JSONB&lt;/code&gt; 列的表，然后使用各种 JSON 查询与索引来处理这里的数据；如果你确实觉得花几秒钟建表仍然是一个额外负担，那么在生态中还有各种各样基于 PostgreSQL 提供 MongoDB API，甚至 MongoDB 线缆协议的解决方案。&lt;/p&gt;
&lt;p&gt;例如，FerretDB 项目通过中间件的方式在 PostgreSQL 集群上实现了 MongoDB 线缆协议兼容性 —— MongoDB 应用甚至都不需要更换客户端驱动，修改业务代码就能迁移到 PostgreSQL 上。
（另一被原位兼容的是 &lt;a href=&#34;https://mp.weixin.qq.com/s/c2TmMo0DflkSUli1BsLthQ&#34;&gt;SQL Server&lt;/a&gt; ）； PongoDB 则是直接在 NodeJS 客户端驱动侧将 PG 仿真成一个 MongoDB。
此外还有 &lt;code&gt;mongo_fdw&lt;/code&gt;，可以让 PG 从 MongoDB 中用 SQL 读取数据，&lt;code&gt;wal2mongo&lt;/code&gt; 将 PG 变更抽取为 BSON。&lt;/p&gt;
&lt;p&gt;例如 &lt;a href=&#34;/zh/blog/pg/ferretdb&#34;&gt;&lt;strong&gt;FerretDB&lt;/strong&gt;&lt;/a&gt; 项目通过中间件的方式在 PostgreSQL 集群上实现了 MongoDB 线缆协议兼容性 —— MongoDB 应用甚至都不需要更换客户端驱动，修改业务代码就能迁移到 PostgreSQL 上。（另一被原位线缆兼容的是 &lt;a href=&#34;/zh/blog/pg/pg-replace-mssql&#34;&gt;&lt;strong&gt;SQL Server&lt;/strong&gt; &lt;/a&gt;）；&lt;strong&gt;PongoDB&lt;/strong&gt; 则是直接在 NodeJS 客户端驱动侧将 PG 仿真成一个 MongoDB。此外还有 &lt;code&gt;mongo_fdw&lt;/code&gt;，可以让 PG 从 MongoDB 中用 SQL 读取数据，&lt;code&gt;wal2mongo&lt;/code&gt; 将 PG 变更抽取为 BSON。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ferret.webp&#34; src=&#34;/zh/blog/db/bad-mongo/ferret.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;在易用性上，各家云厂商都推出了开箱即用的 PG RDS 服务，想要开源自建也有 &lt;a href=&#34;https://pigsty.cc/zh/&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt; 这样开箱即用的解决方案，还有 Serverless 的 Neon 更是让PG上手门槛低到一行命令就能直接用起来。&lt;/p&gt;
&lt;p&gt;此外，相比于 MongoDB 使用的 SSPL 协议（已经不再是一个开源协议了），PostgreSQL 使用的类 BSD 开源协议显然要友善的多，PG可以在不需要软件授权费的情况下，提供更好的上位功能替代 —— Do more pay less! 不赢都难。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正确性与性能被吊打&#34;&gt;正确性与性能被吊打&lt;/h2&gt;
&lt;p&gt;对于数据库来说，&lt;strong&gt;正确性至关重要&lt;/strong&gt; —— 中立的分布式事务测试框架 JEPSEN 对 MongoDB 的正确性做过评测：结果可以用 “&lt;strong&gt;一塌糊涂&lt;/strong&gt;”形容（BTW：另一个难兄难弟是 &lt;a href=&#34;/zh/blog/db/bad-mysql&#34;&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当然，MongoDB 的强项就是面不改色心不跳的 “忽悠“，尽管 JEPSEN 提了这么多的问题，在 MongoDB 官网上，关于 Jespen 的评测是这么介绍的：”&lt;em&gt;到目前为止，因果一致性通常仅限于研究项目&amp;hellip;&amp;hellip;MongoDB 是我们所知的第一个提供实现的商业数据库之一&lt;/em&gt;“&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/jepsen-mongo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个例子再次体现了 MongoDB 在营销上的脸皮 —— 用一种极其精致的语言艺术，从一大坨 Bullshit 中精心挑选出了一颗未消化的花生米，而一笔带过在正确性/一致性上的各种致命硬伤。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一个有趣的点是&lt;strong&gt;性能&lt;/strong&gt;。作为一个专用的文档数据库，&lt;strong&gt;性能&lt;/strong&gt; 应当是其相对于通用数据库的杀手级特性。&lt;/p&gt;
&lt;p&gt;先前有一篇《《&lt;a href=&#34;https://mp.weixin.qq.com/s/V4V5eTWEb02NBIO5kfZt7A&#34;&gt;从 MongoDB 到 PostgreSQL 的大迁移&lt;/a&gt;》引发了 MongoDB 用户的关注，我的用户群里有位朋友 @flyingcrp 问了这样一个问题 —— 为什么PG上的一个插件或者功能点就能顶得上别人一个完整的产品？&lt;/p&gt;
&lt;p&gt;当然也不乏持相反观点的朋友 —— PG的 JSON 性能肯定比不过细分领域的专业产品 —— 一个专用数据库如果连性能都干不过通用数据库，那还活个什么劲儿？&lt;/p&gt;
&lt;p&gt;这个讨论引起了我的兴趣，这些命题成立吗？于是，我做了一些简单的检索与研究，结果发现了一些非常有趣且震惊的结论：例如，在 MongoDB 的看家本领 —— JSON 存储与检索性能上，PostgreSQL 已经吊打 MongoDB 了。&lt;/p&gt;
&lt;p&gt;来自 ONGRES 与 EDB 的一份 &lt;a href=&#34;https://info.enterprisedb.com/rs/069-ALB-339/images/PostgreSQL_MongoDB_Benchmark-WhitepaperFinal.pdf&#34;&gt;PG vs Mongo 性能对比评测报告&lt;/a&gt;  详细对比了两者在 OLTP / OLAP 上的性能，结果一目了然。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/mongo-pg-bench.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一份更近一点的&lt;a href=&#34;https://medium.com/@yurexus/can-postgresql-with-its-jsonb-column-type-replace-mongodb-30dc7feffaf3&#34;&gt;性能对比&lt;/a&gt; 着重测试了 JSONB / GIN 索引下的表现对比，得出的结论也是：PostgreSQL JSONB 列是 MongoDB 的替代。&lt;/p&gt;
&lt;p&gt;在当下，&lt;a href=&#34;/zh/blog/pg/pg-performence&#34;&gt;&lt;strong&gt;单机 PostgreSQL 性能&lt;/strong&gt;&lt;/a&gt; 可以轻松 Scale 到几十TB ～ 几百TB数量级，支撑几十万的点写入 QPS 与几百万的点查询 QPS。只用 PostgreSQL 支撑业务到百万日活 / 百万美元营收甚至直接 IPO 都毫无问题。&lt;/p&gt;
&lt;p&gt;老实说，MongoDB 的性能已经完全跟不上时代了，而它引以为傲的“内置分片”可伸缩性，&lt;a href=&#34;/zh/blog/pg/pg-scalability&#34;&gt;&lt;strong&gt;在软件架构与性能突飞猛进&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&#34;/zh/blog/cloud/bonus&#34;&gt;&lt;strong&gt;硬件遵循摩尔定律指数发展&lt;/strong&gt;&lt;/a&gt; 的当下显得毫无意义。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;流行度热度在衰退&#34;&gt;流行度热度在衰退&lt;/h2&gt;
&lt;p&gt;如果我们观察 DB-Engine 热度分数，不难看出过去十年中，拥有最大增长的两个数据库就是 PostgreSQL 与 MongoDB 。可以说这两者是移动互联网时代中数据领域的最大赢家。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine.png&#34; src=&#34;/zh/blog/db/bad-mongo/db-engine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但它们的区别在于，PostgreSQL 仍然在继续增长，甚至已经在 StackOverflow 全球开发者调研中，连续三年成为 &lt;a href=&#34;/zh/blog/pg/pg-in-2024&#34;&gt;&lt;strong&gt;最流行的数据库&lt;/strong&gt;&lt;/a&gt; 并势头不减赢麻了。而 MongoDB 在 2021 年开始就掉头向下开始过气。使用率，口碑，需求度都出现了停滞或扭头向下的发展趋势：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;sf-metric.png&#34; src=&#34;/zh/blog/db/bad-mongo/sf-metric.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 StackOverflow 年度全球开发者调研中，提供了主要的数据库用户的转移关系图。不难看出，MongoDB 用户的最大流出项就是 PostgreSQL。而会去使用 MongoDB 的往往是 MySQL 用户。&lt;/p&gt;
&lt;p&gt;MongoDB 和 MySQL 属于那种典型的 “面向初学者” 的数据库，针对小白做了许多无底线讨好性的妥协设计 —— 从统计中不难看出它们在新手中的使用率比专业开发者中更高。
与之相反的则是 PostgreSQL，在专业开发者中的使用比例要比新手中高得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/db/bad-mongo/transition.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;任何开发者都会经历初学者状态，我最初也是从 MySQL / Mongo 开始与数据库打交道的，但很多人就止步于此，而有追求的工程师则会不断学习进步，提升自己的品味与技术鉴别力，使用更好用、更强大的技术来更新自己的武器库。&lt;/p&gt;
&lt;p&gt;而趋势是：越来越多的用户在提升的过程中，从 MongoDB 和 MySQL 迁移到了上位替代 PostgreSQL 中。从而成就了新一代世界上最流行的数据库 —— PostgreSQL。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;风评已然臭不可闻&#34;&gt;风评已然臭不可闻&lt;/h2&gt;
&lt;p&gt;许多使用过 MongoDB 的开发者都对其留下了极其恶劣的印象，包括我自己。我上一次和 MongoDB 打交道是在 2016 年。我们部门先前用 MongoDB 搭建了一套实时统计平台，存放全网应用下载/安装/启动计数器，几 TB 规模的数据。我负责把这套在线业务的 MongoDB 迁移到 PostgreSQL。&lt;/p&gt;
&lt;p&gt;在这个过程中，我对 MongoDB 留下了&lt;strong&gt;糟糕的印象&lt;/strong&gt; —— 我花费了很多时间清洗 MongoDB 中模式错乱的垃圾数据。包括一些匪夷所思的问题（比如 Collection 里有整本的小说，SQL 注入的脚本，非法的零字符、Unicode码位与Surrogate Pair，各种花里胡哨的模式），堪称是一个史诗级的垃圾箱。&lt;/p&gt;
&lt;p&gt;在这个过程中，我也深入研究了 MongoDB 的查询语言，并将其翻译为标准 SQL。我甚至使用 Multicorn 写了一个 MongoDB 的外部数据源包装器 FDW 来做到这一点，顺便还水了篇 &lt;a href=&#34;https://vonng.com/pdf/unified_access_layer_with_postgresql_fdw.pdf&#34;&gt;关于 Mongo/HBase FDW 的论文&lt;/a&gt;。（比较巧的是，我那时候确实不知道 —— MongoDB 官方竟然也是这么用FDW干分析的！）&lt;/p&gt;
&lt;p&gt;总体来说，在这趟深度使用与迁移过程中，我对 MongoDB 感到非常失望，感觉到自己的时间被毫无意义的东西给浪费掉了。
当然后来我也发现，并不是只有我一个人有这种感受，在 HN 和 Reddit 上有无数关于 MongoDB 的嘲讽与吐槽：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/&#34;&gt;告别 MongoDB。迎接 PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.enterprisedb.com/postgres-plus-edb-blog/marc-linster/postgres-outperforms-mongodb-and-ushers-new-developer-reality&#34;&gt;Postgres 性能优于 MongoDB，并引领开发者新现实&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/errbit/errbit/issues/614&#34;&gt;MongoDB 已死。PostgreSQL 万岁 :)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/&#34;&gt;你永远不应该使用 MongoDB 的理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airpair.com/postgresql/posts/sql-vs-nosql-ko-postgres-vs-mongo&#34;&gt;SQL vs NoSQL 决斗。Postgres vs Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svs.io/post/31724990463/why-i-migrated-away-from-mongodb&#34;&gt;为什么我放弃了 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34;&gt;为什么你永远永远永远不该使用 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aptuz.com/blog/is-postgres-nosql-database-better-than-mongodb/&#34;&gt;Postgres NoSQL 比 MongoDB 更好吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.userlike.com/en/blog/2015/10/09/bye-by-mysql-and-mongodb-guten-tag-postgresql&#34;&gt;再见 MongoDB。你好 PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于这篇《MongoDB挑战PG》的新闻，HN评论区是这样的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hackernews.png&#34; src=&#34;/zh/blog/db/bad-mongo/hackernews.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于 MongoDB，Reddit 里的评论是这样的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;reddit-comment.png&#34; src=&#34;/zh/blog/db/bad-mongo/reddit-comment.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;能让开发者专门抽出时间写文章来骂它，MongoDB 的恶劣营销功不可没：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;blog.png&#34; src=&#34;/zh/blog/db/bad-mongo/blog.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;能让合作伙伴&lt;a href=&#34;https://mp.weixin.qq.com/s/e3_32Neoy5RVRBSozsa_7A&#34;&gt;破口大骂，吹哨揭发&lt;/a&gt;，我看 MongoDB 也是独此一家：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;shotgun.png&#34; src=&#34;/zh/blog/db/bad-mongo/shotgun.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mongodb没有未来&#34;&gt;MongoDB没有未来&lt;/h2&gt;
&lt;p&gt;Stonebraker 表示过，带有可扩展类型的关系模型早已覆盖了数据库世界的各个角落，而 NoSQL 运动是数据库发展历史上的一段弯路。
《种瓜得瓜》一文认为未来文档数据库的发展趋势是向关系数据库靠拢，重新把自己当初“鄙视”的 SQL / ACID 给加回来，以弥补自己与 RDBMS 的智力差距，最终趋同于 RDBMS 。&lt;/p&gt;
&lt;p&gt;但是问题就来了，如果这些文档数据库最终还是要变成关系数据库，那么为什么不直接用 PostgreSQL 关系数据库呢？难道用户可以指望 MongoDB 这孤家寡人的一家商业数据库公司，能够在这个赛道赶上整个 PostgreSQL 开源生态？—— 这个生态可是包含了几乎所有软件/云/科技巨头在内 —— &lt;strong&gt;能战胜一个生态的，只有另一个生态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 MongoDB 不断重新发明 RDBMS 世界的各种轮子，拙劣地跟在 PG 后面亦步亦趋补课，又同时把 PG 描述为 “复杂且容易出错旧的单片关系数据库” 时。PostgreSQL 已经成长为一个超出 MongoDB 想象的多模态超融合数据库，它已经通过几百个扩展插件成为&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;&lt;strong&gt;数据库领域的全能王霸主&lt;/strong&gt;&lt;/a&gt;。JSON 仅仅是其武库中的冰山一角，还有 XML，全文检索，向量嵌入，AIML，地理信息，时序数据，分布式，消息队列，FDW，以及二十多种存储过程语言支持。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ecosystem.jpg&#34; src=&#34;/zh/blog/db/bad-mongo/ecosystem.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 PostgreSQL ，你可以做到许多超出想象的事情：你可以在数据库内发 HTTP 请求，用XPATH 解析，用 Cron 插件调度写爬虫，原地入库后用机器学习扩展分析，调用大模型创建向量Embedding 用图扩展构建知识图谱，用包括JS在内的二十多种语言编写存储过程，并在库内拉起 HTTP 服务器对外 Serve。这种匪夷所思的能力是 MongoDB 以及其他“纯”关系型数据库难望其项背的。&lt;/p&gt;
&lt;p&gt;MongoDB 根本没有与 PostgreSQL 在产品、技术上堂堂正正一战的能力，因此只能在营销上使阴招，暗搓搓的下绊子，但这种做法只会让更多人看清它的真面目。&lt;/p&gt;
&lt;p&gt;作为一个上市公司，MongoDB 的股价也已经经历了一次大腰斩，而且亏损持续扩大。产品与技术上的落后，以及运营上的不诚信，都让人怀疑它的未来。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;stock.png&#34; src=&#34;/zh/blog/db/bad-mongo/stock.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我认为任何开发者，创业者，投资人都不应该把赌注押在 MongoDB 上
—— &lt;strong&gt;这确实是一个没有希望，也没有未来的数据库&lt;/strong&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL可以替代微软SQL Server吗？</title>
      <link>/zh/blog/pg/pg-replace-mssql/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-replace-mssql/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-replace-mssql/featured_hu02aa61ae1d9de35cbe238d2676170cb9_346897_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;许多人对于 PostgreSQL 生态已经发展到什么阶段并没有一个直观的印象 —— 除了 &lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;吞噬数据库世界&lt;/a&gt;，囊括万物的扩展生态之外，PostgreSQL 还可以直接从内核层面，替换掉 Oracle，SQL Server 与 MongoDB，当然 MySQL 就更不在话下了。&lt;/p&gt;
&lt;p&gt;当然要说主流数据库中，暴露风险最高的是谁，那毫无疑问是&lt;strong&gt;微软的 SQL Server 了&lt;/strong&gt;。MSSQL 被替代的是最彻底的 —— 直接在 WireProtocol 层面被替代了。而主导这件事的是 AWS，亚马逊云服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;babelfish&#34;&gt;Babelfish&lt;/h2&gt;
&lt;p&gt;虽然我一直吐槽云厂商&lt;a href=&#34;/zh/blog/cloud/redis-oss&#34;&gt;&lt;strong&gt;白嫖开源&lt;/strong&gt;&lt;/a&gt;，但我承认这种策略是极为有效的 ——
AWS 拿着开源的 PostgreSQL 和 MySQL 内核，一路杀穿数据库市场，拳打 Oracle ，脚踢微软，成为数据库市场份额毫无争议的一哥。
而这两年 AWS 更是玩了一招釜底抽薪，开发整合了一个 BabelfishPG 的扩展插件，提供“&lt;strong&gt;线缆协议&lt;/strong&gt;”级别的兼容性。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;marketshare.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/marketshare.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;线缆协议兼容&lt;/strong&gt;，就是指客户端什么都不用改，依然访问 SQL Server 1433 端口，使用 MSSQL 的驱动与命令行工具（sqlcmd）访问加装 BabelfishPG 的集群就可以了。
而且更神奇的是，你依然可以使用 PostgreSQL 的协议语言语法，从原来的 5432 端口访问，和 SQL Server 的客户端并存 —— 这就给迁移带来了极大的便利条件。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wiltondb&#34;&gt;WiltonDB&lt;/h2&gt;
&lt;p&gt;当然 Babelfish 并不是一个单纯的 PG 扩展插件，它对 PostgreSQL 内核进行了少量修改与适配。并通过四个扩展插件分别提供了 TSQL 语法支持，TDS 线缆协议支持，数据类型以及其他函数支持。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wiltondb.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/wiltondb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在不同的平台上编译打包这样的内核与扩展并不是轻松容易的一件事，因此 WiltonDB —— 一个 Babelfish 的发行版就做了这件事，将 BabelfishPG 编译打包为 EL 7/8/9 与 Ubuntu 系统，甚至 Windows 下可用的 RPM / DEB / MSI 包。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pigsty-v3&#34;&gt;Pigsty v3&lt;/h2&gt;
&lt;p&gt;当然，只有 RPM / DEB 包，距离提供生产级的服务还依然差得太远，而在最近发布的 Pigsty v3 中，我们提供了将原生 PostgreSQL 内核替换为 BabelfishPG 的能力。&lt;/p&gt;
&lt;p&gt;创建这样一套 MSSQL 集群，所需的不过是在集群定义中修改几个参数。然后依然是一件傻瓜式拉起 —— 类似主从搭建， 扩展安装，参数优化，用户配置，HBA规则设定，甚至是服务流量分发，都会自动根据配置文件一键拉起。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-conf.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/pigsty-conf.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在使用实践上，你完全可以把 Babelfish 集群当作一套普通的 PostgreSQL 集群来使用与管理。唯一的区别就是客户端在使用 5432 PGSQL 协议的基础上，还可以选择是否要使用 1433 端口上的 TSQL 协议支持。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;sqlcmd.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/sqlcmd.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如，您可以轻松通过配置，将原本固定指向主库连接池 6432 端口的 Primary 服务重定向到 1433 端口，从而实现故障切换下的无缝 TDS / TSQL 流量切换。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mssql.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/mssql.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这意味着原本属于 PostgreSQL RDS 的能力 —— 高可用，时间点恢复，监控系统，IaC管控，SOP预案，甚至无数的扩展插件都可以嫁接融合到 SQL Server 版本的内核之上。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何迁移&#34;&gt;如何迁移？&lt;/h2&gt;
&lt;p&gt;PostgreSQL 生态除了有Babelfish这样给力的内核与扩展，还有着繁荣的工具生态。如果要想从 SQL Server 或 MySQL 迁移到 PostgreSQL ，我强烈推荐一款杀手级迁移工具：&lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/ref/mssql.html&#34;&gt;&lt;strong&gt;PGLOADER&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这款迁移工具傻瓜化到了离谱的程度，在理想的情况下，你只需要两个数据库的&lt;strong&gt;连接串&lt;/strong&gt;，就可以完成迁移了。对，真的是一行多余的废话都没有。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pgloader mssql://user@mshost/dbname pgsql://pguser@pghost/dbname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了 MSSQL 兼容内核扩展，又有了迁移工具，存量的 SQL Server 搬迁会变的非常容易。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;除了-mssql还有&#34;&gt;除了 MSSQL，还有……&lt;/h2&gt;
&lt;p&gt;除了 MSSQL，PostgreSQL 生态还有旨在替代 Oracle替代：PolarDB O 与 IvorySQL，旨在替代 MongoDB 的 FerretDB 与 PongoDB。以及三百多个提供各式各样功能的扩展插件。实际上，几乎整个数据库世界都在受到 PostgreSQL 的冲击 —— 除了那些与 PostgreSQL 错开生态位（SQLite，DuckDB，MinIO），或者干脆就是 PostgreSQL 套壳（Supabase，RDS，Aurora/Polar）的数据库。&lt;/p&gt;
&lt;p&gt;我们最近发布的开源 RDS PostgreSQL 方案 —— Pigsty 最近就支持了这些 PG 替换内核，允许用户在一套 PostgreSQL 部署中提供 MSSQL，Oracle，MongoDB，Firebase，MongoDB 的兼容性替代能力。不过限于篇幅，那就是后面几篇要介绍的内容了。&lt;/p&gt;
&lt;p&gt;除了 MSSQL，PostgreSQL 生态还有旨在替代 Oracle替代：PolarDB O 与 IvorySQL，旨在替代 MongoDB 的 FerretDB 与 PongoDB。&lt;a href=&#34;/zh/docs/pgext/list&#34;&gt;以及三百多个提供各式各样功能的扩展插件。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/ecosystemjpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际上，几乎整个数据库世界都在受到 PostgreSQL 的冲击 —— 除了那些与 PostgreSQL 错开生态位（SQLite，DuckDB，MinIO），或者干脆就是 PostgreSQL 套壳（Supabase，RDS，Aurora/Polar）的数据库。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dbengine.png&#34; src=&#34;/zh/blog/pg/pg-replace-mssql/dbengine.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们最近发布的开源 RDS PostgreSQL 方案 —— Pigsty 最近就支持了这些 PG 替换内核，允许用户在一套 PostgreSQL 部署中提供 MSSQL，Oracle，MongoDB，Firebase，MongoDB 的兼容性替代能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/kernels.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过限于篇幅，那就是后面几篇要介绍的内容了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 谁整合好DuckDB，谁赢得OLAP世界</title>
      <link>/zh/blog/pg/pg-duckdb/</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-duckdb/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-duckdb/featured_hu02aa61ae1d9de35cbe238d2676170cb9_228138_640x0_resize_q75_catmullrom.jpg" width="640" height="320"/>]]>
        
        &lt;p&gt;在 《PostgreSQL正在吞噬世界中》 一文中，我曾经抛出过这个问题：&lt;strong&gt;谁会最终统一数据库世界？&lt;/strong&gt;。我认为是 PostgreSQL 生态与各种各样的扩展插件 —— 而我的判断是，要想征服 OLAP 这个最大也是最显著的数据库独立王国，这个分析扩展一定与 &lt;strong&gt;DuckDB&lt;/strong&gt; 有关。&lt;/p&gt;
&lt;p&gt;PostgreSQL 一直以来都是我最喜欢的数据库，然而我第二喜欢的数据库在这两年中从 Redis 变为了 DuckDB。DuckDB 是一个非常小巧且强大的 &lt;strong&gt;嵌入式&lt;/strong&gt; OLAP 分析数据库，在分析性能、易用性上都做到了极致水平，并且在所有数据库中有着仅次于 PostgreSQL 的可扩展性。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;extensibility.webp&#34; src=&#34;/zh/blog/pg/pg-duckdb/extensibility.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如两年前开展的向量数据库扩展插件赛马一样，当下 PG 生态进行的扩展竞赛已经开始围绕 DuckDB 进行 —— “&lt;em&gt;&lt;strong&gt;谁更好地在PG中整合DuckDB，谁就赢得OLAP世界的未来&lt;/strong&gt;&lt;/em&gt;”。尽管已经有许多玩家在摩拳擦掌，但 DuckDB 官方亲自下场，毫无疑问宣告着这场竞争即将进入白热化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;duckdbolap的新兴挑战者&#34;&gt;DuckDB：OLAP的新兴挑战者&lt;/h2&gt;
&lt;p&gt;DuckDB 是由 Mark Raasveldt 和 Hannes Mühleisen 两位数据库研究员在荷兰阿姆斯特丹的国家数学与计算机科学研究所（Centrum Wiskunde &amp;amp; Informatica, CWI）开发的。CWI 不仅仅是一个研究机构，可以说是分析型数据库领域发展背后的幕后推手与功臣，是列式存储引擎与向量化查询执行的先驱。现在你能看到的各种分析数据库产品 ClickHouse，Snowflake，Databricks 背后，都有 CWI 的影子。顺便一提，Python之父龟叔也是在 CWI 时创建 Python 语言的。&lt;/p&gt;
&lt;p&gt;然而，现在这些分析领域的先锋们自己亲自下场来做分析数据库了，他们选择了一个非常好的时机与生态位切入，搞出了 &lt;strong&gt;DuckDB&lt;/strong&gt; 来。&lt;/p&gt;
&lt;p&gt;DuckDB 的起源来自作者们对数据库用户痛点的观察：数据科学家主要使用像 Python 与 Pandas 这样的工具，不怎么熟悉经典的数据库。经常被如何连接，身份认证，数据导入导出这些工作搞的一头雾水。那么有没有办法做一个简单易用的嵌入式分析数据库给他们用呢？ —— 就像 SQLite 一样。&lt;/p&gt;
&lt;p&gt;DuckDB 整个数据库软件源代码就是一个头文件一个c++文件，编译出来就是一个独立二进制，数据库本身也就一个简单的文件。使用兼容 PostgreSQL 的解析器与语法，简单到几乎没有任何上手门槛。尽管 DuckDB 看上去非常简单，但它最了不起的一点在于 —— &lt;strong&gt;简约而不简单，分析性能也是绝冠群雄&lt;/strong&gt;。例如，在 ClickHouse 自己的主场 ClickBench 上，有着能够吊打东道主 ClickHouse 的表现。&lt;/p&gt;
&lt;p&gt;另外非常值得称道的一点是，因为作者的薪水由政府税收支付，他们认为将自己的工作成果免费提供给任何人是他们对社会的责任。因此，DuckDB 是在非常宽松的 MIT 许可证下发布的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我认为 DuckDB 的崛起是必然的：一个有着顶尖性能表现，而使用门槛低到地板，还开源免费的数据库，想不火都难。在 StackOverflow 2023 年的开发者调研中，DuckDB 以 0.61% 的使用率第一次进入“最流行的数据库” 榜单中（第29名，倒数第四），结果仅仅一年过去，在 2024 年度开发者调研中，它就实现了 2.3 倍的流行度增长，前进到（1.4%）与 ClickHouse （1.7%）非常接近的流行度。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;used-prof-2023-2024.png&#34; src=&#34;/zh/blog/pg/pg-duckdb/used-prof-2023-2024.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时，DuckDB 也在用户中攒下的极好的口碑，在开发者中受欢迎与喜爱的程度（69.2%）在主要数据库中仅次于 PostgreSQL  （74.5%）。如果我们观察 DB-Engine 的热度趋势，更是不难看出它在 2022 年中开始一飞冲天的狂飙增长态势 —— 虽然没法跟 PostgreSQL 这种数据库比，但目前甚至已经超过了所有 NewSQL 数据库产品的热度分了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;db-engine-duckdb.png&#34; src=&#34;/zh/blog/pg/pg-duckdb/db-engine-duckdb.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;duckdb的短板与其中的机遇&#34;&gt;DuckDB的短板与其中的机遇&lt;/h2&gt;
&lt;p&gt;DuckDB 是一个可以独立使用的数据库，但更是一个嵌入式的分析数据库。嵌入式有好处也有坏处 —— DuckDB 尽管有着最强分析性能，但它最大的短板就在于薄弱的数据管理能力 —— 也就是数据科学家们不喜欢的那些东西 —— ACID，并发访问，访问控制，数据持久性，高可用，数据库导入导出，等等等，而这恰好是经典数据库的长处，也是企业级分析系统的核心痛点之一。&lt;/p&gt;
&lt;p&gt;可以预期的是，市面上一定会很快出现一系列的 DuckDB 套壳产品来解决这里的摩擦与GAP。正好比当年 Facebook 开源了 KV 数据库 RocksDB ，无数 “新的数据库” 给 RocksDB 套了一层 SQL 解析器，就号称自己是新一代数据库去圈钱了 —— Yet another SQL Sidecar for RocksDB。
向量检索库 hnswlib 开源后，无数 “专用向量数据库” 给它套了薄薄一层皮，就去市场上圈钱了。然后搜索引擎 Lucene 和下一代替代 Tantivy 开源之后，又有无数“全文检索数据库”来给他们套壳贩卖。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ecosystem.jpg&#34; src=&#34;/zh/blog/pg/pg-duckdb/ecosystem.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的事情已经在 PostgreSQL 生态中发生了。在其他数据库产品和公司还没来得及反应之前，PG 生态已经有五个玩家下场赛马了，包括 ParadeDB 的 &lt;code&gt;pg_lakehouse&lt;/code&gt;，国内个人开发者李红艳编写的 &lt;code&gt;duckdb_fdw&lt;/code&gt;，CrunchyData 的 &lt;code&gt;crunchy_bridge&lt;/code&gt;， Hydra 出品的 &lt;code&gt;pg_quack&lt;/code&gt;；以及目前 MotherDuck 原厂也跑过来做 PG 扩展了 —— &lt;code&gt;pg_duckdb&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二届pg扩展竞速比赛&#34;&gt;第二届PG扩展竞速比赛&lt;/h2&gt;
&lt;p&gt;这不禁让我想起了过去一年中，PG生态里向量数据库扩展的例子。AI爆火之后，PG 生态里就涌现出了至少六款向量数据库扩展（ &lt;code&gt;pgvector&lt;/code&gt;，&lt;code&gt;pgvector.rs&lt;/code&gt;，&lt;code&gt;pg_embedding&lt;/code&gt;，&lt;code&gt;latern&lt;/code&gt;，&lt;code&gt;pase&lt;/code&gt;，&lt;code&gt;pgvectorscale&lt;/code&gt;），并在你追我赶的赛马中卷出了新高度。最后 &lt;code&gt;pgvector&lt;/code&gt; 在以 AWS 为代表的厂商大力投入加持之下，在其他数据库比如 Oracle / MySQL / MariaDB 姗姗来迟的糊弄版本出来之前，就已经把整个专用向量数据库细分领域给摧毁荡平了。&lt;/p&gt;
&lt;p&gt;那么，谁会成为 PG OLAP 生态的 PGVECTOR 呢？我个人的判断还是原厂吊打同人，尽管 &lt;code&gt;pg_duckdb&lt;/code&gt; 才刚刚新鲜出炉，甚至连 v0.0.1 版本都还没发布。但从其架构设计上，已经不难判断，它大概率会是最后的赢家。实际上这个生态赛道才刚刚展开，就立即有收敛的趋势了：&lt;/p&gt;
&lt;p&gt;原本 Fork Citus 列存扩展的 Hydra （YC W22），在尝试构建 &lt;code&gt;pg_quack&lt;/code&gt; 感受到 DuckDB 震撼后，立刻抛弃原有的引擎和 MotherDuck 合作，搞出来了 &lt;code&gt;pg_duckdb&lt;/code&gt;。融合了 PG 生态经验的 Hydra 与 DuckDB 原厂弄的扩展，可以直接在数据库内丝滑地读取 PG 数据表，并使用 DuckDB 引擎进行计算，并且可以直接从文件系统/S3 上读取 Parquet / IceBerg 格式的文件，实现湖仓的效果。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hydra-pg-quack.png&#34; src=&#34;/zh/blog/pg/pg-duckdb/hydra-pg-quack.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样是 YC 投的初创数据库公司 ParadeDB （YC S23），在尝试了自己用 Rust 构建类似的分析产品 pg_analytics 并取得了不俗的成绩之后，也选择改换了路线，基于 DuckDB 打造 pg_lakehouse 扩展。当然，创始人 Phillipe 在 pg_duckdb 刚刚官宣之后也立刻宣布投降，准备在 &lt;code&gt;pg_duckdb&lt;/code&gt; 的基础上进行进一步的开发而不是当竞品。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;paradedb.png&#34; src=&#34;/zh/blog/pg/pg-duckdb/paradedb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;国内个人开发者李红艳开发的 &lt;a href=&#34;/zh/docs/pgext/olap/duckdb_fdw&#34;&gt;&lt;code&gt;duckdb_fdw&lt;/code&gt;&lt;/a&gt; 是另一条另辟蹊径的道路。不是直接利用 PG的存储引擎接口，而是直接用外部数据源包装器（FDW）的基础设施，将 PG 和 DuckDB 对接到了一起。这引发了官方亲自下场吐槽，将其作为反例批判，也许是 MotherDuck 亲自下场的一个动机：“我还在构思伟大蓝图，如何融合PG与Duck的力量，你小子动作也太快了，得给你一点官方震撼看看”。&lt;/p&gt;
&lt;p&gt;至于 CrunchyData 搞的 &lt;code&gt;cunchy_bridge&lt;/code&gt; ，或者其他数据库公司搞的闭源套壳扩展，我个人感觉是很难有出息的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当然，作为 PostgreSQL 发行版 Pigsty 的作者，我的策略始终是 —— 你们赛你们的马，反正所有这些扩展我都会打包并分发给用户，让用户自己选择与决策。就好比当初向量数据库崛起的时候一样，我就把 &lt;code&gt;pgvector&lt;/code&gt; ，&lt;code&gt;pg_embedding&lt;/code&gt;，&lt;code&gt;pase&lt;/code&gt;，&lt;code&gt;pg_sparse&lt;/code&gt; 等等这几个最有前途的扩展打包分发出去。不管谁是最后的胜利者，反正 PG 和 Pigsty 都是摘桃子的赢家。&lt;/p&gt;
&lt;p&gt;天下武功，唯快不破，在 Pigsty v3 中已经实装了这三个最有前途的扩展插件： &lt;a href=&#34;/zh/docs/pgext/olap/pg_duckdb&#34;&gt;&lt;code&gt;pg_duckdb&lt;/code&gt;&lt;/a&gt;，&lt;a href=&#34;/zh/docs/pgext/olap/pg_lakehouse&#34;&gt;&lt;code&gt;pg_lakehouse&lt;/code&gt;&lt;/a&gt;，以及 &lt;a href=&#34;/zh/docs/pgext/olap/duckdb_fdw&#34;&gt;&lt;code&gt;duckdb_fdw&lt;/code&gt;&lt;/a&gt;，当然还有 &lt;code&gt;duckdb&lt;/code&gt; 二进制本体，开箱即用，让用户体验一个 PostgreSQL 包打天下，OLTP / OLAP 双冠全能王合体，真正 HTAP 的快乐。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: StackOverflow 2024调研：PostgreSQL已经杀疯了</title>
      <link>/zh/blog/pg/pg-is-no1-again/</link>
      <pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-is-no1-again/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-is-no1-again/featured_hu3f62c073e83d13b0c8ed4870aebfcb33_572876_640x0_resize_catmullrom_3.png" width="640" height="468"/>]]>
        
        &lt;p&gt;&lt;a href=&#34;https://survey.stackoverflow.co/2024/&#34;&gt;2024 年 StackOverflow 全球开发者调研结果&lt;/a&gt;已经新鲜出炉，
来自 185 个国家与地区的 6 万名开发者给出了高质量的问卷反馈。当然，作为数据库老司机，我最关注的还是 “Database” 这一项调研结果：&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;流行度&#34;&gt;流行度&lt;/h2&gt;
&lt;p&gt;首先是数据库流行度：&lt;a href=&#34;https://survey.stackoverflow.co/2024/technology#1-databases&#34;&gt;专业开发者中的数据库使用率&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一项技术使用者占总体的比例，就是&lt;strong&gt;流行度&lt;/strong&gt;。它的含义是：过去一年有多少比例的用户使用了这项技术。流行度代表过去一年的积累使用，是存量指标，也是最核心的事实指标。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://survey.stackoverflow.co/2024/technology#1-databases&#34;&gt;&lt;img alt=&#34;database-used-prof.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/database-used-prof.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在使用率上，PostgreSQL 在专业开发者中以 51.9% 的惊人使用率连续三年蝉联榜首，首次过半！相比第二名的 MySQL (39.4%) 的差距进一步拉开到了 12.5 个百分点（去年这个差距是 8.5 个百分点）。&lt;/p&gt;
&lt;p&gt;如果我们考虑全体开发人员的数据库使用情况，那么 PostgreSQL 是第二年成为世界上最流行的数据库，以 48.7% 的使用率拉开第二名 MySQL (40.3%) 8.4 个百分点（去年为 4.5 个百分点）&lt;/p&gt;
&lt;p&gt;如果我们综合过去八年的问卷数据调查结果，将流行度画在一张散点图上，不难看出 PostgreSQL 几乎一直保持着高速线性增长。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://demo.pigsty.cc/d/sf-survey/stackoverflow-survey?orgId=1&amp;viewPanel=45&#34;&gt;&lt;img alt=&#34;trend-used-prof.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/trend-used-prof.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个榜单上，有显著增长的数据库除了 PostgreSQL 还有 SQLite，DuckDB，Supabase，BigQuery，Snowflake，Databricks SQL。
这里面，BigQuery，Snowflake，以及 Databricks 属于大数据分析领域的当红炸子鸡。SQLite 和 DuckDB 属于独特的，不与关系型数据库冲突的嵌入式数据库生态位，Supabase 则是封装 PostgreSQL 作为底层核心的后端开发平台。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;used-prof-2023-2024.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/used-prof-2023-2024.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而其他的的数据库，或多或少都受到了 PostgreSQL 崛起带来的冲击。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;喜爱度与需求度&#34;&gt;喜爱度与需求度&lt;/h2&gt;
&lt;p&gt;其次是数据库的喜爱度（红色）与需求度（蓝色）：&lt;a href=&#34;https://survey.stackoverflow.co/2024/technology#2-databases&#34;&gt;全体开发者在过去一年最喜爱与最想要使用的数据库&lt;/a&gt;，按需求度排序。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;database-admire-desire.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/database-admire-desire.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所谓“&lt;strong&gt;口碑&lt;/strong&gt;”（红点），喜爱度（Loved）或欣赏度（Admired），指的是有多少比例的用户愿意继续使用此项技术，这是一个年度的“留存率”指标，可以反映用户对一项技术的看法与评价，代表了未来的增长空间。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;trend-loved.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/trend-loved.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在口碑上，PostgreSQL 依然以 74.5% 的喜爱比例第二年蝉联榜首，这里特别值得注意的是两个数据库，在过去一年中，SQLite 与 DuckDB 的喜爱度出现显著上涨，而 TiDB 的喜爱度则出现了惊人的下滑（64.33 到 48.8）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;而需求者占总体的比例，就是需求率（Wanted），或渴望度（Desired），在上图中用红点表示。它的含义是，接下来一年有多少比例的用户会实际选择使用此项技术，代表了未来一年的实际增长动能。因此在 SO 这张图上，也是按照需求度来排序的。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;loved-2023-2024.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/loved-2023-2024.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这一项上，PostgreSQL 是第三年蝉联榜首了，而且以惊人的优势与后来者拉开距离。也许是最近两年因为受到向量数据库需求的拉动，PostgreSQL 的需求量出现了一个非常惊人的激增，从 2022 年的 19% 飙升至 2024 年的 47%。而 MySQL 的需求度，则甚至被 SQLite 反超，从2023年的第二名跌落至第三。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;trend-wanted.png&#34; src=&#34;/zh/blog/pg/pg-is-no1-again/trend-wanted.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;需求量较为精确地反应着明年的增量（用户显式回答：“下一年中我计划使用此种数据库”），因此这里突增的需求度会很快反应到明年的流行度上来。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;PostgreSQL 已经连续第二年以无可争议的碾压性优势，成为了全世界最流行，最受喜爱，需求量最高的数据库。&lt;/p&gt;
&lt;p&gt;并且根据过去八年的趋势，以及未来一年的需求预测来看，已经没有其他力量能够撼动这一点。&lt;/p&gt;
&lt;p&gt;曾经是 PostgreSQL 最大竞争对手的 MySQL 已然颓势尽显，而其他数据库也都在不同程度上受到了 PostgreSQL 的冲击。
能继续保持增长的数据库要么与 PostgreSQL 错开了生态位，要么干脆就是改头换面或者协议兼容的 PostgreSQL。&lt;/p&gt;
&lt;p&gt;PostgreSQL 将成为数据库世界的 Linux 内核，而 PostgreSQL 世界的发行版内战即将拉开序幕。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 让PG停摆一周的大会：PGCon.Dev 2024 参会记</title>
      <link>/zh/blog/pg/pgcondev-2024/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pgcondev-2024/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pgcondev-2024/featured_hu0a21caae51d34f0e019bb67160944854_248465_640x0_resize_q75_catmullrom.jpg" width="640" height="480"/>]]>
        
        &lt;p&gt;PGCon.Dev 的前身是 PGCon —— 最知名的 PostgreSQL Hacker 年度聚会，也可以说是决定 PostgreSQL 未来的一场会。从 2007 年成立以来，一直都是在加拿大渥太华举办至今。
这次会议有些特殊，原来的主办者 Dan 交班给下一届大会组织者，举办地点也转移到了温哥华市的 SFU 港区活动中心，算是新班组开门红第一次大会，自然更为隆重。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;全都来参会了谁还在写代码&#34;&gt;全都来参会了，谁还在写代码？&lt;/h2&gt;
&lt;p&gt;有多隆重呢？PG 核心组的 Peter Eisentraut 在会后做了一个统计，在这次 PGCon.Dev 期间 PostgreSQL 一次代码提交都没有发生，出现了&lt;a href=&#34;https://peter.eisentraut.org/blog/2024/06/04/how-engaging-was-pgconfdev-really&#34;&gt;二十年来持续时间最长的停摆&lt;/a&gt; —— 整整六天半！为啥，因为开发者全都来参会啦！&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;intro.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/intro.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑到前几次中断都发生在二十年前的项目早期……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我已经拥抱 PostgreSQL 十年了，但线下现场参加全球 PG Hacker 们的会议还是第一次，所以我非常感谢组织团队为组织这次活动所做的工作。&lt;/p&gt;
&lt;p&gt;PGCon.Dev 2024 已经于5月31日晚正式结束，理论上本文章本应在大会闭幕时写就，不过在紧接着探索温哥华与班夫国家公园的旅途中，我确实在高密度的旅途中把这件事不厚道地搁置了 那么今天就补上参会的见闻与记录吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第零天扩展生态峰会&#34;&gt;第零天：扩展生态峰会&lt;/h2&gt;
&lt;p&gt;大会的第零天是领导层会议，我注册了下午的 Extension Ecosystem Summit 扩展生态峰会。&lt;/p&gt;
&lt;p&gt;说起来，这个扩展生态峰会也许跟我还有点关系。两个月前我写了一篇文章《&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt;》，主题是 PostgreSQL 的繁荣扩展生态是其独一无二的特点与成功的关键要素。
写完后将其翻译成了英文《&lt;a href=&#34;/zh/blog/pg/pg-eat-db-world/&#34;&gt;Postgres is eating the database world&lt;/a&gt;》发到了 &lt;a href=&#34;https://pigsty.cc/zh/blog/&#34;&gt;Pigsty 博客&lt;/a&gt;， &lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;Medium&lt;/a&gt; 与 &lt;a href=&#34;https://news.ycombinator.com/item?id=39759539&#34;&gt;HackNews&lt;/a&gt; 上，总共有几十万的阅览量，基本应该覆盖了整个 PG 社区。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;&lt;img alt=&#34;ecosystem.jpg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/ecosystem.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此前，扩展机制的重要性并没有达成共识，即使在 PG 社区与一些资深成员的眼中，关于扩展他们只是觉得 PostGIS 和 PGVector 好像很不错 —— 前者是地理空间数据库的事实标准，后者是AI领域当红炸子鸡 —— 向量数据库的砸盘掀桌者。
但 PG 生态中强大的扩展绝不仅仅只有这两个，在抛出了这个极为繁荣的 PG 扩展生态 Landscape 后，立即引起了社区成员的极大兴趣与关注，很快关于PG扩展的讨论发酵了起来。&lt;/p&gt;
&lt;p&gt;在这次扩展峰会之前，PG 社区已经举办了&lt;a href=&#34;https://www.eventbrite.com/e/postgres-extension-ecosystem-mini-summit-tickets-851127263557&#34;&gt;六次迷你扩展峰会&lt;/a&gt;对此事进行了密集的讨论，六位主讲嘉宾兼主持人在最近两个月中，从不同的角度介绍了关于扩展生态的建设工作，并阐述了对 PG 扩展生态发展的愿景，&lt;a href=&#34;https://www.youtube.com/playlist?list=PL11N188AYb_aT6ulbJfrQJJziWb012jG3&#34;&gt;会议的视频回放&lt;/a&gt;可以在 Youtube 上看到。&lt;/p&gt;
&lt;p&gt;在这次大会中，有许多与扩展生态，可扩展性有关的议题，甚至还有一个专门的扩展峰会，也许确实是有点关系的。这场扩展峰会分了上下两场，每场都有几个 Topic，大家挑选感兴趣的主题参与。
我挑了 David Wheeler 的 Binary Packing 主题分会参与讨论，另外四个参与者是 PGDG Yum 仓库维护者 Devrim，Debian 仓库维护者大法师 Tomasz Rybak，以及 Neon 的 PG 主要贡献者 Andreas Scherbaum。都是些老前辈，好在我也算是 YUM/APT 仓库的建设者/维护者，能实质参与到讨论中。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;extension-summit.jpg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/extension-summit.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上半场，来自 Temob 的 David 一直想做一个 PGXN v2，作为 PG 生态扩展分发的标准，搞一些 OCI 构建扩展的花活。当然，现有事实标准的维护者 Devrim 和 Tomasz 肯定是不乐意的。我支持这两位老爷子，毕竟我做的是 PG 发行版，内核组的活儿跟我直接关系不大，但 YUM/APT 仓库的负责人跟我的关系最紧密，RPM / Deb 包分发扩展已经是一种相当成熟可靠的方式了，整 OCI 这些我个人觉得意义不大。&lt;/p&gt;
&lt;p&gt;下半场，我参加了 Omnigres 创始人 Yurii Rashkovskii 主持的 Extension in Core 分会场，讨论了关于扩展目录结构，元数据，命名冲突，版本控制，二进制分发的一些想法。并且和负责 PG RPM 仓库的 Devrim 老爷子聊了很多关于扩展的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pgcondev-2024/devrim-keith.gif&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在扩展峰会后，Devrim 打出 “Keith粉丝团” 的 Slogan&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一天主题分享与酒吧社交&#34;&gt;第一天：主题分享与酒吧社交&lt;/h2&gt;
&lt;p&gt;PGCon.Dev 最核心的部分当然是大会议题，在  &lt;a href=&#34;https://mp.weixin.qq.com/s/4t1thBCDVS8y9dHiOxPZaA&#34;&gt;PG大会2024开幕&lt;/a&gt; 中我已经选定了感兴趣的主题，绝大多数分享都没有让我失望 —— 比起国内各种 XX 大会无聊的产品宣介，无关痛痒的技术细节与架构分享，PGConf.Dev 的分享要有趣且扎实得太多了。&lt;/p&gt;
&lt;p&gt;5月28号 / 周二举行了 PostgreSQL 开发者与领导层闭门会议，以及  &lt;a href=&#34;https://mp.weixin.qq.com/s/C0YyE52KbLLbnG1C2FqGRg&#34;&gt;PGCon.Dev 扩展生态峰会&lt;/a&gt;。大会正式的议程在周三，也就是 29 号开始。&lt;/p&gt;
&lt;p&gt;开场由 &lt;a href=&#34;https://jkatz05.com/&#34;&gt;Jonathan Katz&lt;/a&gt; 与 &lt;a href=&#34;https://postgresql.life/post/melanie_plageman/&#34;&gt;Melanie Plageman&lt;/a&gt; 主持，前者是 PG 核心组七人之一，AWS RDS 的首席产品经理；后者是新近成为 PG 提交者，来自微软的罕有的女性PG开发者。当然，开幕式上最精彩的一幕，就是发现了著名 &lt;code&gt;xz&lt;/code&gt; 后门的 &amp;ldquo;英雄开发者&amp;rdquo; Andres Freund 被拉上了台，披上了超级英雄的披风。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;andres-hero.jpeg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/andres-hero.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;开幕式之后就开始了常规 Session Track，目前还没有会议的视频放出，但我相信以加拿大的办事效率，“用不了多久” 就能在 Youtube 上看到了。大部分的 Session 都是三选一的。我选了几个场次，下面是摘要：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;将扩展的边界推向新边疆&#34;&gt;将扩展的边界推向新边疆&lt;/h3&gt;
&lt;p&gt;第一场来自 Yurii ， “将 PG 扩展的边界推向新边疆”。讨论的内容其实是 PostgreSQL 应该提供什么样的扩展 API ？ PostgreSQL 有着极佳的可扩展性，但这一套 API 已经是十几年前 9.x 留下的了。尤里的提议旨在解决现有扩展机制的一些问题。比如：如何同时安装两个不同版本的扩展插件？如何避免一部分扩展插件安装后需要重启数据库的问题？如何让PG像管理数据一样管理扩展？如何处理扩展的依赖关系？&lt;/p&gt;
&lt;p&gt;Yurii 和 Viggy 创办了 &lt;a href=&#34;https://omnigres.com/&#34;&gt;Omnigres&lt;/a&gt; ，旨在让 PostgreSQL 直接成为一个应用开发平台（比如直接在数据库里跑 HTTP 服务器等任务）。为了做到这一点，他们为 PostgreSQL 设计的一套新的扩展 API 与管理机制。我认为一些改进很有创新性，是 PG 内核扩展机制的前沿探索实践。&lt;a href=&#34;https://slides.omnigr.es/pushing-boundaries-pgconfdev2024/1&#34;&gt;PDF地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;yurii-extension.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/yurii-extension.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我和 Viggy 与 Yurii 聊的非常愉快，Yurii 手把手带我编译安装试用了一把 Omni。而我也准备在下一个 Pigsty 的版本中，就加入对 Omni 系列扩展的支持，让这个强大的应用开发框架开箱即用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;数据库中的无政府状态&#34;&gt;数据库中的无政府状态&lt;/h3&gt;
&lt;p&gt;第二场分享来自学术界（CMU），师从网红教授 Andy Pavlo 的阿比盖尔·金，主题为：数据库中的无政府状态 —— &lt;a href=&#34;https://abigalekim.github.io/assets/pdf/Anarchy_in_the_Database_PGConfDev2024.pdf&#34;&gt;数据库管理系统可扩展性的调查与评估&lt;/a&gt;。我对这个主题非常感兴趣，因为 Pigsty 将 PG可扩展性为首要价值主张，收录了 255 个扩展插件，而 Kim 的这个研究带来了一些有趣的发现。&lt;/p&gt;
&lt;p&gt;例如，&lt;strong&gt;PostgreSQL 是可扩展性最强的 DBMS&lt;/strong&gt;，在全部十项扩展点上支持其中九种（紧随其后的是 DuckDB，和PG同为我最看好的两款DBMS）。根据 Kim 的统计，PG 生态有 375+ 可用扩展，远远甩开其他数据库一个数量级。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;kim-extensibility.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/kim-extensibility.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;更有价值的是，Kim 定量分析了这些扩展之间的兼容性水平，得到了一个兼容性矩阵，并有一些有趣的发现 —— 例如，最为强大的 TimescaleDB 和 Citus 最容易与其他扩展发生冲突。而这样的信息对于用户与发行版维护者来说是非常有价值的。&lt;/p&gt;
&lt;p&gt;我跟 Kim 聊天时打趣说，你的这个研究大大的好 —— 可以有理有据地用数据说话，宣称 PostgreSQL 可扩展性天下无敌了。&lt;a href=&#34;https://abigalekim.github.io/assets/pdf/Anarchy_in_the_Database_PGConfDev2024.pdf&#34;&gt;PDF在线地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;postgresql是如何被误用与滥用的&#34;&gt;PostgreSQL是如何被误用与滥用的&lt;/h3&gt;
&lt;p&gt;下午的第一场，我听了来自 CrunchyData 的 Karen Jex 的分享，这是少有的来自用户（一位DBA，还是女性DBA，确实非常罕见），而不是开发者的分享。Karen 分享了一堆 PG 初学者会犯的可笑错误。Karen 的分享并没有什么我不知道的新知识，但确实让我确信了 —— 世界哪儿的初学者都一样，都会犯这些可笑的错误。但这样的视角对于 PG Hacker 来说确实是很新鲜的，很多大佬都听得津津有味。&lt;/p&gt;
&lt;h3 id=&#34;postgresql与人工智能生态&#34;&gt;PostgreSQL与人工智能生态&lt;/h3&gt;
&lt;p&gt;下午的第二场，Bruce Momjian 分享了这个主题。Bruce 是 PGDG 发起人，从一开始到现在一直都是 PG 核心委员，也是中国各种 PG 会议的老熟人与常客了。&lt;/p&gt;
&lt;p&gt;我本来以为分享的内容会是介绍一下PG生态的向量数据库扩展，或者类似 PGML，PG4ML 这样的机器学习扩展插件，结果竟然是如何利用 PostgreSQL 的多维数组与查询，实现神经网络的推理与训练。这样的把戏很好玩儿，但我很早也折腾过，没啥实用价值。&lt;/p&gt;
&lt;p&gt;和 Bruce 吃饭聊天的时候也提到这个话题，Bruce 解释说，Jonathan Katz 为了介绍PG生态的向量数据库扩展 PGVector，需要一个话题来作为综述引子，于是就把 Bruce 拉壮丁过来灌水了，哈哈… &lt;a href=&#34;https://momjian.us/main/writings/pgsql/AI.pdf&#34;&gt;PDF地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;bruce-ai.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/bruce-ai.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我看看，Bruce在偷偷写什么代码？竟然是 ArgParser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会后和 Bruce 聊了很多有趣的的话题，往年国内 PG 技术大会都喜欢请 Bruce 过来，或者远程做一个开幕分享。Bruce 说他很非常想再来中国，不过现在国际形势冲突加剧，美国大使馆发布的中国旅游风险等级太高，他也不敢过来了，让人遗憾。&lt;/p&gt;
&lt;h3 id=&#34;构建pb级别的postgresql部署&#34;&gt;构建PB级别的PostgreSQL部署&lt;/h3&gt;
&lt;p&gt;下午的第三场，我听了 Chris Travers 的分享：他们原来用 ElasticSearch 存数据，保留30天，数据量1PB，体验极差，基本上处于不可用状态，也难以维护。于是他们改用了一个水平分片的 PostgreSQL 集群完美地解决了问题 —— 总共存储了 10 PB 的数据。&lt;/p&gt;
&lt;p&gt;通常来说出于各种因素，单机 PostgreSQL 的舒适区上界在几十TB ～ 几百TB 的数量级，PB 量级的部署我只听说过一例。即使是水平分片集群，10PB 量级也是极其罕见的了。尽管依然是中规中矩的分表/分布式实践，但数据量级确实让人印象深刻。&lt;a href=&#34;https://www.pgevents.ca/events/pgconfdev2024/sessions/session/135/slides/30/Bagger_Talk%20(3).pdf&#34;&gt;PDF地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;临时加场当数据库遇上新硬件&#34;&gt;临时加场：当数据库遇上新硬件&lt;/h3&gt;
&lt;p&gt;毫不夸张地说，这是本场最佳演讲，没有之一，也是我听过所有现场演讲中最富有激情与感染力的。演讲人 Margo Seltzer 是 UBC 的教授，以前是哈佛的教授，美国国家工程院院士，是数据库石破天祖师爷的亲传弟子，BerkeleyDB 的作者，她的老公也很有名，是 BSD / WiredTiger / nvi 的作者 Keith Bostic。&lt;/p&gt;
&lt;p&gt;Margo 的演讲极具激情与感染力，并一针见血地指出了数据库领域面临的几个核心问题。例如，数据库的瓶颈已经不再是磁盘的IO性能，而是主内存的速度瓶颈。而硬件领域的趋势 ——  &lt;strong&gt;HBM&lt;/strong&gt;，&lt;strong&gt;CXL&lt;/strong&gt; 也许是解决这些问题的答案，但具体怎么做，那就是在座的各位 PG Hacker 需要面对的挑战了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;margo.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/margo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在各种国内会议听多了院士，教授念经一样的分享报告，Margo 院士的演讲风格给我带来了耳目一新的感觉，并极大地感染鼓舞了我。大会视频放出后，我强烈建议各位可以听一听她的演讲。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;酒吧社交活动&#34;&gt;酒吧社交活动&lt;/h3&gt;
&lt;p&gt;Margo 的分享结束后便是大会的官方 Social Event，在会场一街之隔的 Waterfront 车站里的 Rogue Kitchen &amp;amp; Wetbar， 位置极好 —— 窗外就是温哥华地标，太平洋海景。&lt;/p&gt;
&lt;p&gt;大家可以随意交流，结识新老朋友。我和许多人都聊了很多有趣的话题，比如 Devrim，Tomasz，Yurii，Keith 等等等等。同样作为发行版/RPM维护者，我和 Devrim 老爷子尤其详谈甚欢，许多积存已久的问题也得到了想要的答案。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;social-bar.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/social-bar.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;很多人都是老朋友了，难得相见一面，都聚在一起聊天。两杯啤酒下肚，许多人都打开心扉。再加上在场的都是 PG 同好，陌生人只要对个眼神也可以很轻松地聊起来。&lt;/p&gt;
&lt;p&gt;于是在三四个小时的觥筹交错中，我和在场的 PG Hacker 基本都混了个熟脸。餐后 Melanie 喊我们去玩桌游，但我的英语做个专业演讲还行，但还没好到和 Native Speaker 玩猜词游戏和狼人杀的程度，甚是遗憾。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二天的主题与活动&#34;&gt;第二天的主题与活动&lt;/h2&gt;
&lt;h3 id=&#34;postgresql-线程模型&#34;&gt;PostgreSQL 线程模型&lt;/h3&gt;
&lt;p&gt;第一天晚上的社交活动预热完，第二天大家就热情熟络得多了。今天的分享主题比较值得一提的是 “&lt;strong&gt;多线程 PostgreSQL&lt;/strong&gt;”，成功做到了座无虚席。大家都很关注 Heikki 发起的这场讨论。Heikki 介绍了PG进程模型与线程模型的利与弊，详细实现路径与当前进展。&lt;/p&gt;
&lt;p&gt;线程模型的收益有不少：更便宜的连接（等于内置连接池），共享的关系缓存，计划缓存，动态调整共享内存区域的能力，修改配置无需重启，Vacuum可以更加激进，运行中的 Explain Analyze，方便地限制每条连接的内存使用。但以 Tom Lane 为首的反对的声音也不小：这样可能会引入大量 Bug，丧失多进程模型隔离性的优势，以及 —— 引入大量的不兼容性，许多扩展都需要针对新的模型重写修改。&lt;/p&gt;
&lt;p&gt;Heikki 提出了目标与相当详细周密的计划供在座的 Hacker 们评审 —— 在五到七年内，完成到线程模型的转换，最终目标是没有中间状态。有趣的是，Heikki现场在 PPT 里引用了最大反对者 Tom Lane 的一段评论：“从历史上看，我认为这会是一场大灾难，导致大量代码悄无声息的崩坏，让事情脱离我们的控制”。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;heikki-multithread.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/heikki-multithread.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然被当场揶揄，但这一次 Tom Lane 现场听着也是慈祥微笑，并没有直接表示反对。而最大的反对声音不是来自 Tom Lane，而是扩展维护者，一位维护了好几个扩展插件的老爷子问到扩展兼容性怎么办？（主要是分配/使用内存的方式）Heikki 表示只能要求这些扩展作者在五年左右的过渡阶段中国呢里重写修改适配新的模型。气得这位老爷子直接愤而离场出去了。&lt;/p&gt;
&lt;p&gt;鉴于线程模型对现有扩展生态的巨大冲击，我对这件事并不看好。我也与 Heikki 和 Tom lane 以及其他 Hacker 聊了一下关于线程模型的观点，总的来说，社区持谨慎观望态度。目前的进展也仅仅是在 PG 17 中重构了与 fork exec 有关的调用代码，并标记出使用的全局变量以便后续修改。即使真得发生，那也至少是 PG 2x 的事了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;走廊社交与大厅闲聊&#34;&gt;走廊社交与大厅闲聊&lt;/h3&gt;
&lt;p&gt;第二天议题场次比第一天稍微水了一点点，所以更多的人参加的是  “Hallway Track”，就是在走廊大厅里和别人聊天。作为一个 i 人，我其实蛮不擅长这种场合的，但现场热烈的氛围很快就感染了我。再加上昨天晚上的酒吧社交环节大家也混了个脸熟，所以也算轻车熟路了。&lt;/p&gt;
&lt;p&gt;在这样的场合中，想要开启一场和陌生人的对话，其实非常简单。你也不需要主动搭讪或者咋样，就只要眼神接触一下，对话就自然而然地触发了。给我的感觉和打 RPG 游戏一样，按下空格触发 NPC 对话。然后自我介绍一下，说说自己干嘛的，这不是就顺便把 Pigsty 广告到 PG 社区的每一个角落啦？&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hallway-track.jpg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/hallway-track.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为第一次现场参加 PGCon.Dev 的人，我很惊讶地发现自己有着于与新人不匹配的知名度与关注度。有近半的参会者看到我的胸牌 Vonng / Pigsty 就认识我了 —— 主要还是归功于我之前写的那篇 PG 大爽文《&lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;PostgreSQL is eating the Database world&lt;/a&gt;》，Jonathan 跟我吐槽到说最近这篇文章天天出现在他的时间线上，整个 PG 社区的人基本上都看过了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;collect.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/collect.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拍照基集：Tom, Bruce, Jonathan, Andres, Robert Hass, Devrim, Scherbaum, Heikki, Keith,&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然说起社交，最简单粗暴的诀窍就是礼多人不怪 —— 我准备了一盒胸针，PostgreSQL 的吉祥物 Logo &lt;strong&gt;Slonik&lt;/strong&gt;，镀金的，还带个小亚克力盒子。我给每一个和我聊天的 PG Hacker 都送了一个，这个胸针成为了本次大会备受欢迎的抢手货。好多人都在胸前或者会牌上别上了，而没拿到的人就在问：咦你们这个在哪里拿的，是贡献者奖励吗？&lt;/p&gt;
&lt;p&gt;Bruce 对这个胸针爱不释手，说：“哎呀这个精巧的徽章真是太可爱了，一看就不是那种便宜货”（但其实镀金其实不贵的），然后我就又送了他一个。总之，礼多人不怪，靠着 Pigsty，PG爽文，和 Slonik 小胸针，也算是在 PG 大会上吃开了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;小聚多国社区会餐&#34;&gt;小聚：多国社区会餐&lt;/h3&gt;
&lt;p&gt;中午，瀚高做东，把美国PG社区，欧洲PG社区，还有日本PG社区的几位头面参会者拉到一起聚餐，一家温哥华的广东菜馆。图中从左前开始逆时针顺序分别是，瀚高北美研究院的 Grant Zhou，瀚高创始人苗健，欧洲PG用户组/ Neon 的 Andreas Scherbaum，有PG核心组/ 美国EDB 的 Bruce Momjiam，荣誉退休的前核心组成员 / pgEdge 的 Jan Wieck，制作各种PG贡献者硬币，社区周边的 Mark Wong，以及日本社区的 Tatsuro Yamada （山田達郎）与 Kyotaro Horiguchi （堀口恭太郎），最后是我。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;lunch.jpeg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/lunch.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;在饭桌上我们聊了各种各样的话题，坐在我边上的两位日本 PG 社区友人很有趣，堀口桑是一位 PG 核心贡献者，在 WAL 复制 / 多字节字符串处理上有很多贡献，还是 pg_hint_plan 的作者。另一位山田桑也是 PG 贡献者，对 Pigsty 很感兴趣，在本次大会上进行了题为 《&lt;a href=&#34;https://www.pgevents.ca/events/pgconfdev2024/sessions/session/62-advice-is-seldom-welcome-but-efficacious/&#34;&gt;索引建议不受待见，但很管用&lt;/a&gt;》的分享。&lt;/p&gt;
&lt;p&gt;Mark Wong 也是 PG 社区的主要贡献者，PGUS 的组织者，开发了一系列 PG 监控扩展，但更有趣的是他还负责 PG 社区的周边，贡献者硬币，衣服，贴纸，还有这个特别可爱的毛线团小象也是他自己手工缝制的，让人爱不释手。据说他上次做的公仔在 PG Conf US 被人顺走了哈哈，所以这次看得可牢了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;elephant.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/elephant.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bruce 是 PG 中文社区的老朋友了，上面介绍过了；来自德国的 Andreas Scherbaum 是欧洲 PG 大会的组织者，我们一起参加了扩展峰会的 Binary Distribution 讨论，也邀请我们到时候去参加；瀚高是唯一一个出现在 PGCon.Dev 的中国数据库厂商，苗总从山东飞过来参加，也跟我们分享了一些国产数据库的故事与密辛。&lt;/p&gt;
&lt;p&gt;在回会场的路上，我和 Jan Wieck 聊了很多，他是老一代光荣退休的 PG 核心组成员，也是 PL/pgSQL，PL/TCL，外键，视图，规则系统，TOAST，BGWriter，统计进程这些耳熟能详的PG核心功能的作者，他也是 Slony 的作者。路上我说我也想当一个 Major Contributor，他便与我分享了他参与 PG 贡献的故事：银行职员，工作需要用到数据库，就慢慢开始一步一步变成核心贡献者了 —— 他勉励我更多地参与到 PostgreSQL 贡献来，PG社区的未来就看你们年轻人的了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;让pg社区参与更有包容性&#34;&gt;让PG社区参与更有包容性&lt;/h3&gt;
&lt;p&gt;第二天下午与昨天一样，有一个无需三选一的特殊场次，主题是&lt;strong&gt;社区建设&lt;/strong&gt;，由 Robert Hass 主持。3 位新晋的 PG 提交者轮流分享他们成为提交者的历程，与遇到的挑战和问题，分别是：泽田正彦，阿米特·兰格特，梅兰妮·普拉格曼。总体上社区参与面临的几个主要挑战是：非英语母语者的参与问题，时区差异，带有情绪的电子邮件沟通。&lt;/p&gt;
&lt;p&gt;Robert Hass 在会后的博客中提到：&lt;em&gt;&lt;strong&gt;他真的很想看到更多来自印度与日本的人参与到 PG 的高级职位中来，因为这两个国家有着庞大的开发者社区，却没有核心组成员，高级职位代表性不足&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;robert-hass.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/robert-hass.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;说老实话，听着有些五味杂陈，因为在包容性的议题中没有提到&lt;strong&gt;中国&lt;/strong&gt;，而强调的是日本与印度。但这也是确实是没有办法的事情，中国在国际社区参与上，确实做的很拉垮。中国有三四百款国产数据库，其中很多都是基于 PG 魔改换皮套壳的，但这么多公司与用户，总共也只出了一个 PG 贡献者（ ——拓数派的 Richard Guo，原来在 Pivotal，今年刚晋为 Committer）。&lt;/p&gt;
&lt;p&gt;这次 PGCon.Dev ，中国过来参会的人，除了瀚高的四位就是我了，加起来正好一只手数过来。说来遗憾，中国技术界对 PostgreSQL 的认知水平与采纳程度仍然远远落后于全球，在生态上可能有10到15年的差距。要说语言挑战与障碍的问题，印度日本的英语口音也有不少沟通障碍，要说种族歧视啥的更是无稽之谈 —— 在场的华人面孔可绝对不算少。&lt;/p&gt;
&lt;p&gt;那么到底是为什么呢？如果你选择关门自嗨，土法炼钢造手搓数据库，白嫖社区，不参与到全球社区中来，那么别人自然也不会待见你。我希望我的参与能够 “Bootstrap” 并改善这一情况，让更多中国的 PG 用户、开发者，产品、开源项目，被全球社区所熟知，接纳，承认，让中文世界的用户也有更多的社区参与。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;闪电演讲&#34;&gt;闪电演讲&lt;/h3&gt;
&lt;p&gt;第二天下午的最后一个议程叫做： &lt;strong&gt;闪电演讲&lt;/strong&gt;。顾名思义，就是一个人只给5分钟，超时就立刻轰下来。大家都很干练，11 个主题整个才花了 45 分钟。在酒吧相谈甚欢的 Keith 分享了一些关于 PG Monitor 的改进，Peter Eisentraut 分享了关于 SQL 标准的跟进。当然，要说我最喜欢的分享，当属 Devrim Gündüz  关于 PG RPMs 的闪电演讲。昨天酒吧喝酒的时候，他神秘兮兮地说明天要放个大招，震撼全场，果不其然，在5分钟里讲完了 75 页的 PPT，气氛非常欢快～。&lt;/p&gt;
&lt;p&gt;说起 PostgreSQL，尽管这是个开源软件，但也许 99% 的用户都是直接使用 “官方” 编译好的成品二进制软件而不是从源码编译。Pigsty 作为一个数据库发行版，我自己维护了34个 RPM 扩展插件，但还有一百多个扩展，和各种生态工具都是直接来自 Devrim 老爷子维护的 PGDG 官方仓库的，我深深知道这项工作的不易。 Devrim 在用自己的信用，为这个世界上最先进，最流行的数据库软件质量把好最后一道关口。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;devrim.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/devrim.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Devrim 要是想干坏事，那破坏力说不定比 xz 要大多了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Devrim 老爷子是一个很有意思的人，土耳其人，现居伦敦，还兼职酒吧 DJ 打碟，身上有一个 PostgreSQL Logo 的纹身，是 PGDG RPM 仓库的维护者。我跟他聊了一个多小时，了解了 PGDG 仓库的方方面面，讨论了许多问题。比如，一个扩展想弄进 PGDG 仓库里，一般需要什么条件，是什么流程。Devrim 说他会去关注 PGXN ，以及社区讨论，像最近最近大火的 &lt;code&gt;pgvector&lt;/code&gt; 向量数据库扩展就是有人推荐给他，然后就收录进去了。我就白了一眼说：你看看&lt;a href=&#34;https://github.com/pgvector/pgvector/issues/76&#34;&gt;推给你的那个人莫不是我&lt;/a&gt;…，哈哈哈哈。&lt;/p&gt;
&lt;p&gt;说起来很有趣，在最近发布 &lt;a href=&#34;https://mp.weixin.qq.com/s/CzNUNAVnafO-hMCMdfxgZA&#34;&gt;Pigsty v2.7&lt;/a&gt; 中，我发现我维护的34个扩展里有4个 &lt;code&gt;pgsql-http&lt;/code&gt;, &lt;code&gt;pgsql-gzip&lt;/code&gt;, &lt;code&gt;pg_net&lt;/code&gt;, &lt;code&gt;pg_bigm&lt;/code&gt; 被纳入了进入了 PGDG 官方仓库。我一和 Devrim 提起这个事，他就笑眯眯地跟说我：我跑到你的 Pigsty 网站&lt;a href=&#34;/zh/docs/reference/extension/&#34;&gt;扩展列表&lt;/a&gt;上扒拉了一圈，发现有几个不错的，就弄进官方仓库了。我就问，我打包的那些不错的 RUST 扩展有没有机会弄进官方仓库里？他马上义正严辞地表态 —— 这些 Go 和 Rust 异端插件想也别想！但反正你不是自己弄了个 YUM / APT 软件仓库专门放这些扩展吗？&lt;/p&gt;
&lt;p&gt;我和 Devrim 聊得非常尽兴。最后我答应当一个 &lt;strong&gt;PG扩展猎手&lt;/strong&gt;，发掘新的 PG 插件。如果觉得不错就交给他，收纳进 PG 的官方仓库里。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三天unconference&#34;&gt;第三天：Unconference&lt;/h2&gt;
&lt;p&gt;如果说 PGCon.Dev 最精髓特色的节目是什么，那一定是 &lt;strong&gt;Unconference&lt;/strong&gt; （自组织会议）。Unconference 没有预设的议程，而是由参与者在现场决定讨论的主题。&lt;/p&gt;
&lt;p&gt;大会第三天全天的议程都是 Unconference，Joseph Conway 主持了 Unconference Organization 议程，愿意讲的人上去提交自己想介绍的主题，然后大家投票。当然我也上去提交了一个 Built-in Prometheus Metrics Exporter 的主题。&lt;/p&gt;
&lt;p&gt;提交完后，每个议题主讲人上台简介自己的 Topic，并尽可能合并同类项，我的话题不出意料地被合入 Jeremy 发起的 Observability 主题里了。接下来就是大家投票选出感兴趣的演讲。排名前三的主题是： 多线程（42票），可观测性（35票），增强社区参与（35票）。  最后选出的主题如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;unconference.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/unconference.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;unconference2.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/unconference2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;看得出来，大家都非常重视可观测性上的特性。在 PostgreSQL 可观测性上，我确实是当仁不让的专家，&lt;code&gt;pg_exporter&lt;/code&gt; 就是我写的。所以我抛出来的议题是：为 PostgreSQL 添加一个第一方的监控扩展，内置 Prometheus 监控端点，直接通过 HTTP 对外暴露监控指标。&lt;/p&gt;
&lt;p&gt;提出这个问题的原因是，&lt;code&gt;pg_exporter&lt;/code&gt; 虽好，但毕竟是外部组件，会引入额外的管理复杂度；而且如果 PostgreSQL 处于崩溃恢复无法接受新连接的状态，外部组件也难以知道内部的状态，只有将这个功能做成内核扩展，才能真正完整地提取这些信息。&lt;/p&gt;
&lt;p&gt;实现的方案是采用类似 &lt;code&gt;bgw_replstatus&lt;/code&gt; 扩展使用的后台工作进程，监听一个额外端口，通过 HTTP 对外暴露监控指标。内容上基本上也以我编写的 &lt;code&gt;pg_exporter&lt;/code&gt; 作为蓝本，除了少量系统关键指标外，所有指标都通过一张 Collector 配置表进行定义。&lt;/p&gt;
&lt;p&gt;这个想法得到了一些在座 PG Hacker 的关注。EDB ，CloudNativePG 的一些开发者也开始评估 &lt;code&gt;pg_exporter&lt;/code&gt; 能否直接用在他们的发行版中，作为监控解决方案的一部分。现场所有对可观测性感兴趣的成员成立了一个 Observability SIG，并通过邮件列表进行后续的讨论。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;议题关于对龙芯提供支持&#34;&gt;议题：关于对龙芯提供支持&lt;/h3&gt;
&lt;p&gt;在大会最后两天中，我还与几位 PG Hacker 讨论了一些关于国产芯片，国产操作系统，中文字符集相关的中国特色数据库议题。&lt;/p&gt;
&lt;p&gt;在之前发出的问题征集中，PG分会的类总提出了一个很好的建议，能不能让 PGDG 全球仓库支持龙芯 LoongArch 架构？国产芯片和国产操作系统厂商很乐意赞助这样的构建环境。带着这个问题，我询问了 RPM 仓库维护者 Devrim 老爷子；以及 Debian 侧的 Tomasz Rybak （备注：PGDG APT 仓库的维护者是 Christoph Berg，但 Tomasz 维护了 Debian 仓库中许多 PostgreSQL 相关的软件包），看看有没有可行性。&lt;/p&gt;
&lt;p&gt;不过可惜的是，目前龙芯架构对于PG社区构建二进制使用的 OS 还没有提供支持 —— 例如 EL 系的 CentOS 7，Rocky 8，Rocky 9 ，以及 Debian 10/11/12 都无法在龙芯上运行。所以 Devrim 老爷子的回答是 No：而且构建的 Pipeline 必须在他们自己的机器和环境上可以跑起来，所以赞助云服务器的方式可能是走不通的。Tomasz 对于这个问题持开放态度，因为据说后面龙芯可能会支持 Debian13 ，那么就可以考虑把一些 PG 包的支持加进来。&lt;/p&gt;
&lt;p&gt;总的来说，让 PG 官方 RPMs 支持龙芯架构估计没戏，但 APT 还是有可能的。但要龙芯支持主流开源社区 Linux OS Distro，这个事才有可能；如果是龙芯 + 一堆国产操作系统，那想都不要想，100% 没戏。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;议题关于服务端中文字符集支持&#34;&gt;议题：关于服务端中文字符集支持&lt;/h3&gt;
&lt;p&gt;Jeremy Schneider 在本次大会带来一场关于字符排序规则（ Collation） 的分享，我非常关注。这个分享抛出了一系列 Collate 规则变化导致的问题。说实话，我以前也专门&lt;a href=&#34;https://pigsty.cc/zh/blog/admin/collate/&#34;&gt;写过一篇文章研究过这个问题&lt;/a&gt;，最终结论与 Jeremy 高度一致，应该用 &lt;code&gt;C.UTF8&lt;/code&gt; ，我一直是这么做的，并制定开发规约，也在发行版中强制默认配置推行这一点，而 Jeremy 的分享，则详细阐述了&lt;a href=&#34;https://www.pgevents.ca/events/pgconfdev2024/sessions/session/95/slides/26/pgcon24_collation.pdf&#34;&gt;不这么做会导致哪些坑爹的结果&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;会后在大厅里，我和 Jeremy 进一步地讨论了这个问题，核心组的 Peter Eisentraut 也参与了进来。Jeremy 问我中国用户是怎样使用字符集与 Collation 的，我说新应用大体上都用的是 &lt;code&gt;C.UTF8&lt;/code&gt;，通常只有一些政企单位和传统行业的老系统才会去折腾服务端中文字符集。&lt;/p&gt;
&lt;p&gt;但这里确实有一个略尴尬的问题，例如 2023 年底中国发布的国标 GB18030 对信息系统提出了两条强制性要求：产品可以正确输入、输出、处理 GB18030 强制部分规定的全部汉字字符；产品可以正确识别 GB18030 强制性部分规定的全部汉字字符对应的编码。&lt;/p&gt;
&lt;p&gt;PostgreSQL 可以在&lt;strong&gt;客户端&lt;/strong&gt;支持 GB 18030 编码，也提供了 &lt;code&gt;convert_to&lt;/code&gt; 将字符串编码为 GB18030 编码字节串的编码方案支持，但是不支持直接在服务端使用此编码（支持的是 &lt;code&gt;EUC_CN&lt;/code&gt;），也没有通过 ICU 提供对 GB 18030 的支持。此外，我还向 Peter 提出了 &lt;code&gt;convert_to&lt;/code&gt; + &lt;code&gt;gb18030&lt;/code&gt; 大概有 20个新增汉字映射有误的问题。Jeremy 和 Peter 都表示会进一步跟进研究，看看怎么解决这些问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;闭幕式&#34;&gt;闭幕式&lt;/h3&gt;
&lt;p&gt;自组织会议聊完后，大会也进入到了最后的尾声。 Jonathan Katz 与 Melanie Plageman 主持了闭幕式。确实是一场非凡的大会，让人意犹未尽。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;closing.jpeg&#34; src=&#34;/zh/blog/pg/pgcondev-2024/closing.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;明年的 PGCon.Dev 2025 也会在加拿大举办，可能在温哥华，多伦多，渥太华或蒙特利尔四者之一。今年摸清楚了大会的调性与流程，我想明年可以去上台分享一个关于 Pigsty 或者 PG 可观测性的话题了。&lt;/p&gt;
&lt;p&gt;顺带一提，参会的效果确实很明显，参会后，Pigsty 的海外下载 CDN 流量（这还只是一家云上的一部分）出现显著增长，打掉了我接近大几百G 的流量。更多的国际友人了解到了国内的 PostgreSQL 数据库发行版 Pigsty，哈哈。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-traffic.png&#34; src=&#34;/zh/blog/pg/pgcondev-2024/pigsty-traffic.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参会后来自海外的 CDN 流量有了一波暴增&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;大会的 PPT 一部分已经&lt;a href=&#34;https://www.pgevents.ca/events/pgconfdev2024/sessions/&#34;&gt;开放下载&lt;/a&gt;。当然，对 PostgreSQL 与 Pigsty 感兴趣的朋友也可以微信搜索 &lt;code&gt;pigsty-cc&lt;/code&gt; 加群直接下载或参与讨论。以及，下面是一些 PGCon.Dev 相关的博客与文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://andreas.scherbaum.la/post/2024-06-14_postgresql-development-conference-2024-review/&#34;&gt;Andreas Scherbaum PostgreSQL Development Conference 2024 - Review&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/PgCon_2024_Developer_Meeting&#34;&gt;PgCon 2024 Developer Meeting&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rhaas.blogspot.com/2024/06/2024pgconfdev-and-growing-community.html&#34;&gt;Robert Haas: 2024.pgconf.dev and Growing the Community&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://peter.eisentraut.org/blog/2024/06/04/how-engaging-was-pgconfdev-really&#34;&gt;How engaging was PGConf.dev really?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.highgo.ca/2024/06/11/pgconf-dev-2024-shaping-the-future-of-postgresql-in-vancouver/&#34;&gt;Cary Huang: PGConf.dev 2024：在温哥华塑造 PostgreSQL 的未来&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/C0YyE52KbLLbnG1C2FqGRg&#34;&gt;PGCon.Dev 扩展生态峰会小记 @ 温哥华&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/4t1thBCDVS8y9dHiOxPZaA&#34;&gt;PG大会2024开幕，温哥华饭搭子驴友团呢？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 为什么PostgreSQL是未来数据库的事实标准？</title>
      <link>/zh/blog/pg/pg-for-everything/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-for-everything/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-for-everything/featured_hu0adb0cba2e58006a0b8485a8554ea3ed_782106_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="366"/>]]>
        
        &lt;p&gt;如今，软件开发中最大的趋势之一，是 PostgreSQL 正在成为事实上的数据库标准。已经有一些博客阐述了如何做到 万物皆用 PostgreSQL，但还没有多少文章能解释这一现象背后的原因。（更重要的是，为什么这件事很重要） —— 所以我写下了这篇文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文作者为 Ajay Kulkarni，TimescaleDB CEO ，原文发表于 TimescaleDB 博客：《&lt;a href=&#34;https://www.timescale.com/blog/postgres-for-everything/&#34;&gt;Why PostgreSQL Is the Bedrock for the Future of Data&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;译者冯若航，PostgreSQL 专家，开源 RDS PG —— Pigsty 作者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;01 PostgreSQL 正成为事实上的数据库标准&lt;/li&gt;
&lt;li&gt;02 万物都开始计算机化&lt;/li&gt;
&lt;li&gt;03 PostgreSQL 王者归来&lt;/li&gt;
&lt;li&gt;04 解放双手，构建未来，拥抱 PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postgresql-正成为事实上的数据库标准&#34;&gt;PostgreSQL 正成为事实上的数据库标准&lt;/h2&gt;
&lt;p&gt;在过去几个月里，“一切皆可用 PostgreSQL 解决” 已经成为开发者们的战斗口号：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL 并不是一个简单的关系型数据库，而是一个数据管理的抽象框架，具有吞噬整个数据库世界的力量。而这也是正在发生的事情 —— “一切皆用 Postgres” 已经不再是少数精英团队的前沿探索，而是成为了一种进入主流视野的最佳实践。&lt;/p&gt;
&lt;p&gt;—— 《&lt;a href=&#34;https://pigsty.io/zh/blog/pg/pg-eat-db-world/&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt;》，冯若航（me！）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在初创公司中简化技术栈、减少组件、加快开发速度、降低风险并提供更多功能特性的方法之一就是**“一切皆用 Postgres”**。Postgres 能够取代许多后端技术，包括 Kafka、RabbitMQ、ElasticSearch，Mongo和 Redis ，至少到数百万用户时都毫无问题。&lt;/p&gt;
&lt;p&gt;——《&lt;a href=&#34;https://pigsty.io/zh/blog/pg/just-use-pg/&#34;&gt;技术极简主义：一切皆用Postgres&lt;/a&gt;》， Stephan Schmidt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;听说 Postgres 被称为“数据库届的瑞士军刀”，嗯…… 是的，听起来很准确！ 不确定是谁第一个提出来的，但这是一个非常恰当的观察！ —— &lt;a href=&#34;https://twitter.com/GergelyOrosz/status/1780210365369885009&#34;&gt;Gergely Orosz&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL 天生自带护城河。它发展稳定，一直保持着对SQL标准的坚实支持，如今已成为数据库的热门选择。它有着极佳的文档质量（是我迄今见过的最好的之一）。与PostgreSQL集成非常容易，最近我看到的每一个数据工具初创公司通常都将 PostgreSQL 作为其第一个数据源连接选择。（我相信这也是因为PG功能丰富并有着强大的社区支持）—— &lt;a href=&#34;https://twitter.com/StalwartCoder/status/1780216838166581418&#34;&gt;Abhishek&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学习 Postgres 无疑是我职业生涯中投资回报率最高的技术之一。如今，像 @neondatabase，@supabase，和 @TimescaleDB 这样的优秀公司都是基于 PostgreSQL 构建的。现在它对我非常重要，足以与 React 和 iOS 开发并驾齐驱 —— &lt;a href=&#34;https://twitter.com/htormey/status/1780285782554706405&#34;&gt;Harry Tormey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;YouTube视频：&lt;a href=&#34;https://www.youtube.com/watch?v=VEWXmdjzIpQ&amp;t=2s&#34;&gt;等等&amp;hellip;PostgreSQL能做什么？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“当我第一次听说 Postgres 时（那时候MySQL绝对是主导者），有人对我说这是“那些数学怪咖弄出来的数据库”，然后我意识到：没错，就是这些人，才适合做数据库。”  —— &lt;a href=&#34;https://twitter.com/mesetatron/status/1780436890602307733&#34;&gt;Yuan Gao&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“PG实现了惊人的复兴：现在 NoSQL 已经没落，Oracle 又拥有了MySQL，你还有什么选择呢？”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;—— &lt;a href=&#34;https://twitter.com/mjkhanga/status/1780230248728350730&#34;&gt;Manoj Khangaonkar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;*“Postgres不仅仅是一个关系数据库，它是一种生活方式。” —— &lt;a href=&#34;https://news.ycombinator.com/item?id=39874270&#34;&gt;ilaksh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;凭借其坚如磐石的基础，加上其原生功能与扩展插件带来的强大功能集，开发者现在可以单凭 PostgreSQL 解决所有问题，用简洁明了的方式，取代复杂且脆弱的数据架构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-1.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://www.amazingcto.com/postgres-for-everything/&#34;&gt;Just Use Postgres for Everything&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也许可以解释为什么去年 PostgreSQL 在专业开发者中，在最受欢迎的数据库排行榜上，从MySQL手中夺得了榜首位置（60,369 名受访者）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在过去一年中，你在哪些数据库环境中进行了大量开发工作，以及在接下来的一年中你想在哪些数据库环境中工作？超过49%的受访者选择了PostgreSQL。&lt;/strong&gt; —— 来源：&lt;a href=&#34;/zh/&#34;&gt;StackOverflow 2023 年度用户调研&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些结果来自 2023 年的 &lt;a href=&#34;https://survey.stackoverflow.co/2023/#most-popular-technologies-database-prof&#34;&gt;Stack Overflow开发者调查&lt;/a&gt;。如果纵观过去几年，可以看到 PostgreSQL 的使用率在过去几年中有着稳步增长的趋势：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 2020 ~ 2022 年间，根据 StackOverflow 的开发者调查显示，PostgreSQL 是第二受欢迎的数据库，其使用率持续上升。来源： &lt;a href=&#34;https://survey.stackoverflow.co/2020#technology-databases&#34;&gt;&lt;strong&gt;2020&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&#34;https://survey.stackoverflow.co/2021/#section-most-popular-technologies-databases&#34;&gt;&lt;strong&gt;2021&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&#34;https://survey.stackoverflow.co/2022#section-most-popular-technologies-databases&#34;&gt;&lt;strong&gt;2022&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这不仅仅是小型初创公司和业余爱好者里的趋势。实际上，在各种规模的组织中，PostgreSQL 的使用率都在增长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL 使用率变化，按公司规模划分（ &lt;a href=&#34;https://www.timescale.com/state-of-postgres/2023&#34;&gt;TimescaleDB 2023 社区调研&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Timescale，我们这一趋势对我们并不陌生。我们已经是 PostgreSQL 的信徒近十年了。这就是为什么我们的业务建立在 PostgreSQL 之上，以及为什么我们是 &lt;a href=&#34;https://www.linkedin.com/posts/ajaykulkarni_edb-just-published-the-most-recent-analysis-activity-7163189940648947712-amIR?utm_source=share&amp;utm_medium=member_desktop&#34;&gt;PostgreSQL 的顶级贡献者之一&lt;/a&gt;，为什么我们每年举办 &lt;a href=&#34;https://www.timescale.com/state-of-postgres/2023&#34;&gt;PostgreSQL 社区调研&lt;/a&gt;（上述提到），以及为什么我们支持 PostgreSQL 的 Meetup 与大会。就个人而言，我已经使用 PostgreSQL 超过 13 年了（当时我从 MySQL 转换过来）。&lt;/p&gt;
&lt;p&gt;已经有一些博客文章讨论了 &lt;strong&gt;如何&lt;/strong&gt; （How）将 PostgreSQL 用于一切问题，但还没有讨论 &lt;strong&gt;为什么&lt;/strong&gt; （Why）会这样发生（更重要的是，&lt;em&gt;为什么这很重要&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;直到现在。&lt;/p&gt;
&lt;p&gt;但要理解为什么会发生这种情况，我们必须先了解一个更为基础的趋势以及这个趋势是如何改变人类现实的基本性质的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;02-一切都变成了电脑&#34;&gt;02 一切都变成了电脑&lt;/h2&gt;
&lt;p&gt;一切都变成了计算机 —— 我们的汽车、家庭、城市、农场、工厂、货币以及各种事物，包括我们自己，也正在变得更加数字化。我们每年都在更进一步地数字化自己的身份和行为：如何购物，如何娱乐，如何收藏艺术，如何寻找答案，如何交流和连接，以及如何表达自我。&lt;/p&gt;
&lt;p&gt;二十二年前，这种 “无处不在的计算” 还是一个大胆的想法。那时，我是麻省理工学院人工智能实验室的研究生，还在搞着智能环境的&lt;a href=&#34;https://dspace.mit.edu/bitstream/handle/1721.1/8078/51181976-MIT.pdf;sequence=2&#34;&gt;论文&lt;/a&gt;。我的研究得到了麻省理工学院&lt;a href=&#34;http://oxygen.lcs.mit.edu/Overview.html&#34;&gt;氧气计划&lt;/a&gt;的支持，该计划有一个崇高而大胆的目标：让计算像我们呼吸的空气一样无处不在。就那时候而言，我们自己的服务器架设在一个小隔间中。&lt;/p&gt;
&lt;p&gt;但从那以后，很多事情都变了。计算现在无处不在：在我们的桌面上，在我们的口袋里，在我们的 “云” 中，以及在我们的各种物品中。我们预见到了这些变化，但没有预见到这些变化的二级效应：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无处不在的计算导致了无处不在的数据&lt;/strong&gt;。随着每一种新的计算设备的出现，我们收集了更多关于我们现实世界的信息：人类数据、机器数据、商业数据、环境数据和合成数据。这些数据正在淹没我们的世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据的洪流引发了数据库的寒武纪大爆炸&lt;/strong&gt;。所有这些新的数据源需要新的存储地点。二十年前，可能只有五种可行的数据库选项。而如今，有数百种，大多数都是针对特定的数据而特别设计的，且每个月都在涌现新的数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多的数据和数据库导致了更多的软件复杂性&lt;/strong&gt;。正确选择适合你软件工作负载的数据库已不再简单。相反，开发者被迫拼凑复杂的架构，这可能包括：关系数据库（因其可靠性）、非关系数据库（因其可伸缩性）、数据仓库（因其分析能力）、对象存储（因其便宜归档冷数据的能力）。这种架构甚至可能会有更为专业特化的组件，例如时序数据库或向量数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多的复杂性意味着留给构建软件的时间越短&lt;/strong&gt;。架构越复杂，它就越脆弱，就需要更复杂的应用逻辑，并且会拖慢开发速度，留给开发的时间就越少。复杂性不是一项优点，而是一项真正的成本。&lt;/p&gt;
&lt;p&gt;随着计算越来越普遍，我们的现实生活越来越与计算交织在一起。我们把计算带入了我们的世界，也把我们自己带入了计算的世界。我们不再仅仅有着线下的身份，而是一个线下与线上所作所为的混合体。&lt;/p&gt;
&lt;p&gt;在这个新现实中，软件开发者是人类的先锋。正是我们构建了那些塑造这一新现实的软件。&lt;/p&gt;
&lt;p&gt;但是，开发者现在被数据淹没，被淹没在数据库的复杂性中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这意味着开发者 ——  花费越来越多的时间，在管理内部架构上，而不是去塑造未来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们是如何走到这一步的？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第一部分逐波递进的计算浪潮&#34;&gt;第一部分：逐波递进的计算浪潮&lt;/h3&gt;
&lt;p&gt;无处不在的计算带来了无处不在数据，这一变化并非一夜之间发生，而是在几十年中逐波递进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机/大型机 (1950 年代+)&lt;/li&gt;
&lt;li&gt;个人计算机 (1970 年代+)&lt;/li&gt;
&lt;li&gt;互联网 (1990 年代+)&lt;/li&gt;
&lt;li&gt;手机 (2000 年代+)&lt;/li&gt;
&lt;li&gt;云计算 (2000 年代+)&lt;/li&gt;
&lt;li&gt;物联网 (2010 年代+)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一波技术浪潮都使计算机变得更小、更强大且更普及。每一波也在前一波的基础上进行建设：个人计算机是小型化的主机；互联网是连接计算机的网络；智能手机则是连接互联网的更小型计算机；云计算民主化了计算资源的获取；物联网则是将智能手机的组件重构为连接到云的其他物理设备。&lt;/p&gt;
&lt;p&gt;但在过去二十年中，计算技术的进步不仅仅出现在物理世界中，也体现在数字世界中，反映了我们的混合现实：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社交网络 (2000 年代+)&lt;/li&gt;
&lt;li&gt;区块链 (2010 年代+)&lt;/li&gt;
&lt;li&gt;生成式人工智能 (2020 年代+)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一波新的计算浪潮，我们都能从中获取有关我们混合现实的新信息源：人类的数字残留数据、机器数据、商业数据和合成数据。未来的浪潮将创造更多数据。所有这些数据都推动了新的技术浪潮，其中最新的是生成式人工智能，进一步塑造了我们的现实。&lt;/p&gt;
&lt;p&gt;计算浪潮不是孤立的，而是像多米诺骨牌一样相互影响。最初的数据涓流很快变成了数据洪流。接着，数据洪流又促使越来越多的数据库的创建。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二部分数据库持续增长&#34;&gt;第二部分：数据库持续增长&lt;/h3&gt;
&lt;p&gt;所有这些新的数据来源，都需要新的地方来存储 —— 即数据库。&lt;/p&gt;
&lt;p&gt;大型机从 &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_Data_Store&#34;&gt;Integrated Data Store&lt;/a&gt;（1964 年）开始，以及后来的 &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_System_R&#34;&gt;System R&lt;/a&gt;（1974 年） —— 第一个 SQL 数据库。个人计算机推动了第一批商业数据库的崛起：受 System R 启发的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Oracle_Corporation&#34;&gt;Oracle&lt;/a&gt;（1977 年）；还有 &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_Db2&#34;&gt;DB2&lt;/a&gt;（1983 年）；以及微软对 Oracle 的回应： &lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_SQL_Server&#34;&gt;SQL Server&lt;/a&gt;（1989 年）。&lt;/p&gt;
&lt;p&gt;互联网的协作力量促进了开源软件的崛起，包括第一个开源数据库：&lt;a href=&#34;https://en.wikipedia.org/wiki/MySQL&#34;&gt;MySQL&lt;/a&gt;（1995 年），&lt;a href=&#34;https://en.wikipedia.org/wiki/PostgreSQL&#34;&gt;PostgreSQL&lt;/a&gt;（1996 年）。智能手机推动了 &lt;a href=&#34;https://en.wikipedia.org/wiki/SQLite&#34;&gt;SQLite&lt;/a&gt;（2000 年）的广泛传播。&lt;/p&gt;
&lt;p&gt;互联网还产生了大量数据，这导致了第一批非关系型（NoSQL）数据库的出现：&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Hadoop&#34;&gt;Hadoop&lt;/a&gt;（2006 年）；&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Cassandra&#34;&gt;Cassandra&lt;/a&gt;（2008 年）；&lt;a href=&#34;https://en.wikipedia.org/wiki/MongoDB&#34;&gt;MongoDB&lt;/a&gt;（2009 年）。有人将这个时期称为 “大数据” 时代。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三部分数据库爆炸式增长&#34;&gt;第三部分：数据库爆炸式增长&lt;/h3&gt;
&lt;p&gt;大约在 2010 年，我们开始达到一个临界点。在此之前，软件应用通常依赖单一数据库 —— 例如 Oracle、MySQL、PostgreSQL —— 选型是相对简单的。&lt;/p&gt;
&lt;p&gt;但 “大数据” 越来越大：物联网带来了机器数据的大爆炸；得益于 iPhone 和 Android，智能手机使用开始呈指数级增长，排放出了更多的人类数字 “废气”；云计算让计算和存储资源的获取变得普及，并加剧了这些趋势。生成式人工智能最近使这个问题更加严重 —— 它拉动了向量数据。&lt;/p&gt;
&lt;p&gt;随着被收集的数据量增长，我们看到了专用数据库的兴起：&lt;a href=&#34;https://en.wikipedia.org/wiki/Neo4j&#34;&gt;Neo4j&lt;/a&gt; 用于图形数据（2007 年），&lt;a href=&#34;https://en.wikipedia.org/wiki/Redis&#34;&gt;Redis&lt;/a&gt; 用于基础键值存储（2009 年），&lt;a href=&#34;https://en.wikipedia.org/wiki/InfluxDB&#34;&gt;InfluxDB&lt;/a&gt; 用于时序数据（2013 年），&lt;a href=&#34;https://en.wikipedia.org/wiki/ClickHouse&#34;&gt;ClickHouse&lt;/a&gt; 用于大规模分析（2016 年），Pinecone 用于向量数据（2019 年），等等。&lt;/p&gt;
&lt;p&gt;二十年前，可行的数据库选项可能只有五种。如今，却有&lt;a href=&#34;https://db-engines.com/en/ranking&#34;&gt;数百种&lt;/a&gt;，它们大多专为特定用例设计，每个月都有新的数据库出现。虽然早期数据库已经承诺 &lt;em&gt;通用的全能性&lt;/em&gt;，这些专用的数据库提供了&lt;em&gt;特定场景下的利弊权衡&lt;/em&gt;，而这些权衡是否有意义，取决于您的具体用例。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第四部分数据库越多问题越多&#34;&gt;第四部分：数据库越多，问题越多&lt;/h3&gt;
&lt;p&gt;面对这种数据洪流，以及各种具有不同利弊权衡的专用数据库，开发者别无选择，只能拼凑复杂的架构。&lt;/p&gt;
&lt;p&gt;这些架构通常包括一个关系数据库（为了可靠性）、一个非关系数据库（为了可扩展性）、一个数据仓库（用于数据分析）、一个对象存储（用于便宜的归档），甚至更专用的组件，如时间序列或向量数据库，用于那些特定的用例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是，越复杂的架构就越脆弱，就需要更复杂的应用逻辑，并且会拖慢开发速度，留给开发的时间就越少。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这意味着开发者 ——  花费越来越多的时间，在管理内部架构上，而不是去塑造未来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有更好的办法解决这个问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postgresql王者归来&#34;&gt;PostgreSQL王者归来&lt;/h2&gt;
&lt;p&gt;故事在这里发生转折，我们的主角不再是一个崭新的数据库，而是一个老牌数据库，它的名字只有 &lt;del&gt;核心&lt;/del&gt;开发人员才会喜欢：PostgreSQL。&lt;/p&gt;
&lt;p&gt;起初，PostgreSQL 在 MySQL 之后居于第二位，且与其相距甚远。MySQL 使用起来更简单，背后有公司支持，而且名字朗朗上口。但后来 MySQL 被 Sun Microsystems 收购（2008年），随后又被 Oracle 收购（2009年）。于是在那时，软件开发者们开始重新考虑使用什么数据库 —— 他们原本视 MySQL 为摆脱昂贵的 Oracle 专制统治的自由软件救星。&lt;/p&gt;
&lt;p&gt;与此同时，一个由几家小型独立公司赞助的分布式开发者社区，正在慢慢地让 PostgreSQL 变得越来越好。他们默默地添加了强大的功能，例如全文检索（2008年）、窗口函数（2009年）和 JSON 支持（2012年）。他们还通过流复制、热备份、原地升级（2010年）、逻辑复制（2017年）等功能，使数据库更加坚固可靠，同时勤奋地修复缺陷，并优化粗糙的边缘场景。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;postgresql-已经成为一个平台&#34;&gt;PostgreSQL 已经成为一个平台&lt;/h3&gt;
&lt;p&gt;在此期间，PostgreSQL 添加的最具影响力的功能之一，是支持 &lt;strong&gt;扩展&lt;/strong&gt;（Extension）：可以为 PostgreSQL 添加功能的软件模块（2011年）。&lt;a href=&#34;https://www.timescale.com/learn/postgres-extensions&#34;&gt;扩展让更多开发者能够独立、迅速且几乎无需协调地为 PostgreSQL 添加功能&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;得益于扩展机制，PostgreSQL 开始变成不仅仅是一个出色的关系型数据库。得益于 PostGIS，它成为了一个出色的地理空间数据库；得益于 TimescaleDB，它成为了一个出色的时间序列数据库；+ hstore，键值存储数据库；+ AGE，图数据库；+ pgvector，向量数据库。PostgreSQL 成为了一个平台。&lt;/p&gt;
&lt;p&gt;现在，开发者出于各种目的选用 PostgreSQL。例如为了可靠性、为了可伸缩性（替代NoSQL）、为了数据分析（替代数仓）。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;大数据则何如&#34;&gt;大数据则何如？&lt;/h3&gt;
&lt;p&gt;此时，聪明的读者应该会问，“那么大数据呢？”  —— 这是个好问题。从历史上看，“大数据”（例如，几百TB甚至上PB）—— 及相关的分析查询，曾经对于 PostgreSQL 这种本身不支持水平扩展的数据库来说，并不是合适的场景。&lt;/p&gt;
&lt;p&gt;但这里的情况也在改变，去年十一月，我们推出了 “&lt;a href=&#34;https://www.timescale.com/blog/scaling-postgresql-for-cheap-introducing-tiered-storage-in-timescale/&#34;&gt;分层存储&lt;/a&gt;”，它可以自动将你的数据在磁盘和对象存储（S3）之间进行分级存储，实际上实现了 &lt;strong&gt;无限存储表&lt;/strong&gt; 的能力。&lt;/p&gt;
&lt;p&gt;所以从历史上看，虽然 “大数据” 曾经是 PostgreSQL 的短板，但很快将没有任何工作负载是太大而处理不了的。&lt;/p&gt;
&lt;p&gt;PostgreSQL 是答案。PostgreSQL 是我们解放自我，并构建未来的方式。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解放自我构建未来拥抱-postgresql&#34;&gt;解放自我，构建未来，拥抱 PostgreSQL&lt;/h2&gt;
&lt;p&gt;相比于在各种异构数据库系统中纠结（每一种都有自己的查询语言和怪癖！），我们可以依靠世界上功能最丰富，而且可能是最可靠的数据库：PostgreSQL。我们可以不再耗费大量时间在基础设施上，而将更多时间用于构建未来。&lt;/p&gt;
&lt;p&gt;而且 PostgreSQL 还在不断进步中。PostgreSQL 社区在不断改进内核。而现在有更多的公司参与到 PostgreSQL 的开发中，包括那些巨无霸供应商。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-ecosystem.png&#34; src=&#34;/img/pigsty/ecosystem.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天的 PostgreSQL 生态 —— 《&lt;a href=&#34;https://pigsty.io/zh/blog/pg/pg-eat-db-world/&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样，也有更多创新的独立公司围绕着 PostgreSQL 内核开发，以改善其使用体验：&lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase&lt;/a&gt;（2020年）正在将 PostgreSQL 打造成一个适用于网页和移动开发者的 Firebase 替代品；&lt;a href=&#34;https://neon.tech/&#34;&gt;Neon&lt;/a&gt;（2021年）和 &lt;a href=&#34;https://xata.io/&#34;&gt;Xata&lt;/a&gt;（2022年）都在实现将 PostgreSQL “伸缩至零”， 以适应间歇性 Serverless 工作负载；&lt;a href=&#34;https://tembo.io/&#34;&gt;Tembo&lt;/a&gt;（2022年）为各种用例提供开箱即用的技术栈；&lt;a href=&#34;https://www.thenile.dev/&#34;&gt;Nile&lt;/a&gt;（2023年）正在使 PostgreSQL 更易于用于 SaaS 应用；还有许多其他公司。当然，还有我们，&lt;a href=&#34;https://www.timescale.com/&#34;&gt;&lt;strong&gt;Timescale&lt;/strong&gt;&lt;/a&gt;（2017年）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此处省略三节关于 TimescaleDB 的介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;尾声尤达&#34;&gt;尾声：尤达？&lt;/h2&gt;
&lt;p&gt;我们的现实世界，无论是物理的还是虚拟的，离线的还是在线的，都充满着数据。正如尤达所说，数据环绕着我们，约束着我们。这个现实越来越多地由软件所掌控，而这些软件正是由我们这些开发者编写的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-for-everything/pg-for-everything-yoda.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;这一点值得赞叹。特别是不久之前，在2002年，当我还是MIT的研究生时，世界曾经对软件失去了信心。我们当时正在从互联网泡沫破裂中复苏。主流媒体 “&lt;a href=&#34;https://hbr.org/2003/05/it-doesnt-matter&#34;&gt;IT并不重要&lt;/a&gt;”。那时对一个软件开发者来说，在金融行业找到一份好工作比在科技行业更容易——这也是我许多 MIT 同学所选择的道路，我自己也是如此。&lt;/p&gt;
&lt;p&gt;但今天，特别是在这个生成式AI的世界里，我们是塑造未来的人。我们是未来的建设者。我们应该感到惊喜。&lt;/p&gt;
&lt;p&gt;一切都在变成计算机。这在很大程度上是一件好事：我们的汽车更安全，我们的家居环境更舒适，我们的工厂和农场更高效。我们比以往任何时候都能即时获取更多的信息。我们彼此之间的联系更加紧密。有时，它让我们更健康，更幸福。&lt;/p&gt;
&lt;p&gt;但并非总是如此。就像原力一样，算力也有光明和黑暗的一面。越来越多的证据表明，手机和社交媒体直接导致了&lt;a href=&#34;https://www.amazon.com/Anxious-Generation-Rewiring-Childhood-Epidemic-ebook/dp/B0C9F37G28/ref=sr_1_3&#34;&gt;青少年心理疾病的全球流行&lt;/a&gt;。我们仍在努力应对&lt;a href=&#34;https://www.amazon.com/Coming-Wave-Technology-Twenty-first-Centurys-ebook/dp/B0BSKW45KB/ref=sr_1_1&#34;&gt;AI于合成生物学&lt;/a&gt;的影响。当我们拥抱更强大的力量时，应该意识到这也伴随着相应的责任。&lt;/p&gt;
&lt;p&gt;我们掌管着用于构建未来的宝贵资源：我们的时间和精力。我们可以选择把这些资源花在管理基础设施上，或者全力拥抱 PostgreSQL，构建正确的未来。&lt;/p&gt;
&lt;p&gt;我想你已经知道我们的立场了。&lt;/p&gt;
&lt;p&gt;感谢阅读。#Postgres4Life&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL会修改开源许可证吗？</title>
      <link>/zh/blog/pg/pg-license/</link>
      <pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-license/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-license/featured_hu8a9a4c1a17928e967c5358b7b08439ad_508126_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="366"/>]]>
        
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&#34;https://jkatz05.com/post/postgres/&#34;&gt;Jonathan Katz&lt;/a&gt;，PostgreSQL 核心组成员（1 of 7），AWS RDS 首席产品经理&lt;/p&gt;
&lt;p&gt;译者：&lt;a href=&#34;https://vonng.com&#34;&gt;冯若航&lt;/a&gt;，PostgreSQL 专家，Free RDS PG Alternative —— Pigsty 作者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postgresql会修改开源许可证吗&#34;&gt;PostgreSQL会修改开源许可证吗&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：我是&lt;a href=&#34;https://www.postgresql.org/developer/core/&#34;&gt;PostgreSQL 核心组&lt;/a&gt; 的成员，但本文内容是我的个人观点，并非 PostgreSQL 官方声明 …… &lt;strong&gt;除非我提供了指向官方声明的链接&lt;/strong&gt;；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天得知 &lt;a href=&#34;https://redis.com/blog/redis-adopts-dual-source-available-licensing/&#34;&gt;Redis 项目将不再使用开源许可证发布&lt;/a&gt;，我感到非常遗憾。原因有二：一是作为长期的 Redis 用户和较早的采用者，二是作为一个开源贡献者。对于开源商业化这件事的挑战，我不得不说确实感同身受 —— 特别是我曾站在针锋相对的不同阵营之中（译注：作者也是 AWS RDS 首席产品经理）。我也清楚这些变化对下游的冲击，它们可能对用户采纳、应用技术的方式产生颠覆性的影响。&lt;/p&gt;
&lt;p&gt;每当开源许可证领域出现重大变动时，尤其是在数据库及相关系统中（例如 MySQL =&amp;gt; Sun =&amp;gt; Oracle 就是第一个映入我脑海的），我总会听到这样的问题：“PostgreSQL会修改其许可证吗？”&lt;/p&gt;
&lt;p&gt;PostgreSQL 的网站上其实 &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;有答案&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL会使用不同的许可证发布吗？PostgreSQL 全球开发组（PGDG）依然致力于永远将 PostgreSQL  作为自由和开源软件提供。我们没有更改 PostgreSQL 许可证，或使用不同许可证发布 PostgreSQL 的计划。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：上面这段确实是我参与撰写的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;PostgreSQL许可证&lt;/a&gt;（又名 “&lt;strong&gt;协议&lt;/strong&gt;” — &lt;a href=&#34;https://pgsnake.blogspot.com/&#34;&gt;Dave Page&lt;/a&gt; 和我在这个词上来回辩论挺有意思的）是一个&lt;a href=&#34;https://opensource.org/license/postgresql&#34;&gt;开源倡议组织（OSI）认可的许可证&lt;/a&gt;，采用非常宽松的许可模型。至于它与哪个许可证最为相似，我建议阅读 &lt;a href=&#34;https://www.postgresql.org/message-id/1776.1256525282@sss.pgh.pa.us&#34;&gt;Tom Lane在2009年写的这封电子邮件&lt;/a&gt; （大意是：更接近 MIT 协议，叫 BSD 也行）。&lt;/p&gt;
&lt;p&gt;尽管这么说，但 PostgreSQL不会改变许可证，还是有一些原因在里面的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;许可证的名字就叫 “&lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;PostgreSQL许可证&lt;/a&gt;” —— 你都用项目来命名许可证了，还改什么协议？&lt;/li&gt;
&lt;li&gt;PostgreSQL项目发起时，以开源社区协作为主旨，&lt;strong&gt;意在防止任何单一实体控制本项目&lt;/strong&gt;。这一点作为项目的精神主旨已经延续了近三十年时间了，并且在项目 &lt;a href=&#34;https://www.postgresql.org/about/policies/&#34;&gt;项目政策 &lt;/a&gt;中有着明确体现。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/message-id/937d27e10910260840s1d28aab2o799f2c58d14dfb1e@mail.gmail.com&#34;&gt;Dave Page 在这封邮件中明确表示过&lt;/a&gt; 😊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么真正的问题就变成了，&lt;strong&gt;如果 PostgreSQL 要改变许可证，会出于什么理由呢&lt;/strong&gt;？通常变更许可证的原因是出于商业决策 —— 但看起来围绕 PostgreSQL 的商业业务与 PostgreSQL 的功能集合一样强壮。冯若航（Vonng）最近&lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;写了一篇博客文章&lt;/a&gt;，突出展现了围绕 PostgreSQL 打造的软件与商业生态，这还仅仅是一部分。&lt;/p&gt;
&lt;p&gt;我说 “仅仅是一部分” 的意思是，在历史上和现在还有更多的项目和商业，是围绕着 PostgreSQL 代码库的某些部分构建的。这些项目中许多都使用了不同的许可证发布，或者干脆就是闭源的。但它们也直接或间接地推动了PostgreSQL 的采用，并使 PostgreSQL 协议变得无处不在。&lt;/p&gt;
&lt;p&gt;但 PostgreSQL 不会改变其许可证的最大原因是，这将对所有 PostgreSQL 用户产生不利影响。对一项技术来说，建立信任需要很长时间，尤其是当该技术经常用于应用程序最关键的部分：数据存储与检索。&lt;a href=&#34;https://www.postgresql.org/about/&#34;&gt;PostgreSQL赢得了良好的声誉 —— 凭借其久经考验的架构、可靠性、数据完整性、强大的功能集、可扩展性，以及背后充满奉献精神的开源社区，始终如一地提供优质、创新的解决方案&lt;/a&gt;。修改 PostgreSQL 的许可证将破坏该项目过去近三十年来建立起的所有良好声誉。&lt;/p&gt;
&lt;p&gt;尽管 PostgreSQL 项目确实有不完美之处（我当然也对这些不完美的地方有所贡献），但 PostgreSQL 许可证对PostgreSQL 社区和整个开源界来说，确实是一份真正的礼物，我们将继续珍惜并帮助保持 PostgreSQL 真正的自由和开源。毕竟，&lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;官网上也是这么说的&lt;/a&gt; ;)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;译者评论&#34;&gt;译者评论&lt;/h2&gt;
&lt;p&gt;能被 PostgreSQL 全球社区核心组成员提名推荐，我感到非常荣幸。上文中 Jonathan 提到我的文章是《&lt;a href=&#34;https://mp.weixin.qq.com/s/8_uhRH93oAoHZqoC90DA6g&#34;&gt;PostgreSQL正在吞噬数据库世界&lt;/a&gt;》，英文版为《&lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;PostgreSQL is Eating The Database World&lt;/a&gt;》。发布于 Medium：https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4 ，并在 HackerNews ，X，LinkedIn 上引起相当热烈的讨论。&lt;/p&gt;
&lt;p&gt;Redis 变更其许可证协议，是开源软件领域又一里程碑式的事件 —— 至此，所有头部的 NoSQL 数据库 ，包括 MongoDB， ElasticSearch，加上 Redis ，都已经切换到了 SSPL —— 一种不被 OSI 承认的许可证协议。&lt;/p&gt;
&lt;p&gt;Redis 切换为更为严格的 SSPL 协议的核心原因，用 Redis Labs CEO 的话讲就是：“&lt;strong&gt;多年来，我们就像个傻子一样，他们拿着我们开发的东西大赚了一笔&lt;/strong&gt;”。“他们”是谁？ —— &lt;strong&gt;公有云&lt;/strong&gt;。切换 SSPL 的目的是，试图通过法律工具阻止这些云厂商白嫖吸血开源，成为体面的社区参与者，将软件的管理、监控、托管等方面的代码开源回馈社区。&lt;/p&gt;
&lt;p&gt;不幸的是，你可以强迫一家公司提供他们的 GPL/SSPL 衍生软件项目的源码，但你不能强迫他们成为开源社区的好公民。公有云对于这样的协议往往也嗤之以鼻，大多数云厂商只是简单拒绝使用AGPL许可的软件：要么使用一个采用更宽松许可的替代实现版本，要么自己重新实现必要的功能，或者直接购买一个没有版权限制的商业许可。&lt;/p&gt;
&lt;p&gt;当 Redis 宣布更改协议后，马上就有 AWS 员工跳出来 Fork Redis —— “Redis 不开源了，我们的分叉才是真开源！” 然后 AWS CTO 出来叫好，并假惺惺的说：这是我们员工的个人行为 —— 堪称是现实版杀人诛心。而同样的事情，已经发生过几次了，比如分叉 ElasticSearh 的 OpenSearch，分叉 MongoDB 的 DocumentDB。&lt;/p&gt;
&lt;p&gt;因为引入了额外的限制与所谓的“歧视”条款，OSI 并没有将 SSPL 认定为开源协议。因此使用 SSPL 的举措被解读为 —— “Redis 不再开源”，而云厂商的各种 Fork 是“开源”的。从法律工具的角度来说，这是成立的。但从朴素道德情感出发，这样的说法对于 Redis 来说是极其不公正的抹黑与羞辱。&lt;/p&gt;
&lt;p&gt;正如罗翔老师所说：法律工具的判断永远不能超越社区成员朴素的道德情感。如果协和与华西不是三甲，那么丢脸的不是这些医院，而是三甲这个标准。如果年度游戏不是巫师3，荒野之息，博德之门，那么丢脸的不是这些厂商，而是评级机构。如果 Redis 不再算“开源”，真正应该感到汗颜的应该是OSI 与开源这个理念。&lt;/p&gt;
&lt;p&gt;越来越多的知名开源软件，都开始切换到敌视针对云厂商白嫖的许可证协议上来。不仅仅是 Redis 与 MongoDB，ElasticSearch 在 2021 年也从 Apache 2.0 修改为 SSL 与 ElasticSearch，知名的开源软件 MinIO 与 Grafana 分别在 2020，2021年从 Apache v2 协议切换到了 AGPLv3 协议。&lt;/p&gt;
&lt;p&gt;一些老牌的开源项目例如 PostgreSQL ，正如 Jonathan 所说，历史沉淀（三十年的声誉！）让它们已经在事实上无法变更开源协议了。但我们可以看到，许多新强力的 PostgreSQL 扩展插件开始使用 AGPLv3 作为默认的开源协议，而不是以前默认使用的 BSD-like / PostgreSQL 友善协议。例如分布式扩展 Citus，列存扩展 Hydra，ES全文检索替代扩展 BM25，OLAP 加速组件 PG Analytics …… 等等等等。包括我们自己的 PostgreSQL 发行版 Pigsty，也在 2.0 的时候由 Apache 协议切换到了 AGPLv3 协议，背后的动机都是相似的 —— 针对软件自由的最大敌人 —— 云厂商进行反击。&lt;/p&gt;
&lt;p&gt;在抵御云厂商白嫖的实践中，修改协议是最常见的做法：但AGPLv3 过于严格容易敌我皆伤，SSPL 因为明确表达这种敌我歧视，不被算作开源。业界需要一种新的歧视性软件许可证协议，来达到名正言顺区分敌我的效果。使用双协议进行明确的边界区分，也开始成为一种主流的开源商业化实践。&lt;/p&gt;
&lt;p&gt;真正重要的事情一直都是软件自由，而“开源”只是实现软件自由的一种手段。而如果“开源”的理念无法适应新阶段矛盾斗争的需求，甚至会妨碍软件自由，它一样会过气，并不再重要，并最终被新的理念与实践所替代 —— 比如“本地优先”。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;英文原文&#34;&gt;英文原文&lt;/h2&gt;
&lt;h3 id=&#34;will-postgresql-ever-change-its-license&#34;&gt;WILL POSTGRESQL EVER CHANGE ITS LICENSE?&lt;/h3&gt;
&lt;p&gt;(Disclosure: I’m on the &lt;a href=&#34;https://www.postgresql.org/developer/core/&#34;&gt;PostgreSQL Core Team&lt;/a&gt;, but what’s written in this post are my personal views and not official project statements…unless I link to something that’s an official project statement ;)&lt;/p&gt;
&lt;p&gt;I was very sad to learn today that the &lt;a href=&#34;https://redis.com/blog/redis-adopts-dual-source-available-licensing/&#34;&gt;Redis project will no longer be released under an open source license&lt;/a&gt;. Sad for two reasons: as a longtime Redis user and pretty early adopter, and as an open source contributor. I’ll preface that I’m empathetic to the challenges of building businesses around open source, having been on multiple sides of this equation. I’m also cognizant of the downstream effects of these changes that can completely flip how a user adopts and uses a piece of technology.&lt;/p&gt;
&lt;p&gt;Whenever there’s a shakeup in open source licensing, particularly amongst databases and related systems (MySQL =&amp;gt; Sun =&amp;gt; Oracle being the one that first springs to mind), I’ll hear the question “Will PostgreSQL ever change its license?”&lt;/p&gt;
&lt;p&gt;The PostgreSQL website &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;has an answer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Will PostgreSQL ever be released under a different license? The PostgreSQL Global Development Group remains committed to making PostgreSQL available as free and open &amp;gt; source software in perpetuity. There are no plans to change the PostgreSQL License or release PostgreSQL under a different license.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Disclosure: I did help write the above paragraph).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt; (aka “License” – &lt;a href=&#34;https://pgsnake.blogspot.com/&#34;&gt;Dave Page&lt;/a&gt; and I have fun going back and forth on this) is an &lt;a href=&#34;https://opensource.org/license/postgresql&#34;&gt;Open Source Initiative (OSI) recognized license&lt;/a&gt;, and has a very permissive model. In terms of which license it’s most similar to, I defer to this email that &lt;a href=&#34;https://www.postgresql.org/message-id/1776.1256525282@sss.pgh.pa.us&#34;&gt;Tom Lane wrote in 2009&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, there are a few reasons why PostgreSQL won’t change it’s license:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s “&lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;” – why change license when you have it named after the project?&lt;/li&gt;
&lt;li&gt;The PostgreSQL Project began as a collaborative open source effort and is set up to prevent a single entity to take control. This carries through in the project’s ethos almost 30 years later, and is even codified throughout the &lt;a href=&#34;https://www.postgresql.org/about/policies/&#34;&gt;project policies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/message-id/937d27e10910260840s1d28aab2o799f2c58d14dfb1e@mail.gmail.com&#34;&gt;Dave Page explicitly said so in this email&lt;/a&gt; :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The question then becomes - is there a reason that PostgreSQL would change its license? Typically these changes happen as part of a business decision - but it seems that business around PostgreSQL is as robust as its feature set. Ruohang Feng (Vonng) recently &lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;wrote a blog post&lt;/a&gt; that highlighted just a slice of the PostgreSQL software and business ecosystem that’s been built around it, which is only possible through the PostgreSQL Licence. I say “just a slice” because there’s even more, both historically and current, projects and business that are built up around some portion of the PostgreSQL codebase. While many of these projects may be released under different licenses or be closed source, they have helped drive, both directly and indirectly, PostgreSQL adoption, and have helped make the PostgreSQL protocol ubiquitous.&lt;/p&gt;
&lt;p&gt;But the biggest reason why PostgreSQL would not change its license is the disservice it would do to all PostgreSQL users. It takes a long time to build trust in a technology that is often used for the most critical part of an application: storage and retrieval of data. &lt;a href=&#34;https://www.postgresql.org/about/&#34;&gt;PostgreSQL has earned a strong reputation for its proven architecture, reliability, data integrity, robust feature set, extensibility, and the dedication of the open source community behind the software to consistently deliver performant and innovative solutions&lt;/a&gt;. Changing the license of PostgreSQL would shatter all of the goodwill the project has built up through the past (nearly) 30 years.&lt;/p&gt;
&lt;p&gt;While there are definitely parts of the PostgreSQL project that are imperfect (and I certainly contribute to those imperfections), the PostgreSQL Licence is a true gift to the PostgreSQL community and open source in general that we’ll continue to cherish and help keep PostgreSQL truly free and open source. After all, it says &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;so on the website&lt;/a&gt; ;)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL正在吞噬数据库世界</title>
      <link>/zh/blog/pg/pg-eat-db-world/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-eat-db-world/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-eat-db-world/featured_huad6106095fcb5f74fa6d6f432197f3af_1011164_640x0_resize_catmullrom_3.png" width="640" height="357"/>]]>
        
        &lt;p&gt;PostgreSQL 并不是一个简单的关系型数据库，而是一个数据管理的抽象框架，具有吞噬整个数据库世界的力量。而这也是正在发生的事情 —— “一切皆用 Postgres” 已经不再是少数精英团队的前沿探索，而是成为了一种进入主流视野的最佳实践。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;olap-领域迎来踢馆者&#34;&gt;OLAP 领域迎来踢馆者&lt;/h2&gt;
&lt;p&gt;在 2016 年的一次数据库沙龙里，我提出了一个观点： 现在 PostgreSQL 生态的一个主要遗憾是，缺少一个&lt;strong&gt;足够好&lt;/strong&gt;的列式存储分析插件来做 OLAP 分析。尽管PostgreSQL 本身提供了很强大的分析功能集，应付常规的分析任务绰绰有余。但在较大数据量下全量分析的&lt;strong&gt;性能&lt;/strong&gt;，相比专用的实时数仓仍然有些不够看。&lt;/p&gt;
&lt;p&gt;以分析领域的权威评测 &lt;a href=&#34;https://benchmark.clickhouse.com/&#34;&gt;&lt;strong&gt;ClickBench&lt;/strong&gt;&lt;/a&gt; 为例，我们在其中标注出了 PostgreSQL 与生态扩展插件以及兼容衍生数据库在其中的性能表现。原生未经过调优的 PostgreSQL 表现较为拉垮（&lt;strong&gt;x1050&lt;/strong&gt;），但经过调优后可以达到（&lt;strong&gt;x47&lt;/strong&gt;）；此外还有三个与分析有关系的扩展：列存 &lt;strong&gt;Hydra&lt;/strong&gt;（&lt;strong&gt;x42&lt;/strong&gt;），时序扩展 &lt;strong&gt;TimescaleDB&lt;/strong&gt;（&lt;strong&gt;x103&lt;/strong&gt;），以及分布式扩展 &lt;strong&gt;Citus&lt;/strong&gt;（&lt;strong&gt;x262&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://benchmark.clickhouse.com/&#34;&gt;&lt;img alt=&#34;clickbench.png&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/clickbench.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClickBench c6a.4xlarge, 500gb gp2，Hot Run 执行相对耗时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样的分析性能表现不能说烂，因为比起 MySQL，MariaDB 这样的纯 OLTP 数据库的辣眼表现（&lt;strong&gt;x3065,x19700&lt;/strong&gt;）确实好很多；但第三梯队的性能表现也绝对说不上足够好，与专注于 OLAP 的第一梯队组件：Umbra，ClickHouse，Databend，SelectDB（&lt;strong&gt;x3~x4&lt;/strong&gt;）相比，在分析性能上仍然有十几倍的性能差距。食之无味，弃之可惜。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然而，&lt;/strong&gt; &lt;a href=&#34;/zh/blog/pg/paradedb/&#34;&gt;&lt;strong&gt;ParadeDB&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;和&lt;/strong&gt; &lt;a href=&#34;https://duckdb.org/&#34;&gt;&lt;strong&gt;DuckDB&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;的出现改变了这一点！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ParadeDB&lt;/strong&gt; 提供的 PG 原生扩展 &lt;strong&gt;pg_analytics&lt;/strong&gt; 实现了第二梯队（&lt;strong&gt;x10&lt;/strong&gt;）的性能水准，与第一梯队只有 3～4 倍的性能差距。相对于其他功能上的收益，这种程度的性能差距通常是可以接受的 —— ACID，新鲜性与实时性，无需 ETL、额外学习成本、维护独立的新服务，更别提它还提供了 ElasticSearch 质量的全文检索能力。&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;DuckDB&lt;/strong&gt; 则专注于 OLAP ，将分析性能这件事做到了极致（&lt;strong&gt;x3.2&lt;/strong&gt;） —— 略过第一名 Umbra 这种学术研究型闭源数据库，DuckDB 也许是 OLAP 实战性能最快的数据库了。它并不是 PG 的扩展插件，但它是一个嵌入式文件数据库，而 &lt;a href=&#34;https://github.com/alitrack/duckdb_fdw&#34;&gt;&lt;strong&gt;DuckDB FDW&lt;/strong&gt;&lt;/a&gt; 以及 &lt;a href=&#34;https://github.com/hydradatabase/pg_quack&#34;&gt;&lt;strong&gt;pg_quack&lt;/strong&gt;&lt;/a&gt; 这样的 PG 生态项目，能让 PostgreSQL 充分利用 DuckDB 带来的完整分析性能红利！&lt;/p&gt;
&lt;p&gt;ParadeDB 与 DuckDB 的出现让 PostgreSQL 的分析性能来到了 OLAP 的第一梯队与金字塔尖，弥补了 PostgreSQL 在 OLAP 性能这最后一块关键短板。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;分久必合的数据库领域&#34;&gt;分久必合的数据库领域&lt;/h2&gt;
&lt;p&gt;数据库诞生伊始，并没有 OLTP 与 OLAP 的分野。OLAP 数据仓库从数据库中“独立”出来，已经是上世纪九十年代时候的事了 —— 因为传统的 OLTP 数据库难以支撑起分析场景下的查询模式，数据量与性能要求。&lt;/p&gt;
&lt;p&gt;在相当一段时间里，数据处理的最佳实践是使用 MySQL / PG 处理 OLTP 工作负载，并通过 ETL 将数据同步到专用的 OLAP 组件中去处理，比如 Greenplum, ClickHouse, Doris, Snowflake 等等。&lt;/p&gt;
&lt;figure class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 735px&#34;&gt;
&lt;img class=&#34;card-img-top&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/ddia_hu04f70ed29e59e1b4862c5f1df5de3cec_998548_768x512_fit_catmullrom_3.png&#34; width=&#34;725&#34; height=&#34;512&#34;&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;设计数据密集型应用，Martin Kleppmann，&lt;a href=&#34;http://ddia.vonng.com/#/ch3&#34;&gt;第三章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与许多 “专用数据库” 一样，专业的 OLAP 组件的优势往往在于&lt;strong&gt;性能&lt;/strong&gt; —— 相比原生 PG 、MySQL 上有 1～3 个数量级的提升；而代价则是数据冗余、 大量不必要的数据搬运工作、分布式组件之间缺乏一致性、额外的专业技能带来的复杂度成本、学习成本、以及人力成本、 额外的软件许可费用、极其有限的查询语言能力、可编程性、可扩展性、有限的工具链、以及与OLTP 数据库相比更差的数据完整性和可用性 —— &lt;strong&gt;但这是一个合理的利弊权衡&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而天下大势，&lt;strong&gt;分久必合，合久必分&lt;/strong&gt;。&lt;a href=&#34;/zh/blog/cloud/bonus&#34;&gt;硬件遵循摩尔定律又发展了三十年&lt;/a&gt;，性能翻了几个数量级，成本下降了几个数量级。在 2024 年的当下，x86 单机可以达到几百核 (512 vCPU &lt;a href=&#34;https://www.amd.com/zh-hans/products/cpu/amd-epyc-9754&#34;&gt;EPYC 9754&lt;/a&gt;x2)，几个TB的内存，单卡 NVMe SSD 可达 64TB，全闪单机柜 2PB ；S3 这样对象存储更是能实现几乎没有上限的存储。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;io-bandwidth.png&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/io-bandwidth.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;硬件的发展解决了数据量的问题，而数据库软件的发展（PostgreSQL，ParadeDB，DuckDB）解决了查询模式的问题，而这导致分析领域 —— 所谓的“大数据” 行业基本工作假设面临挑战。&lt;/p&gt;
&lt;p&gt;正如 DuckDB 发表的宣言《&lt;a href=&#34;https://mp.weixin.qq.com/s/gk3BOirM6uCTQ1HFTQz3ew&#34;&gt;&lt;strong&gt;大数据已死&lt;/strong&gt;&lt;/a&gt;》所主张的：&lt;strong&gt;大数据时代已经结束了&lt;/strong&gt; —— 大多数人并没有那么多的数据，大多数数据也很少被查询。大数据的前沿随着软硬件发展不断后退，99% 的场景已经不再需要所谓“大数据”了。&lt;/p&gt;
&lt;p&gt;如果 99% 的场景甚至都可以放在一台计算机上用单机/主从的 DuckDB 或 PostgreSQL 搞定，那么使用专用的分析组件还有多少意义？如果每台手机都可以自由自主收发短信，那么 BP 机还有什么存在价值？（北美医院还在用BP机，正好比也还有 1% 不到的场景也许真的需要“大数据”）&lt;/p&gt;
&lt;p&gt;基本工作假设的变化，将重新推动数据库世界从百花齐放的“合久必分”阶段，走向“分久必合”的阶段，从大爆发到大灭绝，大浪淘沙中，新的大一统超融合数据库将会出现，重新统一 OLTP 与 OLAP。而承担重新整合数据库领域这一使命的会是谁？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;吞食天地的-postgresql&#34;&gt;吞食天地的 PostgreSQL&lt;/h2&gt;
&lt;p&gt;数据库领域有许多“细分领域”：时序数据库，地理空间数据库，文档数据库，搜索数据库，图数据库，向量数据库，消息队列，对象数据库。而 PostgreSQL 在任何一个领域都不会缺席。&lt;/p&gt;
&lt;p&gt;一个 PostGIS 插件，成为了地理空间事实标准；一个 TimescaleDB 扩展，让一堆“通用”时序数据库尴尬的说不出话来；一个向量扩展 &lt;a href=&#34;/zh/blog/dev/llm-and-pgvector&#34;&gt;&lt;strong&gt;PGVector&lt;/strong&gt;&lt;/a&gt; 插件，更是让整个 &lt;a href=&#34;/zh/blog/db/svdb-is-dead&#34;&gt;&lt;strong&gt;专用向量数据库细分领域&lt;/strong&gt;&lt;/a&gt; 变成笑话。&lt;/p&gt;
&lt;p&gt;同样的事情已经发生过很多次，而现在，我们将在拆分最早，地盘最大的一个子领域 OLAP 分析中再次见证这一点。但 PostgreSQL 要替代的可不仅仅是 OLAP 数仓，它的野望是整个数据库世界！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/docs/reference/extension&#34;&gt;&lt;img alt=&#34;ecosystem.jpg&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/ecosystem.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然 PostgreSQL 有何德何能，可当此大任？诚然 PostgreSQL 先进，但 Oracle 也先进；PostgreSQL 开源，但 MySQL 也开源。PostgreSQL &lt;strong&gt;先进且开源&lt;/strong&gt;，这是它与 Oracle / MySQL 竞争的底气，但要说其独一无二的特点，那还得是它的&lt;strong&gt;极致可扩展性，与繁荣的扩展生态&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.timescale.com/state-of-postgres/2022/&#34;&gt;&lt;img alt=&#34;survey.png&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/survey.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TimescaleDB 2022 社区调研：用户&lt;a href=&#34;/zh/blog/pg/pg-is-best/&#34;&gt;选择 PostgreSQL 的原因&lt;/a&gt;：开源，先进，&lt;strong&gt;扩展&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PostgreSQL 并不是一个简单的关系型数据库，而是一个数据管理的抽象框架，&lt;strong&gt;具有囊括一切，吞噬整个数据库世界的力量&lt;/strong&gt;。而它的核心竞争力（除了开源与先进）来自&lt;strong&gt;可扩展性&lt;/strong&gt;，即基础设施的&lt;strong&gt;可复用性&lt;/strong&gt;与扩展插件的&lt;strong&gt;可组合性&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;极致可扩展性的魔法&#34;&gt;极致可扩展性的魔法&lt;/h3&gt;
&lt;p&gt;PostgreSQL 允许用户开发功能模块，复用数据库公共基础设施，以最低的成本交付功能。例如，仅有两千行代码的向量数据库扩展 pgvector 与百万行代码的 PostgreSQL 在复杂度上相比可以说微不足道，但正是这“微不足道”的扩展，实现了完整的向量数据类型与索引能力，干翻了几乎所有专用向量数据库。&lt;/p&gt;
&lt;p&gt;为什么？因为 PGVECTOR 作者不需要操心数据库的通用额外复杂度：事务 ACID，故障恢复，备份PITR，高可用，访问控制，监控，部署，三方生态工具，客户端驱动这些需要成百上千万行代码才能解决好的问题，只需要关注自己所需问题的本质复杂度即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/blog/db/svdb-is-dead&#34;&gt;&lt;img src=&#34;/zh/blog/pg/pg-eat-db-world/vectordbs.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向量数据库哪家强？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如，ElasticSearch 基于 Lucene 搜索库开发，而 Rust 生态有一个改进版的下一代 Tantivy 全文搜索库作为 Lucene 的替代；而 ParadeDB 只需要将其封装对接到 PostgreSQL 的接口上，即可提供比肩 ElasticSearch 的搜索服务。更重要的是，它可以站在 PostgreSQL 巨人的肩膀上，借用 PG 生态的全部合力（例如，与 PG Vector 做混合检索），不讲武德地用数据库全能王的力量，去与一个专用数据库单品来对比。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/zh/docs/reference/extension/&#34;&gt;&lt;img alt=&#34;img&#34; src=&#34;/img/pigsty/extension.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 中提供了 &lt;a href=&#34;/zh/docs/reference/extension/&#34;&gt;&lt;strong&gt;255&lt;/strong&gt;&lt;/a&gt; 个可用扩展插件，在生态中还有 1000+ 扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;可扩展性带来的另一点巨大优势是扩展的&lt;strong&gt;可组合性&lt;/strong&gt;，让不同扩展相互合作，产生出 1+1 &amp;raquo; 2 的协同效应。例如，TimescaleDB 可以与 PostGIS 组合使用，提供时空数据支持；再比如，提供全文检索能力的 BM25 扩展可以和提供语义模糊检索的 PGVector 扩展组合使用，提供混合检索能力。&lt;/p&gt;
&lt;p&gt;再比如，&lt;strong&gt;分布式&lt;/strong&gt;扩展 Citus 可以将单机主从数据库集群，原地升级改造为透明水平分片的分布式数据库集群。而这个能力是可以与其他功能正交组合的，因此，PostGIS 可以成为分布式地理数据库，PGVector 可以成为分布式向量数据库，ParadeDB 可以成为分布式全文搜索数据库，诸如此类。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;更强大的地方在于，扩展插件是&lt;strong&gt;独立演进&lt;/strong&gt;的，不需要繁琐的主干合并，联调协作。因此可以 Scale  —— PG 的可扩展性允许无数个团队并行探索数据库前研发展方向，而扩展全部都是的可选的，不会影响主干核心能力的稳定性。那些非常强大成熟的特性，则有机会以稳定的形态进入主干中。&lt;/p&gt;
&lt;p&gt;通过极致可扩展性的魔法，PostgreSQL 做到了**守正出奇，实现了主干极致稳定性与功能敏捷性的统一。**扎实的基本盘配上惊人的演进速度，让它成为了数据库世界中的一个异数，改变了数据库世界的游戏规则。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;改变游戏规则的玩家&#34;&gt;改变游戏规则的玩家&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL 的出现，改变了数据库领域的游戏规则&lt;/strong&gt;：任何试图开发“新数据库内核”的团队，都需要经过这道试炼与考验 —— 相比开源免费、功能齐备的 Postgres，价值点在哪里？&lt;/p&gt;
&lt;p&gt;至少到硬件出现革命性突破前，实用的通用数据库新内核都不太可能诞生了，因为任何单一数据库都无法与所有扩展加持下的 PG 在&lt;strong&gt;整体实力&lt;/strong&gt;上相抗衡 —— 包括 Oracle，因为 PG 还有开源免费的必杀技。&lt;/p&gt;
&lt;p&gt;而某个细分领域的数据库产品，如果能在单点属性（通常是性能）上相比 PostgreSQL 实现超过一个数量级的优势，那也许还有一个专用数据库的生态位存在。但通常用不了多久，便会有 PostgreSQL 生态的开源替代扩展插件滚滚而来。因为选择开发 PG 扩展，而不是一个完整数据库的团队会在追赶复刻速度上有碾压性优势！&lt;/p&gt;
&lt;p&gt;因此，如果按照这样的逻辑展开，PostgreSQL 生态的雪球只会越滚越大，随着优势的积累，不可避免地进入一家独大的状态。在几年的时间内，实现 Linux 内核在服务器操作系统领域的状态。而各种开发者调研报告，数据库流行趋势都在印证着这一点。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://survey.stackoverflow.co/2023/#section-most-popular-technologies-databases&#34;&gt;&lt;img alt=&#34;sf-survey.png&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/sf-survey.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://survey.stackoverflow.co/2023/#section-most-popular-technologies-databases&#34;&gt;&lt;strong&gt;StackOverflow 2023 调研结果，PostgreSQL 三项全能王&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://demo.pigsty.cc/d/sf-survey&#34;&gt;&lt;img alt=&#34;sf-trend.jpg&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/sf-trend.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://demo.pigsty.cc/d/sf-survey&#34;&gt;&lt;strong&gt;StackOverflow过去7年的数据库指标走势&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在引领潮流的 HackerNews StackOverflow 上，PostgreSQL 早已成为了最受欢迎的数据库。许多新的开源项目都默认使用 PostgreSQL 作为首要，甚至唯一的数据库 —— 例如，给各种数据库做模式管理的 Bytebase。《&lt;a href=&#34;https://mp.weixin.qq.com/s/HeIGQC6JsE9ZXqJtFjiczA&#34;&gt;云时代数据库DevOps：硅谷调研&lt;/a&gt;》也提出，许多新一代互联网公司都开始积极拥抱并 All in PostgreSQL。&lt;/p&gt;
&lt;p&gt;正如《&lt;a href=&#34;/zh/blog/pg/just-use-pg/&#34;&gt;&lt;strong&gt;技术极简主义：一切皆用 Postgres&lt;/strong&gt;&lt;/a&gt; 》所言：简化技术栈、减少组件、加快开发速度、降低风险并提供更多功能特性的方法之一就是 &lt;strong&gt;“一切皆用 Postgres”&lt;/strong&gt;。Postgres 能够取代许多后端技术，包括 MySQL，Kafka、RabbitMQ、ElasticSearch，Mongo和 Redis，至少到数百万用户时都毫无问题。&lt;strong&gt;一切皆用 Postgres&lt;/strong&gt; ，已经不再是少数精英团队的前沿探索，而是成为了一种进入主流视野的最佳实践。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;还有什么可以做的&#34;&gt;还有什么可以做的？&lt;/h2&gt;
&lt;p&gt;我们已经不难预见到数据库领域的终局。但我们又能做什么，又应该做什么呢？&lt;/p&gt;
&lt;p&gt;PostgreSQL 对于绝大多数场景都已经是一个足够完美的数据库内核了，在这个前提下，数据库内核&lt;a href=&#34;/zh/blog/db/db-choke/&#34;&gt;卡脖子纯属无稽之谈&lt;/a&gt;。这些Fork PostgreSQL 和 MySQL 并以内核魔改作为卖点的所谓“&lt;a href=&#34;/zh/blog/db/db-choke/&#34;&gt;数据库&lt;/a&gt;”基本没啥出息。&lt;/p&gt;
&lt;p&gt;这好比今天我们看 Linux 操作系统内核一样，尽管市面上有这么多的 Linux 操作系统发行版，但大家都选择使用同样的 Linux 内核，吃饱了撑着魔改内核属于没有困难创造困难也要上，会被业界当成山炮看待。&lt;/p&gt;
&lt;p&gt;同理，数据库内核本身已经不再是主要矛盾，焦点将会集中到两个方向上 —— 数据库&lt;strong&gt;扩展&lt;/strong&gt;与数据库&lt;strong&gt;服务&lt;/strong&gt;！前者体现为数据库内部的可扩展性， 后者体现为数据库外部的可组合性。而竞争的形式，正如操作系统生态一样 —— 集中于&lt;strong&gt;数据库发行版&lt;/strong&gt;上。对于数据库领域来说，只有那些以扩展和服务作为核心价值主张的发行版，才有最终成功的可能。&lt;/p&gt;
&lt;p&gt;做内核的厂商不温不火，MariaDB 作为 MySQL 的亲爹 Fork 甚至都已经濒临退市，而白嫖内核自己做服务与扩展卖 RDS 的 AWS 可以赚的钵满盆翻。投资机构已经出手了许多 PG 生态的扩展插件与服务发行版：Citus，TimescaleDB，Hydra，PostgresML，ParadeDB，FerretDB，StackGres，Aiven，Neon，Supabase，Tembo，PostgresAI，以及我们正在做的 Pigsty 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/players.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;PostgreSQL 生态中的一个困境就是，许多扩展插件，生态工具都是独立演进，各自为战的，没有一个整合者能将他们凝聚起来形成合力。例如，提供分析的 Hydra 会打一个包一个 Docker 镜像， PostgresML 也会打自己的包和镜像，各家只发行加装了自己扩展的 Postgres 镜像。而这些朴素的镜像与包也距离 RDS 这样完整的数据库服务相距甚远。&lt;/p&gt;
&lt;p&gt;即使是类似于 AWS RDS 这样的服务提供商与生态整合者，在诸多扩展面前也依然力有所不逮，只能提供其中的少数。更多的强力扩展出于各种原因（AGPLv3 协议，多租户租赁带来的安全挑战）而无法使用。从而难以发挥 PostgreSQL 生态扩展的协同增幅作用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里列出了一些重要扩展，对比基于最新的 PostgreSQL 16 主干版本进行，截止至 2024-02-28&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;扩展类目&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;/zh/docs/reference/extension&#34;&gt;&lt;strong&gt;Pigsty RDS&lt;/strong&gt;&lt;/a&gt; / PGDG 官方仓库&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://help.aliyun.com/zh/rds/apsaradb-rds-for-postgresql/extensions-supported-by-apsaradb-rds-for-postgresql&#34;&gt;&lt;strong&gt;阿里云 RDS&lt;/strong&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-extensions.html&#34;&gt;&lt;strong&gt;AWS RDS PG&lt;/strong&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;加装扩展&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; 自由加装&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt; 不允许&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt; 不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地理空间&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PostGIS 3.4.2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PostGIS 3.3.4 / Ganos 6.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PostGIS 3.4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;雷达点云&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PG PointCloud 1.2.5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; Ganos PointCloud 6.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;向量嵌入&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PGVector 0.6.1 / Svector 0.5.6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-triangle-exclamation text-secondary&#34;&gt;&lt;/i&gt; pase 0.0.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PGVector 0.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器学习&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PostgresML 2.8.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;时序扩展&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; TimescaleDB 2.14.2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;水平分布式&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; Citus 12.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列存扩展&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; Hydra 1.1.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全文检索&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_bm25 0.5.6&lt;br /&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;图数据库&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; Apache AGE 1.5.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GraphQL&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; PG GraphQL 1.5.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OLAP&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_analytics 0.5.6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息队列&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pgq 3.5.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DuckDB&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; duckdb_fdw 1.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模糊分词&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; zhparser 1.1 / pg_bigm 1.2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; zhparser 1.0 / pg_jieba&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_bigm 1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CDC抽取&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; wal2json 2.5.3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-xmark text-danger&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; wal2json 2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;膨胀治理&lt;/td&gt;
&lt;td&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_repack 1.5.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_repack 1.4.8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;i class=&#34;fas fa-circle-check text-success&#34;&gt;&lt;/i&gt; pg_repack 1.5.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;许多关键扩展在RDS中并不可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扩展是 PostgreSQL 的灵魂，无法自由使用扩展的 Postgres 就像做菜不放盐。只能和 MySQL 放在同一个 RDS 的框子里同台，龙游浅水，虎落平阳。&lt;/p&gt;
&lt;p&gt;而这正是我们想要解决的首要问题之一。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;知行合一的实践pigsty&#34;&gt;知行合一的实践：Pigsty&lt;/h2&gt;
&lt;p&gt;虽然接触 MySQL 和 MSSQL 要早得多，但我在 2015 年第一次上手 PostgreSQL 时，就相信它会是数据库领域的未来了。快十年过去，我也从 PG 的使用者，管理者，变为了贡献者，开发者。也不断见证着 PG 走向这一目标。&lt;/p&gt;
&lt;p&gt;在与形形色色的用户沟通交流中，我早已发现数据库领域的木桶短板不是内核 —— 现有的 PostgreSQL 已经足够好了，而是&lt;strong&gt;用好数据库内核本身的能力&lt;/strong&gt;，这也是 RDS 这样的服务赚的钵满盆翻的原因。&lt;/p&gt;
&lt;p&gt;但我希望这样的能力，应该像自由软件运动所倡导的理念那样，像 PostgreSQL 内核本身一样 —— 普及到每一个用户手中，而不是必须向赛博空间上的封建云领主花大价钱租赁。&lt;/p&gt;
&lt;p&gt;所以我打造了 &lt;strong&gt;&lt;a href=&#34;https://pigsty.io&#34;&gt;Pigsty&lt;/a&gt;&lt;/strong&gt; —— 一个开箱即用的开源 PostgreSQL 数据库发行版，旨在凝聚 PostgreSQL 生态扩展的合力，并把提供优质数据库服务的能力普及到每个用户手中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/banner.en.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 是 &lt;strong&gt;P&lt;/strong&gt;ostgreSQL &lt;strong&gt;i&lt;/strong&gt;n &lt;strong&gt;G&lt;/strong&gt;reat &lt;strong&gt;STY&lt;/strong&gt;le 的缩写，意为 &lt;strong&gt;PostgreSQL 的全盛状态&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们提出了六点核心价值主张，对应 PostgreSQL 数据库服务中的的六个核心问题：&lt;strong&gt;Postgres 的可扩展性&lt;/strong&gt;，&lt;strong&gt;基础设施的可靠性&lt;/strong&gt;，&lt;strong&gt;图形化的可观测性&lt;/strong&gt;，&lt;strong&gt;服务的可用性&lt;/strong&gt;，&lt;strong&gt;工具的可维护性&lt;/strong&gt;，以及&lt;strong&gt;扩展模块和三方组件可组合性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Pigsty 六点价值主张的首字母合起来，则为 Pigsty 提供了另外一种缩写解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;ostgres, &lt;strong&gt;I&lt;/strong&gt;nfras, &lt;strong&gt;G&lt;/strong&gt;raphics, &lt;strong&gt;S&lt;/strong&gt;ervice, &lt;strong&gt;T&lt;/strong&gt;oolbox, &lt;strong&gt;Y&lt;/strong&gt;ours.&lt;/p&gt;
&lt;p&gt;属于你的图形化 Postgres 基础设施服务工具箱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/homepage.zh.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可扩展的 PostgreSQL&lt;/strong&gt; 是这个发行版中最重要的价值主张。在刚刚发布的 &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487025&amp;idx=1&amp;sn=c32f102718e3e9cf55cdefa7133f259f&amp;chksm=fe4b3beac93cb2fc25c2c2c4f9ea74d4353e565ef90c5e2bbaf5881a3a031cbdff706971af9a&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;Pigsty v2.6&lt;/strong&gt;&lt;/a&gt; 中，我们整合了上面提到的 DuckdbFDW 与 ParadeDB 扩展，这两个插件让 PostgreSQL 的分析能力得到史诗级增强，而我们确保每个用户都能轻松用得上这样的能力。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;regards.png&#34; src=&#34;/zh/blog/pg/pg-eat-db-world/regards.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来自 ParadeDB 创始人与 DuckdbFDW 作者的感谢致意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们希望整合 PostgreSQL 生态里的各种力量，并将其凝聚在一起形成合力，打造一个数据库世界中的 &lt;strong&gt;Ubuntu&lt;/strong&gt; 发行版。而我相信，内核之争早已尘埃落定，而这里才会是数据库世界的未来竞争焦点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/&#34;&gt;&lt;strong&gt;PostGIS&lt;/strong&gt;&lt;/a&gt;：提供地理空间数据类型与索引支持，GIS 事实标准 （&amp;amp; &lt;a href=&#34;https://pgpointcloud.github.io/pointcloud/&#34;&gt;&lt;strong&gt;pgPointCloud&lt;/strong&gt;&lt;/a&gt; 点云，&lt;a href=&#34;https://pgrouting.org/&#34;&gt;&lt;strong&gt;pgRouting&lt;/strong&gt;&lt;/a&gt; 寻路）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.timescale.com/&#34;&gt;&lt;strong&gt;TimescaleDB&lt;/strong&gt;&lt;/a&gt;：添加时间序列/持续聚合/分布式/列存储/自动压缩的能力&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;&lt;strong&gt;PGVector&lt;/strong&gt;&lt;/a&gt;：添加 AI 向量/嵌入数据类型支持，以及 ivfflat 与 hnsw 向量索引。（&amp;amp; &lt;a href=&#34;https://github.com/paradedb/paradedb/tree/dev/pg_sparse&#34;&gt;&lt;strong&gt;pg_sparse&lt;/strong&gt;&lt;/a&gt; 稀疏向量支持）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/&#34;&gt;&lt;strong&gt;Citus&lt;/strong&gt;&lt;/a&gt;：将经典的主从PG集群原地改造为水平分片的分布式数据库集群。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hydra.so/&#34;&gt;&lt;strong&gt;Hydra&lt;/strong&gt;&lt;/a&gt;：添加列式存储与分析能力，提供比肩 ClickHouse 的强力分析能力。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paradedb.com/&#34;&gt;&lt;strong&gt;ParadeDB&lt;/strong&gt;&lt;/a&gt;：添加 ElasticSearch 水准的全文搜索能力与混合检索的能力。（&amp;amp; &lt;a href=&#34;https://github.com/amutu/zhparser&#34;&gt;&lt;strong&gt;zhparser&lt;/strong&gt;&lt;/a&gt; 中文分词）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://age.apache.org/&#34;&gt;&lt;strong&gt;Apache AGE&lt;/strong&gt;&lt;/a&gt;：图数据库扩展，为 PostgreSQL 添加类 Neo4J 的 OpenCypher 查询支持，&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/supabase/pg_graphql&#34;&gt;&lt;strong&gt;PG GraphQL&lt;/strong&gt;&lt;/a&gt;：为 PostgreSQL 添加原生内建的 GraphQL 查询语言支持。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alitrack/duckdb_fdw&#34;&gt;&lt;strong&gt;DuckDB FDW&lt;/strong&gt;&lt;/a&gt;：允许您通过 PostgreSQL 直接读写强力的嵌入式分析数据库 &lt;a href=&#34;https://github.com/Vonng/pigsty/tree/master/app/duckdb&#34;&gt;&lt;strong&gt;DuckDB&lt;/strong&gt;&lt;/a&gt; 文件 （&amp;amp; DuckDB CLI 本体）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/pigsty/tree/master/app/supabase&#34;&gt;&lt;strong&gt;Supabase&lt;/strong&gt;&lt;/a&gt;：基于 PostgreSQL 的开源的 Firebase 替代，提供完整的应用开发存储解决方案。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/pigsty/tree/master/app/ferretdb&#34;&gt;&lt;strong&gt;FerretDB&lt;/strong&gt;&lt;/a&gt;：基于 PostgreSQL 的开源 MongoDB 替代，兼容 MongoDB API / 驱动协议。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/pigsty/tree/master/app/pgml&#34;&gt;&lt;strong&gt;PostgresML&lt;/strong&gt;&lt;/a&gt;：使用SQL完成经典机器学习算法，调用、部署、训练 AI 模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 支持的 180+ &lt;a href=&#34;/zh/docs/reference/extension/&#34;&gt;&lt;strong&gt;扩展列表&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/desc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;开发者朋友们，你们的选择会塑造数据库世界的未来。希望我的这些工作，可以帮助你们更好的用好这世界上最先进的开源数据库内核 —— PostgreSQL。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4&#34;&gt;Medium 英文版&lt;/a&gt; | &lt;a href=&#34;https://github.com/Vonng/pigsty&#34;&gt;GitHub 仓库: Pigsty&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487025&amp;idx=1&amp;sn=c32f102718e3e9cf55cdefa7133f259f&amp;chksm=fe4b3beac93cb2fc25c2c2c4f9ea74d4353e565ef90c5e2bbaf5881a3a031cbdff706971af9a&amp;scene=21#wechat_redirect&#34;&gt;Pigsty v2.6：PostgreSQL 踢馆 OLAP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486931&amp;idx=1&amp;sn=91dbe43bb6d26c760c532f4aa8d6e3cb&amp;chksm=fe4b3808c93cb11e00194655a49bf7aa0d4d05a61a9b06ffcc57017c633de17066443ec62b6d&amp;scene=21#wechat_redirect&#34;&gt;技术极简主义：一切皆用Postgres&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486913&amp;idx=1&amp;sn=3b7d8cf3f0e323932aba52c897f3c7a4&amp;chksm=fe4b381ac93cb10cc6175c4c7978b5903946d369fe0084fbae5edf76ab08d84134260f28dffc&amp;scene=21#wechat_redirect&#34;&gt;PG生态新玩家ParadeDB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486903&amp;idx=1&amp;sn=01c57499f41e8f51045bb8dd52586595&amp;chksm=fe4b386cc93cb17a2d2fad903e809107162cc1e67e8ad7c8bfdd51de657c97f32f912cabe550&amp;scene=21#wechat_redirect&#34;&gt;DBA会被云淘汰吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486832&amp;idx=1&amp;sn=6b6b5f03b77c8a607f43f323fdf9ee7d&amp;chksm=fe4b38abc93cb1bd84e3360b857016a9be3329c91d47c998fe73dc37d1f4b2c5571161fb0ff2&amp;scene=21#wechat_redirect&#34;&gt;令人惊叹的PostgreSQL可伸缩性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486763&amp;idx=1&amp;sn=d05db7200faa6b23f61ca51328439833&amp;chksm=fe4b38f0c93cb1e6cebb4818d22555bbb94ed33f0a191b149383127c12ae3091add20a53f102&amp;scene=21#wechat_redirect&#34;&gt;中国对PostgreSQL的贡献约等于零吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486752&amp;idx=1&amp;sn=b10354a0cee5b0ccd88df606787e1297&amp;chksm=fe4b38fbc93cb1ed39b86882b596020ba3d2f5901bea530bf09cf2519e1ad248d1f93f648180&amp;scene=21#wechat_redirect&#34;&gt;展望PostgreSQL的2024 (Jonathan Katz)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486745&amp;idx=1&amp;sn=b92be029db148f53239c29bea912fc78&amp;chksm=fe4b38c2c93cb1d443ac8e6babe4d735f09404b6fac23c6045dd959f291bc28f13287571a189&amp;scene=21#wechat_redirect&#34;&gt;2023年度数据库：PostgreSQL (DB-Engine)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486710&amp;idx=1&amp;sn=261e4754df6c85954b50d8f68f277abe&amp;chksm=fe4b392dc93cb03bf26554a7a232f6217b8aa78d7e35ce0566d9404dc9526d3776141e628a2b&amp;scene=21#wechat_redirect&#34;&gt;MySQL的正确性为何如此拉垮？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486505&amp;idx=1&amp;sn=a585c9ff22a81a8efe6b87ce9bd66cb1&amp;chksm=fe4b39f2c93cb0e4c5d46f54e7ba9309dc0d66b5ac73bfe6722cc39f3959e47ae78210aeea1f&amp;scene=21#wechat_redirect&#34;&gt;向量数据库凉了吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486489&amp;idx=1&amp;sn=f2be1be496de46ac5ca816ac39cfdf24&amp;chksm=fe4b39c2c93cb0d4ff50dd6962370523a6271eab478fe9174c0c7a88fc88ea05fd3e51313ad3&amp;scene=21#wechat_redirect&#34;&gt;重新拿回计算机硬件的红利&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486379&amp;idx=1&amp;sn=b751c51a2b73e43e61487abfdc073da3&amp;chksm=fe4b3e70c93cb766625f9e18a92eabe31af437eb0fd7ed9d38b95750c743ce44934433c4dd66&amp;scene=21#wechat_redirect&#34;&gt;数据库真被卡脖子了吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486349&amp;idx=1&amp;sn=ade54570a726c0aee0d23444372bd6b9&amp;scene=21#wechat_redirect&#34;&gt;PG查询优化：观宏之道&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486241&amp;idx=1&amp;sn=f39b87095837b042e74f55f8e60bb7a9&amp;scene=21#wechat_redirect&#34;&gt;FerretDB：假扮成MongoDB的PostgreSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486234&amp;idx=1&amp;sn=d1273152e624fb31bf7be2c8f3991315&amp;scene=21#wechat_redirect&#34;&gt;如何用 pg_filedump 抢救数据？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486215&amp;idx=1&amp;sn=52ce37a537336a6d07448f35c7bc4cfd&amp;scene=21#wechat_redirect&#34;&gt;PGSQL x Pigsty: 数据库全能王来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486135&amp;idx=1&amp;sn=7d9c4920e94efba5d0e0b6af467f596c&amp;scene=21#wechat_redirect&#34;&gt;Pigsty 特性与快速上手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486101&amp;idx=1&amp;sn=30dfc9b11f4f812e699af2711f93931a&amp;scene=21#wechat_redirect&#34;&gt;PG先写脏页还是先写WAL？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485685&amp;idx=1&amp;sn=688f6d6d0f4128d7f77d710f04ff9024&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL：世界上最成功的数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485647&amp;idx=1&amp;sn=1ca65ee357516a06dca7ec13fa679f9a&amp;scene=21#wechat_redirect&#34;&gt;ISD数据集：分析全球120年气候变化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485589&amp;idx=1&amp;sn=931f2d794e9b8486f623f746db9f00cd&amp;scene=21#wechat_redirect&#34;&gt;AI大模型与向量数据库 PGVECTOR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;scene=21#wechat_redirect&#34;&gt;更好的开源RDS替代：Pigsty&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485240&amp;idx=1&amp;sn=9052f03ae2ef21d9e21037fd7a1fa7fe&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL 到底有多强？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485216&amp;idx=1&amp;sn=1b59c7dda5f347145c2f39d2679a274d&amp;scene=21#wechat_redirect&#34;&gt;为什么PostgreSQL是最成功的数据库？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484979&amp;idx=1&amp;sn=6b7afac9905b3d07ed7c1d43f8a2e464&amp;scene=21#wechat_redirect&#34;&gt;PG与Pigsty用户需求问卷调研结果&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484546&amp;idx=1&amp;sn=f89c7c3b87b24ee536bfc56b8b51c2d5&amp;scene=21#wechat_redirect&#34;&gt;高可用PgSQL集群架构设计与落地&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484591&amp;idx=1&amp;sn=a6ab13d93bfa26fca969ba163b01e1d5&amp;scene=21#wechat_redirect&#34;&gt;为什么说PostgreSQL前途无量？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484489&amp;idx=1&amp;sn=11163ce0afdb14af07619ae587fadb59&amp;scene=21#wechat_redirect&#34;&gt;Postgres本地化排序规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484483&amp;idx=1&amp;sn=47469a6a57a497a551022b287bf1b31e&amp;scene=21#wechat_redirect&#34;&gt;PG复制标识详解（Replica Identity）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484478&amp;idx=1&amp;sn=ea44675df79b60a12273e78b358bb557&amp;scene=21#wechat_redirect&#34;&gt;利用监控系统诊断PG慢查询&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484195&amp;idx=1&amp;sn=cea57269d0ffec585547727170887441&amp;scene=21#wechat_redirect&#34;&gt;数据库集群管理概念与实体命名规范&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484164&amp;idx=1&amp;sn=d69a31948d96507aca10a48587ea275c&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL的KPI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484189&amp;idx=1&amp;sn=19d4381c7ec4bc4498bd56c5ee9f916b&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL监控系统Pigsty概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483969&amp;idx=1&amp;sn=c5264dc6cd36d5696138bad085a72b37&amp;scene=21#wechat_redirect&#34;&gt;故障档案：PG安装扩展导致无法连接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483964&amp;idx=1&amp;sn=b128086019256401b135ea0aa07b0c1c&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL中的表锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483950&amp;idx=1&amp;sn=9c233f5e9a690706ae96ceabb938bff9&amp;scene=21#wechat_redirect&#34;&gt;把PG放入Docker是一个好主意吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483915&amp;idx=1&amp;sn=1793258171169a5b4a75944302f1ae3a&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL监控系统概览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483863&amp;idx=1&amp;sn=4b6851c0db5d2862e8698219800e28a7&amp;scene=21#wechat_redirect&#34;&gt;pg_dump导致的血案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483850&amp;idx=1&amp;sn=b10652fc434e3f17f56bcdeaacc91974&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL数据页面损坏修复&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483768&amp;idx=1&amp;sn=8a5005a95e874e6a13522cab0b5c1883&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL关系膨胀:原理，监控与处理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483719&amp;idx=1&amp;sn=1a0a04fe974ea20026d378bd65cda57f&amp;scene=21#wechat_redirect&#34;&gt;探探PostgreSQL开发规约&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483715&amp;idx=1&amp;sn=b17d3d8920a596c383745abd0dce0584&amp;scene=21#wechat_redirect&#34;&gt;并发异常那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483706&amp;idx=1&amp;sn=b842684b41ac6dde8310448ae0a81a76&amp;scene=21#wechat_redirect&#34;&gt;PG好处都有啥？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483692&amp;idx=1&amp;sn=0cdb3609daf22fa2a5614d280da96b66&amp;scene=21#wechat_redirect&#34;&gt;IP归属地查询的高效实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483688&amp;idx=1&amp;sn=0b08c7c47e28ceae77f89a78d38b029f&amp;scene=21#wechat_redirect&#34;&gt;PostGIS高效解决行政区划归属查询问题&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 技术极简主义：一切皆用Postgres</title>
      <link>/zh/blog/pg/just-use-pg/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/just-use-pg/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/just-use-pg/featured_hu3e6886bb80b31bf144673cb98ad943e5_365913_640x0_resize_q75_catmullrom.jpg" width="640" height="400"/>]]>
        
        &lt;p&gt;本文由 Stephan Schmidt @ KingOfCoders &lt;strong&gt;发表于 Hacker News 并引发热议&lt;/strong&gt;[1]：使用 Postgres 替代 Kafka、RabbitMQ、ElasticSearch、Mongo 和 Redis 是一种切实可行的方式，这样做可以极大降低系统复杂度，并将敏捷性发挥到极致。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;如何简化复杂度并快速前进：&lt;strong&gt;用 PostgreSQL 完成所有任务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;欢迎，HN（Hacker News）读者们。技术是关于取舍的艺术。全面使用 PostgreSQL 完成所有工作，也是一种策略与权衡。显然，我们应根据需求选用合适的工具。很多情况下，这个工具就是 &lt;strong&gt;Postgres&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在辅助许多初创企业的过程中，我观察到很多人过度复杂化他们的系统，这样做的公司远超过那些选择了过于简单工具的公司。如果你们拥有超过一百万用户，超过五十名开发者，并且你们确实需要 Kafka、Spark 和 Kubernetes，那么请便。如果你的系统数量比开发者还多，只用 Postgres 就是一个明智之选。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附言：全面使用 Postgres 并不意味着单台器搞定一切 ;-)&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;简单来说一切皆可用-postgres-解决&#34;&gt;&lt;strong&gt;简单来说，一切皆可用 Postgres 解决&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;请神容易送神难，让&lt;strong&gt;复杂度&lt;/strong&gt;溜进家里，再送走就没那么容易了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/just-use-pg/just-use-pg-1.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;然而我们有极致简化的方案&#34;&gt;然而，我们有极致简化的方案&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/just-use-pg/just-use-pg-2.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在初创公司中简化技术栈、减少组件、加快开发速度、降低风险并提供更多功能特性的方法之一就是**“一切皆用 Postgres”**。Postgres 能够取代许多后端技术，包括 Kafka、RabbitMQ、ElasticSearch，Mongo和 Redis ，至少到数百万用户时都毫无问题。&lt;/p&gt;
&lt;p&gt;使用 Postgres 替代 Redis 作为缓存，使用 &lt;strong&gt;UNLOGGED Table&lt;/strong&gt;[3] 并用 TEXT 类型存储 JSON 数据，并使用存储过程来添加并强制执行过期时间，正如 Redis 所做的那样。&lt;/p&gt;
&lt;p&gt;使用 Postgres 作为消息队列，采用 &lt;strong&gt;SKIP LOCKED&lt;/strong&gt;[4] 来代替Kafka（如果你只需要消息队列的能力）。&lt;/p&gt;
&lt;p&gt;使用加装了 &lt;strong&gt;TimescaleDB&lt;/strong&gt;[5] 扩展的 Postgres 作为数据仓库。&lt;/p&gt;
&lt;p&gt;使用 PostgreSQL 的 &lt;strong&gt;JSONB&lt;/strong&gt;[6] 类型来存储、索引、搜索 JSON 文档，从而替代 MongoDB。&lt;/p&gt;
&lt;p&gt;使用加装 &lt;strong&gt;pg_cron&lt;/strong&gt;[7] 扩展的 Postgres 作为定时任务守护程序，在特定时间执行特定任务，例如发送邮件，或向消息队列中添加事件。&lt;/p&gt;
&lt;p&gt;使用 Postgres + PostGIS 执行 &lt;strong&gt;地理空间查询&lt;/strong&gt;[8]。&lt;/p&gt;
&lt;p&gt;使用 Postgres 进行&lt;strong&gt;全文搜索&lt;/strong&gt;[9]，加装 &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486913&amp;idx=1&amp;sn=3b7d8cf3f0e323932aba52c897f3c7a4&amp;chksm=fe4b381ac93cb10cc6175c4c7978b5903946d369fe0084fbae5edf76ab08d84134260f28dffc&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;ParadeDB&lt;/strong&gt;&lt;/a&gt; 替代 ElasticSearch。&lt;/p&gt;
&lt;p&gt;使用 Postgres &lt;strong&gt;在数据库中生成JSON&lt;/strong&gt;[10]，免去服务器端代码编写，直接供 API 使用。&lt;/p&gt;
&lt;p&gt;使用 &lt;strong&gt;GraphQL适配器&lt;/strong&gt;[11]，也可以让 PostgreSQL 提供 GraphQL 服务。&lt;/p&gt;
&lt;p&gt;我已明言，&lt;strong&gt;一切皆可Postgres&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;关于作者-stephan&#34;&gt;关于作者 Stephan&lt;/h3&gt;
&lt;p&gt;作为一名CTO、临时CTO、CTO教练以及开发者，斯蒂芬在许多快速成长的初创公司的技术部门中都留下了自己的足迹。他在1981年左右，因为想编写视频游戏，就在一家百货公司自学了编程。斯蒂芬在乌尔姆大学（University of Ulm）学习计算机科学，专攻分布式系统和人工智能，并且还学习了哲学。90年代互联网进入德国时，他作为几家初创公司的首位编程员工。他创办过一家获风险资本投资的初创公司，在其他获得风险资本投资的快速成长的初创公司中负责架构、流程和成长挑战，曾在ImmoScout担任管理职位，并且是一家eBay Inc.公司的CTO。在他的妻子成功出售了她的初创公司后，他们搬到了海边，斯蒂芬开始从事CTO辅导工作。你可以在LinkedIn上找到他，或者在Twitter上关注@KingOfCoders。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;译者评论&#34;&gt;译者评论&lt;/h3&gt;
&lt;p&gt;译者：&lt;strong&gt;冯若航&lt;/strong&gt;，创业者与 PostgreSQL 专家，下云倡导者，开源 PG RDS 替代，开箱即用的 PostgreSQL 发行版 —— &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;chksm=fe4b3d95c93cb4833b8e80433cff46a893f939154be60a2a24ee96598f96b32271301abfda1f&amp;scene=21#wechat_redirect&#34;&gt;Pigsty&lt;/a&gt; 作者。&lt;/p&gt;
&lt;p&gt;使用 Postgres 完成一切工作并不是一种空想，而是一种正在流行起来的最佳实践。对此我感到非常欣慰：早在 2016 年时我便看到了这里的潜力[12]并选择躬身入局，而事情的发展正如所愿。&lt;/p&gt;
&lt;p&gt;我曾任职的探探，便是这条道路的先锋 —— PostgreSQL for Everything。这是一个由瑞典创始团队打造的中国互联网 App —— 使用 PostgreSQL 的规模与复杂度在中国首屈一指。探探的技术架构选型参照了 &lt;strong&gt;Instagram&lt;/strong&gt; —— 或者说更为激进，几乎所有业务逻辑都使用 PostgreSQL 存储过程实现（甚至包括 100ms 的推荐算法！）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/just-use-pg/just-use-pg-arch-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;探探整个系统架构围绕 PostgreSQL 而设计并展开。几百万日活，几百万全局 DB-TPS，几百 TB数据的量级下，数据组件只用了 PostgreSQL 。直到接近千万日活，才开始进行架构调整引入独立的数仓，消息队列和缓存。在 2017 年，我们甚至没有使用 Redis 缓存，250万 TPS 完全是由一百多台服务器上的 PostgreSQL 直接扛下的。消息队列也是用 PostgreSQL 实现的，早中期的数据分析也是由一套十几TB的专用PG集群负责。我们早已经践行了 —— “一切皆用 PostgreSQL 的理念”，并从中获益良多。&lt;/p&gt;
&lt;p&gt;这个故事还有下半段 —— 随后的 “微服务改造” 带来了海量的复杂度，最终让系统陷入泥潭。这让我从另一个角度更加确信这一点 —— 我非常怀念一切皆用 PostgreSQL 时那种简单可靠高效敏捷的状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/just-use-pg/just-use-pg-arch-2.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;PostgreSQL 并不是一个简单的关系型数据库，而是一个数据管理的抽象框架，具有囊括一切，吞噬整个数据库世界的潜力。在十年前，这仅仅是一种潜力与可能性，在十年后，它已经兑现成为真正的影响力。而我很高兴能见证这个过程，并推动这一进程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486215&amp;idx=1&amp;sn=52ce37a537336a6d07448f35c7bc4cfd&amp;chksm=fe4b3edcc93cb7ca2dc87602430c2beb09ae5e7dcb568158541a1bd026e305d69d94cea81da4&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;PostgreSQL is for Everything!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486215&amp;idx=1&amp;sn=52ce37a537336a6d07448f35c7bc4cfd&amp;scene=21#wechat_redirect&#34;&gt;PGSQL x Pigsty: 数据库全能王来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486913&amp;idx=1&amp;sn=3b7d8cf3f0e323932aba52c897f3c7a4&amp;chksm=fe4b381ac93cb10cc6175c4c7978b5903946d369fe0084fbae5edf76ab08d84134260f28dffc&amp;scene=21#wechat_redirect&#34;&gt;PG生态新玩家ParadeDB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486241&amp;idx=1&amp;sn=f39b87095837b042e74f55f8e60bb7a9&amp;scene=21#wechat_redirect&#34;&gt;FerretDB：假扮成MongoDB的PostgreSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485589&amp;idx=1&amp;sn=931f2d794e9b8486f623f746db9f00cd&amp;scene=21#wechat_redirect&#34;&gt;AI大模型与向量数据库 PGVECTOR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485240&amp;idx=1&amp;sn=9052f03ae2ef21d9e21037fd7a1fa7fe&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL 到底有多强？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485685&amp;idx=1&amp;sn=688f6d6d0f4128d7f77d710f04ff9024&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL：世界上最成功的数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485216&amp;idx=1&amp;sn=1b59c7dda5f347145c2f39d2679a274d&amp;scene=21#wechat_redirect&#34;&gt;为什么PostgreSQL是最成功的数据库？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484591&amp;idx=1&amp;sn=a6ab13d93bfa26fca969ba163b01e1d5&amp;scene=21#wechat_redirect&#34;&gt;为什么说PostgreSQL前途无量？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;scene=21#wechat_redirect&#34;&gt;更好的开源RDS替代：Pigsty&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt; Just use Postgres for everything: &lt;em&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=33934139&#34;&gt;https://news.ycombinator.com/item?id=33934139&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2]&lt;/code&gt; 技术极简主义宣言: &lt;em&gt;&lt;a href=&#34;https://www.radicalsimpli.city/&#34;&gt;https://www.radicalsimpli.city/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[3]&lt;/code&gt; UNLOGGED Table: &lt;em&gt;&lt;a href=&#34;https://www.compose.com/articles/faster-performance-with-unlogged-tables-in-postgresql/&#34;&gt;https://www.compose.com/articles/faster-performance-with-unlogged-tables-in-postgresql/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[4]&lt;/code&gt; SKIP LOCKED: &lt;em&gt;&lt;a href=&#34;https://www.enterprisedb.com/blog/what-skip-locked-postgresql-95&#34;&gt;https://www.enterprisedb.com/blog/what-skip-locked-postgresql-95&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[5]&lt;/code&gt; Timescale: &lt;em&gt;&lt;a href=&#34;https://www.timescale.com/&#34;&gt;https://www.timescale.com/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[6]&lt;/code&gt; JSONB: &lt;em&gt;&lt;a href=&#34;https://scalegrid.io/blog/using-jsonb-in-postgresql-how-to-effectively-store-index-json-data-in-postgresql/&#34;&gt;https://scalegrid.io/blog/using-jsonb-in-postgresql-how-to-effectively-store-index-json-data-in-postgresql/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[7]&lt;/code&gt; pg_cron: &lt;em&gt;&lt;a href=&#34;https://github.com/citusdata/pg_cron&#34;&gt;https://github.com/citusdata/pg_cron&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[8]&lt;/code&gt; 地理空间查询: &lt;em&gt;&lt;a href=&#34;https://postgis.net/&#34;&gt;https://postgis.net/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[9]&lt;/code&gt; 全文搜索: &lt;em&gt;&lt;a href=&#34;https://supabase.com/blog/postgres-full-text-search-vs-the-rest&#34;&gt;https://supabase.com/blog/postgres-full-text-search-vs-the-rest&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[10]&lt;/code&gt; 在数据库中生成JSON: &lt;em&gt;&lt;a href=&#34;https://www.amazingcto.com/graphql-for-server-development/&#34;&gt;https://www.amazingcto.com/graphql-for-server-development/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[11]&lt;/code&gt; GraphQL适配器: &lt;em&gt;&lt;a href=&#34;https://graphjin.com/&#34;&gt;https://graphjin.com/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[12]&lt;/code&gt; PG与MySQL相比优势何在？: &lt;em&gt;&lt;a href=&#34;https://www.zhihu.com/question/20010554/answer/94999834&#34;&gt;https://www.zhihu.com/question/20010554/answer/94999834&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PG生态新玩家：ParadeDB</title>
      <link>/zh/blog/pg/paradedb/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/paradedb/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/paradedb/featured_hu5dad383ddf0f5c5c1fffb938b806e995_1849_640x0_resize_catmullrom_3.png" width="640" height="337"/>]]>
        
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/bx2dRxlrtLcM6AD2qsplQQ&#34;&gt;微信公众号原文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pg生态新玩家paradedb&#34;&gt;PG生态新玩家ParadeDB&lt;/h2&gt;
&lt;p&gt;YC S23 投了一个新项目 &lt;a href=&#34;https://www.paradedb.com/&#34;&gt;ParadeDB&lt;/a&gt;， 非常有意思。他们的 Slogan 是 “Postgres for Search &amp;amp; Analytics —— Modern Elasticsearch Alternative built on Postgres”。就是用于搜索和分析的 PostgreSQL，旨在成为 Elasticsearch 的替代。&lt;/p&gt;
&lt;p&gt;PostgreSQL 的生态确实越来越繁荣了，在基于 PG 的扩展与衍生中，我们已经有了基于 MongoDB 开源替代 —— FerretDB，SQL Server 开源替代 Babelfish，Firebase 开源替代 Supabase，AirTable 开源替代 NocoDB，现在又多了 ElasticSearch 开源替代 —— ParadeDB。&lt;/p&gt;
&lt;p&gt;ParadeDB 实际上是由三个 PostgreSQL 扩展组成：&lt;code&gt;pg_bm25&lt;/code&gt;，&lt;code&gt;pg_analytics&lt;/code&gt;，以及 &lt;code&gt;pg_sparse&lt;/code&gt;。这三个扩展都可以独立使用了。我已经将这几个扩展打好包（v0.5.6），并将会在 Pigsty 的下个 Release 中默认收录，让用户能够开箱即用。&lt;/p&gt;
&lt;p&gt;我翻译了 ParadeDB 的官网介绍与四篇博客文章，为您介绍这个 PostgreSQL 生态的新星。 今天是第一篇 —— 概览&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/paradedb/paradedb-rank.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;paradedb&#34;&gt;ParadeDB&lt;/h2&gt;
&lt;p&gt;我们荣幸地向您介绍 ParadeDB：针对搜索场景优化的 PostgreSQL 数据库。&lt;strong&gt;ParadeDB&lt;/strong&gt; 是第一个旨在成为 Elasticsearch 替代的 Postgres 数据库构建，被设计为可以在PG表上进行闪电般快速的全文检索、语义检索、以及混合检索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/paradedb/paradedb-logo.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;paradedb解决什么问题&#34;&gt;ParadeDB解决什么问题？&lt;/h3&gt;
&lt;p&gt;对于许多组织而言，搜索依然是一个未解问题 —— 尽管有像 Elasticsearch 这样的巨头存在，但大多数与其打过交道的开发者都知道，运行、调优和管理 Elasticsearch 是多么痛苦的一件事。虽然也有其他的搜索引擎服务，但在现有数据库上粘连对接这些外部服务，会引入更多重建索引和数据复制的复杂难题与成本。&lt;/p&gt;
&lt;p&gt;那些追求统一权威数据源与搜索引擎的开发者转了 Postgres，PG 已经通过 &lt;code&gt;tsvector&lt;/code&gt; 提供了基本的全文检索能力，也通过 &lt;code&gt;pgvector&lt;/code&gt; 提供了向量语义检索能力。这些工具也许对于简单用例和中等大小的数据集来说很好使，但当表变大或查询变得复杂时就有些不够用了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大表上的排序和关键词搜索非常缓慢&lt;/li&gt;
&lt;li&gt;不支持 BM25 计算&lt;/li&gt;
&lt;li&gt;没有混合检索支持，将向量搜索与全文搜索的技术&lt;/li&gt;
&lt;li&gt;没有实时搜索 — 数据必须手动重新索引或重新嵌入&lt;/li&gt;
&lt;li&gt;对复杂查询如分面或相关性调优的支持有限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到目前为止，我们已经目睹了许多工程团队用很勉强的方式在 Postgres 上叠加了一套 Elasticsearch，随即因为后者太过于臃肿、昂贵或复杂，而最终放弃。我们在想：如果 Postgres 本身就带有 ElasticSearch 水平的搜索会发生什么？那么开发者就不会有这种两难选择了 —— 统一使用 PostgreSQL 但搜索能力受限，还是使用事实源和搜索引擎两种独立的服务？&lt;/p&gt;
&lt;h3 id=&#34;paradedb适用于谁&#34;&gt;ParadeDB适用于谁？&lt;/h3&gt;
&lt;p&gt;Elasticsearch 拥有广泛的应用场景，但我们并不企图一蹴而就地覆盖所有场景——至少现阶段不是。我们更倾向于专注于一些核心场景 —— 专为那些希望在 PostgreSQL 上进行搜索的用户服务。对于以下情况，ParadeDB 会是您的理想选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;希望使用单一 Postgres 作为事实来源，厌恶在多个服务之间搬运复制数据。&lt;/li&gt;
&lt;li&gt;希望在不损害性能与可伸缩性的前提下，对存储在 Postgres 中的海量文档进行全文搜索。&lt;/li&gt;
&lt;li&gt;希望 ANN/相似度搜索与全文搜索相结合，从而获得更精准的语义匹配效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;paradedb产品介绍&#34;&gt;ParadeDB产品介绍&lt;/h3&gt;
&lt;p&gt;ParadeDB 是一个完全托管的 Postgres 数据库，具有在任何其他 Postgres 提供者中未发现的索引和搜索 Postgres 表的能力：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BM25全文搜索&lt;/td&gt;
&lt;td&gt;支持布尔、模糊、提升和关键字查询的全文搜索。搜索结果使用 BM25 算法打分。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分面搜索&lt;/td&gt;
&lt;td&gt;Postgres 列可以定义为分面，以便轻松分桶和收集指标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;混合搜索&lt;/td&gt;
&lt;td&gt;搜索结果可以打分，综合考虑语义相关性（向量搜索）与全文相关性（ BM25）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分布式搜索&lt;/td&gt;
&lt;td&gt;表可以进行分片，以便进行并行查询加速。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生成式搜索&lt;/td&gt;
&lt;td&gt;Postgres 列可以输入到大型语言模型（LLMs）中，用于自动摘要、分类或文本生成。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实时搜索&lt;/td&gt;
&lt;td&gt;文本索引和向量列自动与底层数据保持同步。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与 AWS RDS 等托管服务不同，ParadeDB 是一个 PostgreSQL 扩展插件，不需要任何设置，可以与整个 PG 生态集成，并完全可定制。ParadeDB 是开源的（AGPLv3），并提供了一个简单的 Docker Compose 模板以满足需要自建/定制的开发者的需求。&lt;/p&gt;
&lt;h3 id=&#34;paradedb-的构建方式&#34;&gt;ParadeDB 的构建方式&lt;/h3&gt;
&lt;p&gt;ParadeDB 的核心是一个带有自定义扩展的标准 Postgres 数据库，这些扩展使用 Rust 编写，引入了增强的搜索能力。&lt;/p&gt;
&lt;p&gt;ParadeDB 的搜索引擎基于 Tantivy 构建，Tantivy 是受 Apache Lucene 启发的开源 Rust 搜索库。其索引作为原生的 PG 索引存储在PG中，从而避免了繁琐的数据复制/ETL工作，并同时可以确保事务 ACID。&lt;/p&gt;
&lt;p&gt;ParadeDB 为 Postgres 生态提供了一个新扩展：&lt;code&gt;pg_bm25&lt;/code&gt;。&lt;code&gt;pg_bm25&lt;/code&gt; 使用 BM25 评分算法在 Postgres 中实现了基于 Rust 的全文搜索。ParadeDB 会预装这个扩展插件。&lt;/p&gt;
&lt;h3 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h3&gt;
&lt;p&gt;ParadeDB 的托管云版本目前处于 PrivateBeta 阶段。我们的目标是在 2024 年初推出一个自助服务的云平台。如果你想在此期间访问 PrivateBeta 版本，欢迎&lt;a href=&#34;https://paradedb.typeform.com/to/jHkLmIzx?typeform-source=www.paradedb.com&#34;&gt;加入我们的等待名单&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们核心团队的重点是开发 ParadeDB 的开源版本，将在 2023 年冬季推出。&lt;/p&gt;
&lt;p&gt;我们 Build in Public，并很高兴能与整个社区分享 ParadeDB。欢迎关注我们，在未来的博文中我们会进一步详细介绍 ParadeDB 背后的有趣技术挑战。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 展望 PostgreSQL 的2024</title>
      <link>/zh/blog/pg/pg-in-2024/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-in-2024/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-in-2024/featured_hu02aa61ae1d9de35cbe238d2676170cb9_195227_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;本文是 PostgreSQL 核心组成员 Jonathan Katz 对 2024 年 PostgreSQL 项目的未来展望，并回顾过去几年 PostgreSQL 所取得的进展。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：Jonathan Kats，Amazon RDS 首席产品经理兼技术主管， PostgreSQL 全球开发组核心成员与主要贡献者。博客：https://jkatz05.com/。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;译者&lt;/strong&gt;：冯若航 / Vonng。磐吉云数创始人 / CEO，&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485685&amp;idx=1&amp;sn=688f6d6d0f4128d7f77d710f04ff9024&amp;chksm=fe4b3d2ec93cb438665b7e0d554511674091b2e486a70b8a3eb7e2c7a53681fb9834a08cb3c3&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/a&gt; 专家与布道师，开源 RDS PG —— &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;chksm=fe4b3d95c93cb4833b8e80433cff46a893f939154be60a2a24ee96598f96b32271301abfda1f&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt; 作者。博客：https://vonng.com&lt;/p&gt;
&lt;p&gt;点击“查看原文”查看英文原文：https://jkatz05.com/post/postgres/postgresql-2024/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我经常听到的问题中，有一个尤为深刻：&lt;em&gt;&lt;strong&gt;“PostgreSQL 将走向何方？”&lt;/strong&gt;&lt;/em&gt;  —— 这也是我经常问自己的一个问题。这个问题不仅仅局限在数据库内核引擎的技术层面，而关乎整个社区的方方面面 —— 包括相关的开源项目、活动和社区发展。PostgreSQL 已经广受欢迎，并且已经是第四次被 &lt;a href=&#34;https://db-engines.com/en/blog_post/106&#34;&gt;DB Engine评为“&lt;strong&gt;年度数据库&lt;/strong&gt;”&lt;/a&gt;。尽管已取得显著成功，我们依然需要不时地后退一步，从更宏观的角度思考 PostgreSQL 的未来。虽然这种思考不会立即带来显著的变化，但它对于社区正在进行的工作提供了重要的背景板。&lt;/p&gt;
&lt;p&gt;新年是思考 &lt;strong&gt;“PostgreSQL的未来”&lt;/strong&gt; 这一问题的绝佳时机，我对2024年的PostgreSQL发展方向也有一些思考，这里是我的一些想法：这并不是一个路线图，而是我个人对 PostgreSQL 发展方向的一些想法。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postgresql功能开发&#34;&gt;PostgreSQL功能开发&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting&#34;&gt;PGCon 2023 开发者会议&lt;/a&gt;上，我提出了一个题为“&lt;strong&gt;PostgreSQL 用户面临的重大挑战是什么？&lt;/strong&gt;”的话题。这个话题旨在探讨用户的常见需求和数据库工作负载的发展趋势，以此来判断我们是否正在朝着正确的方向发展 PostgreSQL。通过多次交谈和观察，我提出了三个主要的特性类目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;面向开发者的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些特性组将成为 2024 年，甚至更长时间段里的工作重点。接下来，我将对每个特性类目进行更深入的探讨。&lt;/p&gt;
&lt;h3 id=&#34;可用性&#34;&gt;可用性&lt;/h3&gt;
&lt;p&gt;对于PostgreSQL现有用户和潜在用户来说，提高可用性是最迫切的需求。这个需求不仅仅是排在第一位，而且毫不夸张地讲，也同时能排在第二位和第三位。虽然重启 PostgreSQL 通常可以迅速完成，但在某些极端情况下，这个过程可能耗时过长。此外，长时间的写入阻塞，例如某些锁操作，也可被视作一种“停机时间”。&lt;/p&gt;
&lt;p&gt;大部分 PostgreSQL 用户对现有的可用性水平已感满意，但有些工作负载对可用性的要求极为严格。为了更好地满足这些要求，我们需要进行额外的开发工作。这篇文章或这一小节就聚焦于这一点：通过改进使 PostgreSQL 适用于更多有严苛可用性需求的环境。&lt;/p&gt;
&lt;h4 id=&#34;逻辑复制是如何助益于双主蓝绿部署零停机升级以及其他工作流的&#34;&gt;逻辑复制是如何助益于双主，蓝绿部署，零停机升级，以及其他工作流的&lt;/h4&gt;
&lt;p&gt;对于现有的 PostgreSQL 用户，以及那些计划迁移至 PostgreSQL 的用户来说，提升可用性是最重要的需求。这通常指的是&lt;a href=&#34;https://en.wikipedia.org/wiki/High_availability&#34;&gt;高可用&lt;/a&gt;——即在计划内的更新或计划外的中断期间，数据库能够持续进行读写操作的能力。PostgreSQL 已经提供了许多支持高可用的特性，如流复制。然而为了实现最高水平的可用性，通常还需要借助额外的服务或诸如 &lt;a href=&#34;https://github.com/zalando/patroni&#34;&gt;Patroni&lt;/a&gt; 这样的工具。&lt;/p&gt;
&lt;p&gt;我聊过许多用户，在绝大多数情况下，他们对 PostgreSQL 提供的可用性是满意的。但我也发现了一个新趋势：现在有一些负载对可用性的要求越来越高，15-30 秒的离线窗口已不够了。这包括计划内的中断（如小版本升级、大版本升级），以及计划外的中断。一些用户表示，他们的系统最多只能承受1秒的不可用时间。起初我对这种要求持怀疑态度，但了解到这些工作负载的具体用途后，我认为1秒确实是一个合理的需求。&lt;/p&gt;
&lt;p&gt;在持续提高 PostgreSQL 可用性方面，&lt;a href=&#34;https://www.postgresql.org/docs/current/logical-replication.html&#34;&gt;逻辑复制&lt;/a&gt; 是一个关键特性。逻辑复制能够实时将 PostgreSQL 数据库中的变更流式传输到任何支持 PostgreSQL 逻辑复制协议的系统中。PostgreSQL 中的逻辑复制&lt;a href=&#34;https://jkatz05.com/post/postgres/postgres-10-tribute/&#34;&gt;已经存在了一段时间&lt;/a&gt;，而&lt;a href=&#34;https://www.postgresql.org/about/news/postgresql-16-released-2715/&#34;&gt;最近的版本&lt;/a&gt;在可用性方面带来了显著的改进，包括功能和性能上的新特性。&lt;/p&gt;
&lt;p&gt;逻辑复制在 PostgreSQL 的大版本升级过程中扮演着关键角色，与传统的物理（或二进制）复制相比，它的一大优势在于能够实现跨版本的数据流转。举例来说，通过逻辑复制，我们可以轻松地将 PostgreSQL 15 的数据变更实时传输至 PostgreSQL 16，从而大幅缩减升级过程中的停机时间。这种方法已在 &lt;a href=&#34;https://www.instacart.com/company/how-its-made/zero-downtime-postgresql-cutovers/&#34;&gt;Instacart 的零停机大版本升级&lt;/a&gt;中得到成功应用。然而，PostgreSQL 在支持此类用例和其他高可用性场景方面仍有待提升。未来的发展预计将进一步优化支持&lt;a href=&#34;https://en.wikipedia.org/wiki/Blue-green_deployment&#34;&gt;蓝绿部署&lt;/a&gt;的功能，以实现更加无缝的数据迁移和应用升级。&lt;/p&gt;
&lt;p&gt;除了在大版本升级中的用例，逻辑复制本身也是构建高可用系统的重要手段。&amp;quot;&lt;strong&gt;多主复制&lt;/strong&gt;&amp;ldquo;就是其中的一个典型应用，它允许多个数据库实例同时接受写入操作，并在它们之间同步数据变更。这种模式尤其适用于对停机时间敏感的系统（例如：不接受1秒以上的不可用时间），其设计目标是在任何写入数据库出现问题时，应用能迅速切换到另一可用的写入数据库，而不必等待它被提升为新主库。构建与管理这样的双活系统是极度复杂的：它会影响到应用设计，并需要用户提供对写入冲突进行管理的策略，而且为了确保数据完整性（比如：冲突风暴），需要有仔细设计的容错监控系统 —— （比如，一个实例如果几个小时都无法复制它的变更会发生什么？）&lt;/p&gt;
&lt;p&gt;大版本升级和双活复制案例为我们指明了改善 PostgreSQL 逻辑复制的方向。&lt;a href=&#34;https://amitkapila16.blogspot.com/&#34;&gt;Amit Kapila&lt;/a&gt; 是众多逻辑复制功能开发的领导者。今年，他和我共同在一场会议上发表了题为“&lt;a href=&#34;https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4783/slides/434/pgconfeu2023_active_active.pdf&#34;&gt;PostgreSQL 中的多主复制之旅&lt;/a&gt;”的演讲（并提供了&lt;a href=&#34;https://www.youtube.com/watch?v=jPp4XIY4XRw&#34;&gt;视频版本&lt;/a&gt;），深入探讨了为何针对这些用例的解决方案至关重要、PostgreSQL 在逻辑复制方面取得的成就，以及为更好支持这些场景所需做的工作。好消息是从 PostgreSQL 16 版本起，我们已经有了大部分基础模块来支持双活复制、蓝绿部署和零停机大版本升级。虽然这些功能可能没有全部集成在内核中，但某些扩展（比如我参与开发的&lt;a href=&#34;https://aws.amazon.com/blogs/database/using-pgactive-active-active-replication-extension-for-postgresql-on-amazon-rds-for-postgresql/&#34;&gt;&lt;code&gt;pgactive&lt;/code&gt;&lt;/a&gt;）已提供了这些能力。&lt;/p&gt;
&lt;p&gt;在 2024 年，有多项努力旨在帮助缩小这些功能差距。对于 PostgreSQL 17 来说（惯例免责声明：这些特性可能不会发布），有一个重点是确保逻辑复制能够与关键工作流（如&lt;a href=&#34;https://www.postgresql.org/docs/current/pgupgrade.html&#34;&gt;&lt;code&gt;pg_upgrade&lt;/code&gt;&lt;/a&gt;和&lt;a href=&#34;https://commitfest.postgresql.org/46/4423/&#34;&gt;高可用系统&lt;/a&gt;）协同工作，支持更多类型的数据变更（如&lt;a href=&#34;https://commitfest.postgresql.org/46/3823/&#34;&gt;序列/Sequence&lt;/a&gt;）的复制，扩展对更多命令（如 &lt;a href=&#34;https://commitfest.postgresql.org/46/3595/&#34;&gt;DDL&lt;/a&gt;）的支持，提高性能，以及增加简化逻辑复制管理的特性（如节点同步/再同步）。&lt;/p&gt;
&lt;p&gt;这些努力能让 PostgreSQL 适用于更多种类的负载，特别是那些有着极致严苛可用性要求的场景，并简化用户在生产环境中滚动发布新变更的方式。尽管改进逻辑复制功能的道路仍然漫长，但 2024 年无疑将为 PostgreSQL 带来更多强大的功能特性，帮助用户在关键环境中更加高效地运行 PostgreSQL。&lt;/p&gt;
&lt;h4 id=&#34;减少锁定&#34;&gt;减少锁定&lt;/h4&gt;
&lt;p&gt;另一个有关可用性的领域是&lt;strong&gt;模式维护操作&lt;/strong&gt;（即&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_definition_language&#34;&gt;DDL&lt;/a&gt;语句）。例如，&lt;a href=&#34;https://www.postgresql.org/docs/current/sql-altertable.html&#34;&gt;&lt;code&gt;ALTER TABLE&lt;/code&gt;&lt;/a&gt;的大部分形式会对表施加 &lt;a href=&#34;https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-TABLES&#34;&gt;&lt;code&gt;ACCESS EXCLUSIVE&lt;/code&gt;&lt;/a&gt; 锁，从而阻止对该表的所有并发访问。对于许多用户来说这等同于不可用，即使这只是数据的一个子集。PostgreSQL 缺乏对非阻塞/在线模式维护操作的完整支持，随着其他关系数据库也开始支持这些功能，这方面的不足开始逐渐凸显。&lt;/p&gt;
&lt;p&gt;目前虽有多种工具和扩展支持非阻塞模式更新，但如果 PostgreSQL 能原生支持更广泛的非阻塞模式变更，那肯定更方便，而且性能也会更好。从设计上来看，我们已有了开发此功能的基础，但还需要一些时间来实现。尽管我不确定是否有正在进行中的具体实现，但我相信在2024年我们应该在这方面取得更多进展：让用户能够在不阻塞写入的情况下执行大部分（或全部）DDL 命令&lt;/p&gt;
&lt;h4 id=&#34;性能&#34;&gt;性能&lt;/h4&gt;
&lt;p&gt;性能是一个不断持续演进的特性 —— 我们总是会追求更快的速度。好消息是，PostgreSQL 在垂直扩展能力上享有盛誉 —— 当你为单个实例提供更多硬件资源时，PostgreSQL 也能扩展自如。虽然在某些场景下，水平扩展读写操作是有意义的。但我们还是要确保 PostgreSQL 能够随着计算和内存资源的增加而持续扩展。&lt;/p&gt;
&lt;p&gt;举个更具体的例子：考虑到 AWS EC2 实例中有着高达 &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/high-memory/&#34;&gt;448 vCPU / 24TB 内存 &lt;/a&gt;的选配项 ——  PostgreSQL 能否在单个实例上充分利用这些资源呢？我们可以根据 PostgreSQL 用户现在与未来可能使用的硬件配置，设定一个性能提升的目标，并持续提升 PostgreSQL 的整体表现。&lt;/p&gt;
&lt;p&gt;在 2024 年，已经有多项工作致力于继续垂直扩展 PostgreSQL。其中最大的努力之一，也是一个持续多年的项目，就是在 PostgreSQL 中支持 DirectIO（DIO）与 Asynchronous IO（AIO）。至于细节我就留给 Andres Freund 在&lt;a href=&#34;https://www.pgconf.eu/&#34;&gt;PGConf.EU&lt;/a&gt;上关于&lt;a href=&#34;https://anarazel.de/talks/2023-12-14-pgconf-eu-path-to-aio/path-to-aio.pdf&#34;&gt;在 PostgreSQL 中添加 AIO 的现状&lt;/a&gt;的PPT来讲了。看起来在 2024 年，我们将离完全支持 AIO 更进一步。&lt;/p&gt;
&lt;p&gt;另一项让我感兴趣的工作是&lt;a href=&#34;https://wiki.postgresql.org/wiki/Parallel_Recovery&#34;&gt;并行恢复&lt;/a&gt;。有着大量写入负载的 PostgreSQL 用户往往会推迟 &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-checkpoint.html&#34;&gt;Checkpoint&lt;/a&gt; 以减少 I/O 负载。对于忙碌的系统而言，如果 PostgreSQL 在执行 Checkpoint 的相当一段时间后才崩溃，那么当 PostgreSQL 重新启动时，它会进入 &amp;ldquo;崩溃恢复 &amp;ldquo;状态：它会重新执行自上次 Checkpoint 以来的所有变更，以便达到一致的状态 —— 在崩溃恢复期间，PostgreSQL 不能读也不能写，这意味着它不可用。这对繁忙的核心系统来说是个问题：虽然 PostgreSQL 可以接受并发写入，但它重放变更时只能使用单个进程。如果一个繁忙系统崩溃于上个检查点后的一小时，那么系统会需要离线追赶几个小时，才能达到一致的状态点重新上线！&lt;/p&gt;
&lt;p&gt;克服这一局限性的方法之一是支持&amp;rdquo;&lt;a href=&#34;https://wiki.postgresql.org/wiki/Parallel_Recovery&#34;&gt;并行恢复&lt;/a&gt;&amp;quot;，或者说能够并行重放WAL变更。在&lt;a href=&#34;https://www.pgcon.org/&#34;&gt;PGCon 2023&lt;/a&gt;上，Koichi Suzuki做了一个 &lt;a href=&#34;https://www.pgcon.org/events/pgcon_2023/sessions/session/392/slides/69/ParallelRecovery%20in%20PostgreSQL.pdf&#34;&gt;关于PostgreSQL如何支持并行恢复&lt;/a&gt; 的详细介绍。这不仅适用于崩溃恢复，也适用于任何 PostgreSQL WAL 重放操作（例如：PITR 时间点恢复）。虽然这是一个极具挑战性的问题，但支持并行恢复有助于 PostgreSQL 继续垂直扩展，因为用户可以进一步针对重度写入负载进行优化，也能缓解 “从故障中恢复上线所需的延时超出承受范围” 的风险。&lt;/p&gt;
&lt;p&gt;这并不是一份关于性能特性的详细清单。在 PostgreSQL 服务器性能上还有很多工作要做，包括索引优化、改进锁机制、充分利用硬件加速等。此外，客户端（如驱动程序和连接池）上的工作也能为应用与 PostgreSQL 的交互带来额外的性能提升。展望 2024 年，看看社区正在进行的工作，我相信 PostgreSQL 在各个领域上的性能都会有整体性提升。&lt;/p&gt;
&lt;h3 id=&#34;开发者特性&#34;&gt;开发者特性&lt;/h3&gt;
&lt;p&gt;我认为 &amp;ldquo;&lt;strong&gt;开发者特性&lt;/strong&gt; &amp;ldquo;（developer features）是一个相当宽泛的类目，核心在于如何让用户围绕 PostgreSQL 来架构 &amp;amp; 构建应用。这里包括：SQL语法、函数、&lt;a href=&#34;https://wiki.postgresql.org/wiki/PL_Matrix&#34;&gt;存储过程语言支持&lt;/a&gt;，以及帮助用户从其他数据库系统迁移到 PostgreSQL 的功能。一个具体的创新例子是在 PostgreSQL 14 中引入的 &lt;a href=&#34;https://www.postgresql.org/docs/current/rangetypes.html&#34;&gt;&lt;code&gt;multirange&lt;/code&gt;&lt;/a&gt; 数据类型，它允许用户将一些不连续的 &lt;strong&gt;范围（Range）&lt;/strong&gt; 聚合在一起，这个特性非常实用，我个人在实现一个调度功能时，用它&lt;a href=&#34;https://www.crunchydata.com/blog/better-range-types-in-postgres-14-turning-100-lines-of-sql-into-3&#34;&gt;将数百行PL/pgSQL代码减少到三行&lt;/a&gt;。开发者特性也关乎 PostgreSQL 如何支持新出现的工作负载：例如&lt;a href=&#34;https://jkatz05.com/post/postgres/vectors-json-postgresql/&#34;&gt;JSON 或向量&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;值得一提的是，许多开发者特性创新主要出现在**扩展（Extension）**上，而这正是 PostgreSQL 可扩展模型的优势所在。然而就数据库服务器本身而言，PostgreSQL 在某些开发者特性上的发布速度相比过去有所落后。例如，尽管PostgreSQL是&lt;a href=&#34;https://jkatz05.com/post/postgres/vectors-json-postgresql/&#34;&gt;第一个将JSON作为可查询数据类型&lt;/a&gt;的关系数据库，但它在实现 SQL/JSON 标准锁定义的语法与特性上已经开始变得迟缓。PostreSQL 16 发布了 SQL/JSON 中的一些语法特性，2024 年也会有更多的努力用在实现 SQL/JSON 标准上。&lt;/p&gt;
&lt;p&gt;话既然说到这儿了，我们应当着力于 PostgreSQL 中那些&lt;strong&gt;无法通过扩展插件实现的开发者特性&lt;/strong&gt;，比如 SQL标准特性。我的建议是集中精力关注那些其他数据库已经具备的功能，比如进一步实现 SQL/JSON 标准（例如： &lt;code&gt;JSON_TABLE&lt;/code&gt;）、系统层面的版本化表（对于审计、闪回，与在特定时间点进行的时态查询非常有用），以及对模块的支持（对于“打包”存储过程来说尤其重要）。&lt;/p&gt;
&lt;p&gt;此外，考虑到之前讨论的可用性和性能问题，我们应继续努力简化用户从其他数据库迁移到 PostgreSQL 的过程。在我的日常工作中，我有机会了解了大量与数据库迁移相关的内容：从商业数据库到 PostgreSQL 的迁移策略。当我们增强 PostgreSQL 功能的同时，也有许多机会可以简化迁移流程。包括引入其他数据库中现有的功能（例如全局临时表、全局分区索引、&lt;a href=&#34;https://www.postgresql.org/message-id/f7470d5a-3cf1-4919-8404-5c4d91341a9f@tantorlabs.com&#34;&gt;自治事务&lt;/a&gt;），并在 PL/pgSQL 中增加更多功能与性能优化（如批量数据处理函数、&lt;a href=&#34;https://commitfest.postgresql.org/46/1608/&#34;&gt;模式变量&lt;/a&gt;、&lt;a href=&#34;https://commitfest.postgresql.org/46/4684/&#34;&gt;缓存函数元数据&lt;/a&gt;）。所有这些都将改善 PostgreSQL 开发者的体验，并让其他关系数据库的用户更容易采纳 PostgreSQL。&lt;/p&gt;
&lt;p&gt;最后我们需要了解，如何才能持续不断地支持来自 &lt;strong&gt;AI/ML&lt;/strong&gt; 数据的新兴负载，特别是向量存储与检索。在2023年的&lt;a href=&#34;https://www.pgcon.org/&#34;&gt;PGCon&lt;/a&gt;会议上，尽管人们希望在 PostgreSQL 本身中看到原生的向量支持，但大家一致认为，在 &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;pgvector&lt;/a&gt;这样的扩展中实现这类功能可以抢占先机，更快地支持这些工作负载（&lt;a href=&#34;https://jkatz05.com/post/postgres/pgvector-overview-0.5.0/&#34;&gt;这一策略似乎已经奏效&lt;/a&gt;，&lt;a href=&#34;https://aws.amazon.com/blogs/database/accelerate-hnsw-indexing-and-searching-with-pgvector-on-amazon-rds-for-postgresql/&#34;&gt;在向量数据上性能表现优异&lt;/a&gt;）。&lt;a href=&#34;https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4592/slides/435/pgconfeu2023_vectors.pdf&#34;&gt;有鉴于向量负载的诸多特征&lt;/a&gt;，我们可以在PostgreSQL中添加一些额外的支持，以便进一步支持它们：其中包括对处理 &lt;a href=&#34;https://www.postgresql.org/message-id/ad8a178f-bbe7-d89d-b407-2f0fede93144@postgresql.org&#34;&gt;活动查询路径中的TOAST数据&lt;/a&gt;的规划器进行优化，并探索如何更好地支持带有大量过滤条件和 &lt;code&gt;ORDER BY&lt;/code&gt; 子句的查询。&lt;/p&gt;
&lt;p&gt;我确信在 2024 年，PostgreSQL 可以在这些领域取得显著进步。我们看到在 PostgreSQL 的扩展生态中，有大量的新能力正在涌现；但即便如此，我们还是可以继续直接为 PostgreSQL 添加新特性，让它更易于构建应用。&lt;/p&gt;
&lt;h3 id=&#34;安全性如何&#34;&gt;安全性如何？&lt;/h3&gt;
&lt;p&gt;我想快速过一下 PostgreSQL 的安全特性。众所周知在安全敏感型场景中，PostgreSQL 有着极佳的声誉。但总会有许多能改进的地方。在过去几年中，PostgreSQL社区对引入&lt;a href=&#34;https://wiki.postgresql.org/wiki/Transparent_Data_Encryption&#34;&gt;透明数据加密&lt;/a&gt;（TDE）的原生支持表现出许多兴趣与关注。然而还有许多其他地方可以搞搞创新，比如支持其他的身份验证方式/机制（主要需求是OIDC），或是探索联邦授权模式的可能性，使PostgreSQL能够继承其他系统的权限设置。尽管这些特性在当下都颇有挑战，我建议先在 “Per-Database” 层面上支持 TDE。这里我不想过多展开，因为已经有在 PostgreSQL 中满足这些特性需求的方法了，但我们还是应该不懈努力，争取实现完整的原生支持。&lt;/p&gt;
&lt;p&gt;让我们再来看看PostgreSQL能在2024年里发力的其他方向。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;扩展&#34;&gt;扩展&lt;/h2&gt;
&lt;p&gt;PostgreSQL 的设计是&lt;strong&gt;高度可扩展的&lt;/strong&gt;。您可以为PostgreSQL添加新功能，而无需分叉项目。包括新的数据类型、索引方法、与其他数据库系统协同工作的方法、更易于管理PostgreSQL特性的实用工具、&lt;a href=&#34;https://wiki.postgresql.org/wiki/PL_Matrix&#34;&gt;额外的编程语言支持&lt;/a&gt;，甚至&lt;a href=&#34;https://github.com/aws/pg_tle&#34;&gt;编写自己的扩展插件&lt;/a&gt;。人们已经围绕一些特定的 PostgreSQL 扩展（如&lt;a href=&#34;https://postgis.net/&#34;&gt;PostGIS&lt;/a&gt;）建立了开源社区和公司；PostgreSQL 单一数据库便能支持不同类型的工作负载（地理空间、时间序列、数据分析、人工智能），正是&lt;strong&gt;扩展&lt;/strong&gt;让这件事变得可能。&lt;a href=&#34;https://gist.github.com/joelonsql/e5aa27f8cc9bd22b8999b7de8aee9d47&#34;&gt;数千个可用的PostgreSQL扩展&lt;/a&gt;成为了PostgreSQL的 &amp;ldquo;力量倍增器&amp;rdquo; —— 它一方面让用户能够快速的为数据库新增功能，另一方面也极大推动了 PostgreSQL 的普及与采用。&lt;/p&gt;
&lt;p&gt;然而这也产生了一个副作用，即“&lt;strong&gt;扩展蔓延&lt;/strong&gt;”现象。用户如何去选择合适的扩展？扩展的支持程度如何？如何判断某个扩展是否有持续积极的维护？如何为扩展做出自己的贡献？甚至“在哪里可以下载扩展”也成为了一个大问题。postgresql.org 提供了一个&lt;a href=&#34;https://www.postgresql.org/download/products/6-postgresql-extensions/&#34;&gt;不完整的扩展列表&lt;/a&gt;，社区也维护了一些&lt;a href=&#34;https://www.postgresql.org/download/&#34;&gt;扩展包&lt;/a&gt;，也有其他几个可供选择的 PostgreSQL 扩展仓库（例如 &lt;a href=&#34;https://pgxn.org/&#34;&gt;PGXN&lt;/a&gt;、&lt;a href=&#34;https://database.dev/&#34;&gt;dbdev&lt;/a&gt;、&lt;a href=&#34;https://pgt.dev/&#34;&gt;Trunk&lt;/a&gt;）和 &lt;a href=&#34;https://pgxman.com/&#34;&gt;pgxman&lt;/a&gt; 可供选择。&lt;/p&gt;
&lt;p&gt;PostgreSQL社区的一个优势是去中心化，广泛散布于世界各处。但我们可以做得更好，帮助用户在复杂的数据管理中做出明智的选择。我认为2024年是一个机遇，我们可以投入更多资源来整合与展示 PostgreSQL 扩展，帮助用户理解什么时候可以使用哪些扩展，并了解扩展们的开发成熟度，并同样为扩展开发者提供更好的管理支持与维护资源。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;社区建设&#34;&gt;社区建设&lt;/h2&gt;
&lt;p&gt;在谈论2024年社区建设的构想时，我深感自加入 PostgreSQL 贡献者社区以来，我们已取得显著进步。社区在&lt;a href=&#34;https://www.postgresql.org/community/contributors/&#34;&gt;认可各类贡献者&lt;/a&gt;方面表现突出（尽管仍有提升空间）—— 不仅限于代码贡献，还包括项目的各个方面。展望未来，我想着重强调三个关键领域：导师制、多元化、公平与包容（&lt;a href=&#34;https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion&#34;&gt;DEI&lt;/a&gt;）以及透明度，这些都对项目的全方位发展至关重要。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting#What_are_the_big_challenges_for_our_users.3F_What_are_the_big_challenges_for_us_to_solve.3F&#34;&gt;PGCon 2023开发者会议&lt;/a&gt;上，&lt;a href=&#34;https://mastodon.social/@melanieplageman/&#34;&gt;Melanie Plageman&lt;/a&gt; 就新贡献者的体验和挑战进行了深入分析。她提到了诸多挑战，如初学者需要花费大量时间来掌握基本知识，包括使用代码库和邮件列表进行交流，以及将补丁提交到可审查状态所需的努力。她还指出，提供建设性指导意见（从审查补丁开始）可能比编写代码本身更具挑战性，同时也讨论了如何有效地提供反馈。&lt;/p&gt;
&lt;p&gt;关于提供反馈，我想引用罗伯特-哈斯（Robert Haas）的一篇&lt;a href=&#34;https://rhaas.blogspot.com/2023/12/praise-criticism-and-dialogue.html&#34;&gt;优秀博文&lt;/a&gt;，其中他特别强调了在批评时同时给予表扬的重要性——这种方法可以产生显著的效果，并提醒我们即使在批评时也应保持支持态度。&lt;/p&gt;
&lt;p&gt;回到 Melanie 的观点，我们应该在整个社区更好地实施导师计划。就我个人而言，我认为我在宣传项目方面做得不够好，包括帮助更多人为&lt;a href=&#34;https://www.postgresql.org/developer/related-projects/&#34;&gt;网络基础设施&lt;/a&gt;和&lt;a href=&#34;https://www.postgresql.org/about/press/presskit16/&#34;&gt;发布流程&lt;/a&gt; 做出贡献。这并不是说 PostgreSQL 缺乏优秀的导师，而是我们可以在帮助人们开始贡献和找到导师方面做得更好。&lt;/p&gt;
&lt;p&gt;2024年将是建立更完善导师制度的起点。我们希望在5月于温哥华举行的 &lt;a href=&#34;https://2024.pgconf.dev/&#34;&gt;PGConf.dev 2024&lt;/a&gt; 上试验一些新想法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.pgconf.dev/&#34;&gt;PGConf.dev&lt;/a&gt; 出现前，从2007年到2023年，&lt;a href=&#34;https://www.pgcon.org/&#34;&gt;PGCon&lt;/a&gt;一直是PostgreSQL贡献者们集结并讨论即将开始的开发周期和关键项目的重要活动。PGCon 一直由 Dan Langille 负责组织。经过多年的辛勤工作，他决定将组织职责扩展至一个团队，并协助成立了 &lt;a href=&#34;https://www.pgconf.dev/&#34;&gt;PGConf.dev&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pgconf.dev/&#34;&gt;PGConf.dev&lt;/a&gt; 是专为那些希望为 PostgreSQL 做贡献的人士举办的会议。会议内容覆盖了 PostgreSQL 的开发工作（包括内核及所有相关的开源项目，如扩展和驱动程序）、社区建设以及开源意见领袖等主题。PGConf.dev 的一大特色是导师制，并计划举办关于如何为 PostgreSQL 贡献的研讨会。如果你正寻找为 PostgreSQL 贡献的机会，我强烈建议你考虑参加本活动或&lt;a href=&#34;https://2024.pgconf.dev/cfp/&#34;&gt;提交演讲提案&lt;/a&gt;！&lt;/p&gt;
&lt;p&gt;接下来是 PostgreSQL 社区如何在多元化、公平与包容性（&lt;a href=&#34;https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion&#34;&gt;DEI&lt;/a&gt;）上进步的话题。我强烈建议观看&lt;a href=&#34;https://karenjex.blogspot.com/&#34;&gt;凯伦·杰克斯&lt;/a&gt;和&lt;a href=&#34;https://mydbanotebook.org/&#34;&gt;莱蒂西亚·阿夫罗特&lt;/a&gt;在 2023 年 PGConf.eu 上的演讲： &lt;a href=&#34;https://www.postgresql.eu/events/pgconfeu2023/schedule/session/4913-trying-to-be-barbie-in-kens-mojo-dojo-casa-house/&#34;&gt;在肯的 Mojo Dojo Casa House 里尝试成为芭比&lt;/a&gt;：因为这是一场关于如何继续让 PostgreSQL 社区变得更加包容的深刻演讲。社区在这方面取得了进步（凯伦和莱蒂西亚指出了有助于此的一些举措），但我们还能做得更好，我们应该积极主动地处理反馈，以确保为 PostgreSQL 做出贡献是一种受欢迎的体验。我们所有人都可以采取行动，例如，在发生（诸如性别歧视的）不当行为时及时指出，并指出行为不当的原因。&lt;/p&gt;
&lt;p&gt;最后是透明度问题。在开源领域这可能听起来有些奇怪，毕竟它本身就是开放的。但有不少治理问题并不会在公开场合讨论，了解决策制定的流程会很有帮助。&lt;a href=&#34;https://www.postgresql.org/about/policies/coc_committee/&#34;&gt;PostgreSQL 行为守则委员会&lt;/a&gt; 提供了一个优秀的例子：一个社区如何就需要敏感处理的问题保持透明度。该委员会每年都会发布一份报告（&lt;a href=&#34;https://www.postgresql.org/about/policies/coc/reports/2022/&#34;&gt;这是 2022 年的报告&lt;/a&gt;），包括案例的总体描述和整体统计数据。我们可以在许多 PostgreSQL 团队中复制这种做法 —— 这些团队参与的任务可能由于其敏感性需要保密。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结论本来这篇文章应该更短&#34;&gt;结论：本来这篇文章应该更短&lt;/h2&gt;
&lt;p&gt;最初，我以为这篇文章会是一篇简短的帖子，几小时内就能完成。但几天后，我意识到情况并非如此……&lt;/p&gt;
&lt;p&gt;老实说，PostgreSQL目前处于一个非常好的状态。它依然备受欢迎，其可靠性、鲁棒性和性能的声誉稳如磐石。然而我们仍可以做得更好，令人感到振奋的是，社区正在积极地在各个方向上努力改善。&lt;/p&gt;
&lt;p&gt;虽然上面这些是 PostgreSQL 在 2024 年及以后可以做的事情，但 PostgreSQL 走到今天已经做成了很多很多的事。提出 “PostgreSQL何去何从” 这样的问题，实际上为我们提供了一个机会：回顾过去几年 PostgreSQL 所取得的进展，并展望未来！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: FerretDB：假扮成MongoDB的PG</title>
      <link>/zh/blog/pg/ferretdb/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/ferretdb/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/ferretdb/featured_hu1e4ff0222d0314d966cbf4927e40d805_371286_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="640"/>]]>
        
        &lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; 曾经是一项令人惊叹的技术，让开发者能够抛开关系型数据库的“模式束缚”，快速构建应用程序。然而随着时间推移，MongoDB 放弃了它的开源本质，这使得许多开源项目和早期商业项目无法使用它。&lt;/p&gt;
&lt;p&gt;大多数 MongoDB 用户其实并不需要 MongoDB 提供的高级功能，但他们确实需要一个易于使用的&lt;strong&gt;开源&lt;/strong&gt;文档数据库解决方案。PostgreSQL 的 JSON 功能支持已经足够完善了：二进制存储 JSONB，GIN 任意字段索引 ，各种 JSON 处理函数，JSON PATH 和 JSON Schema，PG早已是一个功能完备，性能强大的文档数据库了。但是提供替代的功能，和&lt;strong&gt;直接仿真&lt;/strong&gt;还是不一样的。&lt;/p&gt;
&lt;p&gt;为了填补这个空白，&lt;strong&gt;FerretDB&lt;/strong&gt; 应运而生，旨在提供一个&lt;strong&gt;真正开源&lt;/strong&gt;的 &lt;strong&gt;MongoDB&lt;/strong&gt; 替代。这是一个非常有趣的项目，之前的名字叫 “&lt;strong&gt;MangoDB&lt;/strong&gt;”，因为有碰瓷 &amp;ldquo;&lt;strong&gt;MongoDB&lt;/strong&gt;&amp;rdquo; 的嫌疑（芒果DB vs 蒙古DB），所以在 1.0 版本改成了现在的名字 FerretDB。FerretDB 可以为使用 MongoDB 驱动的应用提供一个丝滑迁移到 PostgreSQL 的过渡方案。&lt;/p&gt;
&lt;p&gt;它的功能就是让 PostgreSQL 假扮成 MongoDB。它是一个为 PG 提供 MongoDB Wire Protocol 支持的协议转换中间件/Proxy。上次做过这种事的插件是 AWS 的 Babelfish，让 PostgreSQL 兼容 SQL Service 的线缆协议假扮成 Microsoft SQL Server。&lt;/p&gt;
&lt;p&gt;FerretDB 作为一个选装组件，对丰富 PostgreSQL 生态大有裨益。Pigsty 在 1.x 中就提供了基于 Docker 的 FerretDB 模板，在 v2.3 中更是提供了原生部署支持。目前，Pigsty 社区已经与 FerretDB 社区成为了合作伙伴，后续将进行深度的合作与适配支持。&lt;/p&gt;
&lt;p&gt;本文简单介绍了 FerretDB 的安装、部署与使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;在部署 Mongo (FerretDB) 集群前，你需要先在配置清单中使用相关参数定义好它。下面的例子将默认的单节点 &lt;code&gt;pg-meta&lt;/code&gt; 集群的 &lt;code&gt;meta&lt;/code&gt; 数据库作为 FerretDB 的底层存储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_pgurl&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres://dbuser_meta:DBUser.Meta@10.10.10.10:5432/meta&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;mongo_cluster&lt;/code&gt; 与 &lt;code&gt;mongo_seq&lt;/code&gt; 属于不可或缺的身份参数，对于 FerretDB 来说，还有一个必须提供的参数是 &lt;code&gt;mongo_pgurl&lt;/code&gt;，指定了底层 PG 的位置。&lt;/p&gt;
&lt;p&gt;您可以使用 服务 来接入高可用的 PostgreSQL 集群，并部署多个 FerretDB 实例副本并绑定 L2 VIP 以实现 FerretDB 层本身的高可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ha&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.45&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.47&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mongo_seq&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ferret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mongo_pgurl&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres://test:test@10.10.10.3:5436/test&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_vrid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;128&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;vip_interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;eth1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;管理&#34;&gt;管理&lt;/h2&gt;
&lt;h3 id=&#34;创建mongo集群&#34;&gt;创建Mongo集群&lt;/h3&gt;
&lt;p&gt;在配置清单中定义好MONGO集群后，您可以使用以下命令完成安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./mongo.yml -l ferret   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 在 ferret 分组上安装“MongoDB/FerretDB”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 FerretDB 使用了 PostgreSQL 作为底层存储，所以重复运行此剧本通常并无大碍。&lt;/p&gt;
&lt;h3 id=&#34;移除mongo集群&#34;&gt;移除Mongo集群&lt;/h3&gt;
&lt;p&gt;要移除 Mongo/FerretDB 集群，运行 &lt;code&gt;mongo.yml&lt;/code&gt;剧本的子任务：&lt;code&gt;mongo_purge&lt;/code&gt;，并使用 &lt;code&gt;mongo_purge&lt;/code&gt; 命令行参数即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./mongo.yml -e &lt;span style=&#34;color:#000&#34;&gt;mongo_purge&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt; -t mongo_purge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装mongosh&#34;&gt;安装MongoSH&lt;/h3&gt;
&lt;p&gt;您可以使用 MongoSH 作为客户端工具访问 FerretDB 集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt; /etc/yum.repos.d/mongo.repo &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;[mongodb-org-6.0]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;name=MongoDB Repository
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/6.0/$basearch/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;gpgcheck=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;enabled=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install -y mongodb-mongosh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，您也可以直接安装 &lt;code&gt;mongosh&lt;/code&gt; 的 RPM 包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/mongodb/yum/el7/RPMS/mongodb-mongosh-1.9.1.x86_64.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;连接到ferretdb&#34;&gt;连接到FerretDB&lt;/h3&gt;
&lt;p&gt;你可以使用 MongoDB 连接串，用任何语言的 MongoDB 驱动访问 FerretDB，这里以上面安装的 &lt;code&gt;mongosh&lt;/code&gt; 命令行工具为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://test:test@10.10.10.11:27017/test?authMechanism=PLAIN&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pigsty 管理的 PostgreSQL 集群默认使用 &lt;code&gt;scram-sha-256&lt;/code&gt; 作为默认的认证方式，因此，您必须使用 &lt;code&gt;PLAIN&lt;/code&gt; 认证方式连接至 FerretDB。参阅 FerretDB：认证[17] 获取详细信息。&lt;/p&gt;
&lt;p&gt;你也可以使用其他 PostgreSQL 用户来访问 FerretDB，只要在连接串中指定即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_dba:DBUser.DBA@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;p&gt;你可以连接到 FerretDB 并假装它是一个 MongoDB 集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongosh &amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;MongoDB 的命令会被翻译为&lt;code&gt;SQL&lt;/code&gt;命令，在底下的 PostgreSQL 中执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;                            &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE SCHEMA test;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.dropDatabase&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;                   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DROP SCHEMA test;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.createCollection&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE TABLE posts(_data JSONB,...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.insert&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;({&lt;/span&gt;                   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# INSERT INTO posts VALUES(...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Post One&amp;#39;&lt;/span&gt;,body: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Body of post one&amp;#39;&lt;/span&gt;,category: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;News&amp;#39;&lt;/span&gt;,tags: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;news&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;events&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;,status: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,date: Date&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.find&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;.limit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;.pretty&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SELECT * FROM posts LIMIT 2;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.posts.createIndex&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;({&lt;/span&gt; title: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;})&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# CREATE INDEX ON posts(_data-&amp;gt;&amp;gt;&amp;#39;title&amp;#39;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你不是很熟悉 MongoDB，这里有一个快速上手教程，同样适用于 FerretDB： Perform CRUD Operations with MongoDB Shell[18]&lt;/p&gt;
&lt;p&gt;如果你希望生成一些样例负载，可以使用 &lt;code&gt;mongosh&lt;/code&gt; 执行以下的简易测试剧本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt; benchmark.js &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;&amp;#39;EOF&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;const coll = &amp;#34;testColl&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;const numDocs = 10000;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // insert
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).insert({ num: i, name: &amp;#34;MongoDB Benchmark Test&amp;#34; });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // select
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).find({ num: i });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // update
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).update({ num: i }, { $set: { name: &amp;#34;Updated&amp;#34; } });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;for (let i = 0; i &amp;lt; numDocs; i++) {  // delete
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  db.getCollection(coll).deleteOne({ num: i });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mongosh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;mongodb://dbuser_meta:DBUser.Meta@10.10.10.10:27017?authMechanism=PLAIN&amp;#39;&lt;/span&gt; benchmark.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以查阅 FerretDB 支持的 MongoDB命令，同时还有一些&lt;a href=&#34;https://docs.ferretdb.io/diff/&#34;&gt;已知的区别&lt;/a&gt;，对于基本的使用来说，通常不是什么大问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FerretDB uses the same protocol error names and codes, but the exact error messages may be different in some cases.&lt;/li&gt;
&lt;li&gt;FerretDB does not support NUL (&lt;code&gt;\0&lt;/code&gt;) characters in strings.&lt;/li&gt;
&lt;li&gt;FerretDB does not support nested arrays.&lt;/li&gt;
&lt;li&gt;FerretDB converts &lt;code&gt;-0&lt;/code&gt; (negative zero) to &lt;code&gt;0&lt;/code&gt; (positive zero).&lt;/li&gt;
&lt;li&gt;Document restrictions:
&lt;ul&gt;
&lt;li&gt;document keys must not contain &lt;code&gt;.&lt;/code&gt; sign;&lt;/li&gt;
&lt;li&gt;document keys must not start with &lt;code&gt;$&lt;/code&gt; sign;&lt;/li&gt;
&lt;li&gt;document fields of double type must not contain &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When insert command is called, insert documents must not have duplicate keys.&lt;/li&gt;
&lt;li&gt;Update command restrictions:
&lt;ul&gt;
&lt;li&gt;update operations producing &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; are not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database and collection names restrictions:
&lt;ul&gt;
&lt;li&gt;name cannot start with the reserved prefix &lt;code&gt;_ferretdb_&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;database name must not include non-latin letters;&lt;/li&gt;
&lt;li&gt;collection name must be valid UTF-8 characters;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FerretDB offers the same validation rules for the &lt;code&gt;scale&lt;/code&gt; parameter in both the &lt;code&gt;collStats&lt;/code&gt; and &lt;code&gt;dbStats&lt;/code&gt; commands. If an invalid &lt;code&gt;scale&lt;/code&gt; value is provided in the &lt;code&gt;dbStats&lt;/code&gt; command, the same error codes will be triggered as with the &lt;code&gt;collStats&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;剧本&#34;&gt;剧本&lt;/h2&gt;
&lt;p&gt;Pigsty 提供了一个内置的剧本： &lt;code&gt;mongo.yml&lt;/code&gt;，用于在节点上安装 FerretDB 集群。&lt;/p&gt;
&lt;h3 id=&#34;mongoyml&#34;&gt;&lt;code&gt;mongo.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;该剧本由以下子任务组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mongo_check&lt;/code&gt; ：检查 mongo 身份参数•&lt;code&gt;mongo_dbsu&lt;/code&gt; ：创建操作系统用户 mongod•&lt;code&gt;mongo_install&lt;/code&gt; ：安装 mongo/ferretdb RPM包•&lt;code&gt;mongo_purge&lt;/code&gt; ：清理现有 mongo/ferretdb 集群（默认不执行）•&lt;code&gt;mongo_config&lt;/code&gt; ：配置 mongo/ferretdb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo_cert&lt;/code&gt; ：签发 mongo/ferretdb SSL证书&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo_launch&lt;/code&gt; ：启动 mongo/ferretdb 服务•&lt;code&gt;mongo_register&lt;/code&gt;：将 mongo/ferretdb 注册到 Prometheus 监控中&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;监控&#34;&gt;监控&lt;/h2&gt;
&lt;p&gt;MONGO 模块提供了一个简单的监控面板：Mongo Overview&lt;/p&gt;
&lt;h3 id=&#34;mongo-overview&#34;&gt;Mongo Overview&lt;/h3&gt;
&lt;p&gt;Mongo Overview: Mongo/FerretDB 集群概览&lt;/p&gt;
&lt;p&gt;这个监控面板提供了关于 FerretDB 的基本监控指标，因为 FerretDB 底层使用了 PostgreSQL，所以更多的监控指标，还请参考 PostgreSQL 本身的监控。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/ferretdb/ferretdb-dashboard.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MONGO&lt;/code&gt;[24] 模块中提供了9个相关的配置参数，如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;mongo 实例号，必选身份参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 集群名，必选身份参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_pgurl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pgurl&lt;/td&gt;
&lt;td&gt;C/I&lt;/td&gt;
&lt;td&gt;mongo/ferretdb 底层使用的 PGURL 连接串，必选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_ssl_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo/ferretdb 是否启用SSL？默认为 &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_listen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ip&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 监听地址，默认留控则监听所有地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo 服务端口，默认使用 27017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_ssl_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo TLS 监听端口，默认使用 27018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_exporter_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mongo exporter 端口，默认使用 9216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo_extra_vars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;MONGO 服务器额外环境变量，默认为空白字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL：最成功的数据库</title>
      <link>/zh/blog/pg/pg-is-no1/</link>
      <pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-is-no1/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-is-no1/featured_hu61630db9067ef32c4b68bcee93d941e9_349036_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;2023 年 StackOverflow 调研结果已经新鲜出炉，来自185个国家与地区的9万名开发者给出了高质量的反馈。
在今年的调研中，PostgreSQL 在数据库全部三项调研指标（流行度，喜爱度，需求度）上获得无可争议的全能冠军，成为真正意义上“最成功”的数据库 —— &lt;strong&gt;&amp;ldquo;PostgreSQL is the Linux of Database!&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-1.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://demo.pigsty.cc/d/sf-db-survey&#34;&gt;https://demo.pigsty.cc/d/sf-db-survey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们说一个数据库“成功”时，究竟在说什么？评价一个数据库有许多标准：功能、质量、安全、性能、成本，但没有哪种可以普世泛用。不过
&lt;strong&gt;Succeed&lt;/strong&gt; 既代表成功，又代表继承，所以成功与“后继有人”相通。对一项技术而言，用户的&lt;strong&gt;规模&lt;/strong&gt; 、喜好、需求决定了生态的繁荣程度，唯有这种最终存在意义上的神意裁决 —— 才能让所有人心服口服。
而连续进行七年的 StackOverflow 年度开发者调研为我们窥见技术发展流行趋势打开了一扇窗户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL现在是全世界最流行的数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL是开发者最喜爱欣赏的数据库！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL是用户需求最为强烈的数据库！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;流行度代表过去，喜爱度代表现在，需求度代表将来，这三个指标很好地反映了一项技术的生命力。存量与增量，时与势都站在 PostgreSQL 一侧，恐怕在几年内恐怕都不会有任何能挑战 PostgreSQL 地位的竞争对手。
作为 PostgreSQL 忠实的用户，社区成员，专家，布道师与贡献者，从拥抱 PostgreSQL的那一刻起，我就相信会有这一天，然而亲自见证这一刻，仍然让我感慨良多。遂撰此文，聊一聊这件事背后的 &lt;strong&gt;Why&lt;/strong&gt; 与 &lt;strong&gt;What&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;推荐阅读：StackOverflow 2022 往期调研结果回顾：《&lt;a href=&#34;/zh/blog//db/pg-is-no1/&#34;&gt;为什么PostgreSQL将成为最成功的数据库？&lt;/a&gt;》&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数据的来源社区调研&#34;&gt;数据的来源：社区调研&lt;/h2&gt;
&lt;p&gt;数据库的用户是开发者，而没有比直接问开发者们更有代表性的调研方式了。StackOverflow 调研结果中提供了 流行，欣赏，渴望三个结果指标，但这三项数据都来自同一个巧妙设计的问卷题目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“在过去一年中，您在哪些数据库环境中进行了密集的开发工作，您又希望在接下来一年在哪些数据库上工作？如果你过去一年用了这个数据库，来年还希望接着用，那么就在两个复选框上都打勾”。&lt;/p&gt;
&lt;p&gt;“Which &lt;strong&gt;database environments&lt;/strong&gt; have you done extensive development work in over the past year, and which do you want to work in over the next year? If you both worked with the database and want to continue to do so, please check both boxes in that row.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个数据库后都有两个复选框，如果开发者在第一个框上打勾，即去年我在用此数据库，那么就会被标记为“使用者”（Used）；
如果开发者在第二个框上打勾，即来年我想用这个数据库，那么会被标记为“需求者”（Wanted）；而两个框都打勾的开发者，会被标记为“赞赏者”（Loved / Admired）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://survey.stackoverflow.co/2023&#34;&gt;https://survey.stackoverflow.co/2023&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用者占总体的比例，就是&lt;strong&gt;流行度&lt;/strong&gt;，或使用率，在上图左边用&lt;strong&gt;柱状图&lt;/strong&gt;表示。需求者占总体的比例，就是&lt;strong&gt;需求度&lt;/strong&gt;，或渴望度，在上图右边以&lt;strong&gt;蓝点&lt;/strong&gt;表示。
赞赏者占现有使用者的比例，就是&lt;strong&gt;欣赏度&lt;/strong&gt;，或喜爱度/口碑，在上图右边以&lt;strong&gt;红点&lt;/strong&gt;表示。不难看出，2023年，PostgreSQL 在流行度上甩开 MySQL，成为世界上最流行的数据库。在需求度和口碑上更是远远甩开其他数据库独树一帜。&lt;/p&gt;
&lt;p&gt;同样的问题连续问了七年，如果我们结合这过去七年的变迁，把排名前10的主流数据库流行度 - 净喜爱度画在一张二维散点图上，那么就能更容易地获得一些关于数据库领域的发展变迁的洞察，对形成正确的&lt;strong&gt;比例感&lt;/strong&gt;很有帮助。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-3.gif&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X轴为流行度，Y轴为净喜爱程度（2*喜爱度% - 100），图元大小与流行度与喜爱度的几何平均数成正比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 2023年的当下切面中，四个角落被四种数据库占据：右上角是最为流行且最受欢迎的 &lt;strong&gt;PostgreSQL&lt;/strong&gt;，右下角是流行但不受待见的 &lt;strong&gt;MySQL&lt;/strong&gt;；
左上角是流行程度一般但备受喜爱的 &lt;strong&gt;Redis&lt;/strong&gt;，左下角是过气且不受待见的 &lt;strong&gt;Oracle&lt;/strong&gt;。在四者中间，坐落着相对中庸的 &lt;strong&gt;SQLite&lt;/strong&gt;，&lt;strong&gt;MongoDB&lt;/strong&gt; 与 &lt;strong&gt;SQL Server&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;结合时间轴不难看出，PostgreSQL 的流行程度与受欢迎程度在持续增长；MySQL 的受欢迎程度变化不大但流行度暴跌；
Redis 与 SQLite 整体上在进步，而 MongoDB 开始见顶回落，SQL Server 和 Oracle 这两种商业关系型数据库最近几年都在持续走下坡路。&lt;/p&gt;
&lt;p&gt;从图中我们可以得出一个基本的判断：&lt;strong&gt;在未来几年中，数据库领域都不会出现足以挑战 PostgreSQL 的对手。PostgreSQL 在数据库领域的地位，已经如同 Linux 在服务器操作系统上的地位一样难以撼动&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;过去的积累流行度&#34;&gt;过去的积累：流行度&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 世界上最流行的数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一项技术使用者占总体的比例，就是&lt;strong&gt;流行度&lt;/strong&gt;。它的含义是：过去一年有多少比例的用户使用了这项技术。流行度代表过去一年的积累使用，是存量指标，也是最核心的事实指标。&lt;/p&gt;
&lt;p&gt;在 2023 年， “&lt;strong&gt;最先进&lt;/strong&gt;” PostgreSQL 在所有开发者中以 45.6% 的使用率，首次超过“&lt;strong&gt;最流行&lt;/strong&gt;”数据库 MySQL 41.1%，领先 4.5%，使用率是第二名 MySQL 的1.1倍。
对于专业开发者（约占总样本的3/4）来说，PostgreSQL 的使用率在去年（2022）就已经超过 MySQL 了，以 46.5% vs 45.7% 领先0.8个百分点；
在 2023 年，这一差距进一步拉大到 49.1% vs 40.6，领先 8.5% —— 换句话说，专业开发者中，PostgreSQL 的使用率已经是 MySQL 的 1.2 倍了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;过去几年，MySQL 一直霸占着数据库流行榜的榜首，洋洋得意地打起了“世界上&lt;strong&gt;最流行&lt;/strong&gt;的开源关系型数据库” 这一旗号。
不过这次，“最流行” 的桂冠真的要让给 PostgreSQL 了。在流行度上，其他数据库和 PostgreSQL / MySQL 比根本就不是一个重量级，自然就更不用说了。&lt;/p&gt;
&lt;p&gt;更重要的的是变化趋势：在长期列入排名的十几款头部数据库中，&lt;strong&gt;只有&lt;/strong&gt; PostgreSQL 的流行度是持续上升的，保持着高歌猛进的增长势头，而其他所有的数据库使用率都在下行。
此消彼长，随着时间的推移，PostgreSQL 与其他数据库的流行度差距只会进一步拉大 —— 因此在相当长的一段时间内，恐怕是看不到有任何挑战者能撼动 PostgreSQL 现在的位置了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-5.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得一提的是，“国产数据库”的标杆 ”TiDB“ 这次也加入到 StackOverflow 排行榜中，并以 0.2% 的使用率，拿到了末位第 32 名的名次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;流行度&lt;/strong&gt;反映的是当下数据库的规模势能，而&lt;strong&gt;喜爱度&lt;/strong&gt;反映的是未来数据库的增长潜能。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;现在的动能喜爱度&#34;&gt;现在的动能：喜爱度&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 最受开发者喜爱的数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓“&lt;strong&gt;口碑&lt;/strong&gt;”，喜爱度（Loved）或欣赏度（Admired），指的是有多少比例的用户愿意继续使用此项技术，这是一个年度的“留存率”指标，可以反映用户对一项技术的看法与评价。&lt;/p&gt;
&lt;p&gt;2023 年， PostgreSQL 蝉联最受开发者喜爱的数据库。过去几年 Redis 一直是用户最喜欢的数据库。直到 2022 年，PostgreSQL 第一次超过 Redis，成为最受开发者喜爱的数据库。
PostgreSQL 和 Redis 的口碑一直在伯仲之间（70%），并与其他后来者拉开了非常显著的差距。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为一个交叉印证，在 2022 PostgreSQL 社区年度调研中，对于 PostgreSQL 的存量用户来说，使用程度加深，用量加大的比例（蓝/粉）对于用量萎缩的比例（黄绿）占据了压倒性多数，足以说明基本盘留存的稳定程度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Redis是简单易用的数据结构缓存服务器，经常会与关系型数据库 PostgreSQL 搭配使用，广受开发者喜爱（但流行度一般，只有20%，位列第六）。
在后面的交叉分析环节我们也可以看到这两者之间有着所有数据库间最为强烈的羁绊 —— 86% 的 Redis 用户想要使用 PostgreSQL，而 30% 的 PostgreSQL 用户想要使用 Redis。
其他评价正面的数据库包括：SQLite，MongoDB，SQL Server 等。MySQL 和 ElasticSearch 的口碑在 50% 中线算毁誉参半。榜上最不受用户待见的数据库为 Access、 IBM DB2 、CouchDB，Couchbase，以及 Oracle。&lt;/p&gt;
&lt;p&gt;并不是所有&lt;strong&gt;潜能&lt;/strong&gt;，都可以转换为实打实的&lt;strong&gt;动能&lt;/strong&gt;。用户的喜爱并不一定会付诸行动，而这就是第三项指标所要回答的问题 —— 需求度。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;未来的趋势需求度&#34;&gt;未来的趋势：需求度&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 需求量最大的数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需求者占总体的比例，就是需求率（Wanted），或渴望度（Desired）。它的含义是，接下来一年有多少比例的用户会实际选择使用此项技术。
在需求度 / 渴望度 这一项中，PostgreSQL 一骑绝尘，远远甩开其他数据库。以 42.3% 的比例连续第二年获得第一，且保持着一往无前的增长态势。不断与后来者拉开距离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 2023 年，一些数据库的需求量出现了显著增长。大概率是因为由 OpenAI ChatGPT 所引领的大语言模型AI浪潮所致：对智能的需求拉动了对数据基础设施的需求。
10年前，对 JSONB/GIN 等 NoSQL 特性的支持奠定了 PostgreSQL 在互联网黄金时代的蓬勃发展，而今天，第一个构建在成熟数据库上的向量扩展 pgvector ，更是让 PostgreSQL 有了进入 AI 时代的船票，为下个十年的增长准备好了敲门砖。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;但是为什么呢&#34;&gt;但是，为什么呢？&lt;/h2&gt;
&lt;p&gt;PostgreSQL 在需求率， 使用率，喜爱率上都拔得头筹，天时地利人和齐备，动能势能潜能都有，足以称得上是最成功的数据库，而且在肉眼可见的几年里也不会有任何挑战者。
但令人好奇的是，&lt;strong&gt;为什么&lt;/strong&gt; &lt;strong&gt;PostgreSQL 会如此成功 ？&lt;/strong&gt; 其实，秘密就藏在它的 &lt;strong&gt;Slogan&lt;/strong&gt; 里：“&lt;strong&gt;世界上最先进的开源关系型数据库&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;关系型数据库是如此的普及与重要，也许其他的数据库品类如键值，文档，搜索引擎，时序，图，向量加起来也比不上它的一个零头。以至于当大家谈起数据库时，如果没有特殊说明，默认隐指的就是”关系型数据库“。在它面前，没有其他数据库品类敢称自己为”主流“。
在去年的《&lt;a href=&#34;/zh/blog//db/pg-is-best/&#34;&gt;为什么PostgreSQL将成为最成功的数据库？&lt;/a&gt;》中，我们详细介绍了关系型数据库的竞争格局 —— &lt;strong&gt;三足鼎立&lt;/strong&gt;：关系型数据库的生态位高度重叠，其关系可以视作零和博弈。抛开微软生态关门自嗨相对独立的商业数据库
SQL Server 不提，在当下分久必合的收敛阶段中，以 WireProtocol 计能作为“根”的数据库只有三种：Oracle，MySQL，以及PostgreSQL。关系型数据库世界里上演的是一场 &lt;strong&gt;三国演义&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天下三分，然 Oracle/MySQL 疲敝 ，日薄西山， PostgreSQL 高歌猛进，如日中天。此消彼长，前途无量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;Oracle&lt;/strong&gt; 有才无德，&lt;strong&gt;MySQL&lt;/strong&gt; 才浅德薄，&lt;strong&gt;PGSQL&lt;/strong&gt; 德才兼备”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt; 是老牌商业数据库，有着深厚的历史技术积淀，功能丰富，支持完善。广受不差钱且需要背锅侠的企业，特别是金融行业喜爱。但其费用高昂，且以讼棍行径成为知名的业界毒瘤。
Microsoft SQL Server 性质与Oracle类似，都属于商业数据库。商业数据库整体受开源数据库冲击，处于缓慢衰退的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; 号称“最流行”，然而树大招风：前有狼后有虎，上有野爹下有逆子，处于四面楚歌的境地中：
在严谨的事务处理和数据分析上，MySQL 被同为开源生态位的 PostgreSQL 甩开几条街；而在糙猛快的敏捷方法论上，MySQL 又不如新兴 NoSQL 好用；
上有养父 Oracle 压制，中有兄弟 MariaDB 分家，下有逆子 TiDB/OB 等兼容 NewSQL 分羹，因此也在走下坡路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt; 作为老牌商业数据库，才毋庸质疑；但其作为业界毒瘤，“德” ，亦不必多说，故曰：“&lt;strong&gt;有才无德&lt;/strong&gt;”。
&lt;strong&gt;MySQL&lt;/strong&gt; 虽有开源之功德，奈何认贼作父；且才疏学浅，功能简陋，只能干干CRUD，故曰：“&lt;strong&gt;才浅德薄&lt;/strong&gt;”。
唯 &lt;strong&gt;PostgreSQL&lt;/strong&gt;，&lt;strong&gt;德才兼备&lt;/strong&gt;：既占据了&lt;strong&gt;开源崛起&lt;/strong&gt;之天时，又把握了&lt;strong&gt;最为流行&lt;/strong&gt;之地利，还有着&lt;strong&gt;先进稳定&lt;/strong&gt;之人和。
正所谓：君子藏器于身，因时而动。不鸣则已，一鸣惊人！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;开源与先进&#34;&gt;开源与先进&lt;/h2&gt;
&lt;p&gt;来自 TimescaleDB 的PostgreSQL 社区年度调研也反映出，用户选择 PostgreSQL 的首要因素便是 &lt;strong&gt;开源&lt;/strong&gt; 与 &lt;strong&gt;稳定&lt;/strong&gt;。
&lt;strong&gt;开源&lt;/strong&gt; —— 意味着软件本身可以免费使用，可以二次开发，没有供应商锁定，不存在“卡脖子问题”。 &lt;strong&gt;可靠&lt;/strong&gt; ——
意味它能正确稳定工作，行为表现能够符合预期，而且有着长时间大规模生产环境的优异战绩。越是资深的开发者，便越是看重这两个属性。&lt;/p&gt;
&lt;p&gt;宽泛地讲，扩展，生态，社区，协议可以归并入 “&lt;strong&gt;开源&lt;/strong&gt;” 。而稳定可靠，ACID，SQL，扩展，可用性，可以总结为 “&lt;strong&gt;先进&lt;/strong&gt;” 。这便正好与
PostgreSQL 的 Slogan 相呼应 —— &lt;strong&gt;世界上最先进的开源关系型数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-10.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.timescale.com/state-of-postgres/2022&#34;&gt;https://www.timescale.com/state-of-postgres/2022&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;开源之德&#34;&gt;开源之德&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PG的“德”在于开源&lt;/strong&gt;。祖师爷级的开源项目，全世界开发者群策群力的伟大成果。协议友善BSD，生态繁荣扩展多。开枝散叶，子孙满堂，Oracle替代扛旗者.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么叫“德”，合乎于“道”的表现就是德。而这条“道”就是&lt;strong&gt;开源&lt;/strong&gt;。PostgreSQL是历史悠久的祖师爷级开源项目，更是全世界开发者群策群力的典范成果。&lt;/p&gt;
&lt;p&gt;很久很久以前，开发软件/信息服务需要使用非常昂贵的&lt;strong&gt;商业数据库&lt;/strong&gt;软件。单花在软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。Oracle一个
CPU 核一年的软件授权费用便高达十几万，壕如阿里也吃不消要“&lt;strong&gt;去IOE&lt;/strong&gt;”。以 &lt;strong&gt;PostgreSQL&lt;/strong&gt; / &lt;strong&gt;MySQL&lt;/strong&gt; 为代表的的&lt;strong&gt;开源数据库&lt;/strong&gt;崛起，让世界多了一个新的选择。&lt;/p&gt;
&lt;p&gt;“不要钱” 的开源数据库可以让我们自由随意地使用数据库软件，而这一点引发了行业变革：从上万元每核·每月的商业数据库软件授权，到20块钱/核·月的纯硬件成本。数据库走入了寻常企业中，让免费提供信息服务成为可能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-11.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;开源是有大功德的：互联网的历史就是开源软件的历史，IT行业之所以有今天的繁荣，人们能享受到如此多的免费信息服务，核心原因之一就是开源软件。
&lt;strong&gt;开源是一种真正成功的，以软件自由为目的，由开发者构成的 Communism（&lt;strong&gt;社区主义&lt;/strong&gt;）&lt;/strong&gt;：&lt;strong&gt;软件这种IT业的核心生产资料变为全世界开发者公有，按需分配。开发者各尽所能，人人为我，我为人人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个开源程序员工作时，其劳动背后可能蕴含的是数以万计顶尖开发者的智慧结晶。程序员薪资高从原理上来说是因为，开发者本质上不是一个简单的工人，而是一个指挥软件和硬件干活的
&lt;strong&gt;包工头&lt;/strong&gt;。程序员自己就是核心生产资料；软件来自公有社区；服务器硬件更是唾手可得；因此一个或几个高级的软件工程师，就可以很轻松地利用 &lt;strong&gt;开源生态&lt;/strong&gt;快速解决领域问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过开源，所有社区开发者形成合力，极大降低了重复造轮子的内耗。使得整个行业的技术水平以匪夷所思的速度向前迈进。开源的势头就像滚雪球，时至今日已经势不可挡&lt;/strong&gt;。
越是底层基础的软件，开源便越占据主导优势。基本上除了一些特殊场景和路径依赖，软件特别是基础软件中，闭门造车/所谓“自力更生”已经成了业内超级大笑话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-12.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开源，是 PostgreSQL 对阵 Oracle 的最大底气所在。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oracle 先进，但 PostgreSQL 也不差。PostgreSQL 是 Oracle 兼容性最好的开源数据库，原生即支持 Oracle &lt;strong&gt;85%&lt;/strong&gt; 的功能，更有 &lt;strong&gt;96%&lt;/strong&gt; 功能兼容的专业发行版。
但更重要的是，Oracle 价格高昂，而 PG 开源免费。压倒性的成本优势让 PG 拥有了巨大的生态位基础：它不一定要在功能先进性上超过Oracle 才能成功 ，&lt;strong&gt;廉价9成正确&lt;/strong&gt; 已经足以干翻 Oracle 。&lt;/p&gt;
&lt;p&gt;PostgreSQL 可以视作一个开源版的“Oracle”，是唯一能真正威胁到 Oracle 的数据库。作为 ”去O“ 抗旗者，PG 可谓子孙满堂，养活了一大批&lt;strong&gt;自主可控&lt;/strong&gt; 的国产数据库公司。
根据信通院统计，36% 的 “国产数据库” 直接基于PG “二开/魔改/套壳/换皮”，华为的openGauss 与 GaussDB 就是最典型的例子。
重要的是，PostgreSQL 使用 BSD-Like 的 PostgreSQL 协议，是允许这种行为的 —— 你只要不打着PG的名号招摇撞骗，改个名字直接卖起来都行。这样开放的胸襟，是被Oracle收购的，使用GPL协议的 MySQL 所难以比拟的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;先进之才&#34;&gt;先进之才&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PG的“才”在于先进&lt;/strong&gt;。一专多长，全栈多模：“自主可控自动驾驶时序地理空间AI向量分布式文档图谱全文检索可编程超融合联邦流批一体
HTAP Serverless 全栈式平台数据库”，单一组件即可覆盖几乎所有数据库需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PostgreSQL 不仅仅是传统意义上只能做 OLTP 的单纯 “关系型数据库”，而是一个&lt;strong&gt;多模态数据库&lt;/strong&gt;。
对于中小企业来说，基本单一组件便足以覆盖中小型企业绝大多数场景的数据需求：OLTP，OLAP，时序，地理空间GIS，分词与全文检索，JSON/XML文档，NoSQL特性，图，向量，全都能用上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-13.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;皇帝数据库 —— 自主可控自动驾驶时序地理空间AI向量分布式文档图谱全文检索可编程超融合联邦流批一体 HTAP Serverless 全栈式平台数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PostgreSQL 的先进，除了体现在其备受赞誉的&lt;strong&gt;内核稳定性&lt;/strong&gt;上，更是体现在它强大的&lt;strong&gt;可扩展性&lt;/strong&gt;里。
插件系统让 PostgreSQL 不再仅仅是一个单线程演化的数据库内核，而是可以有无数并行演进的扩展插件，如同量子计算一般同时探索所有方向上的可能性。每一个数据处理的细分垂直领域，PostgreSQL 绝不会缺席。&lt;/p&gt;
&lt;p&gt;正如：PostGIS 之于地理时空数据库，TimescaleDB 之于时序数据库，Citus 之于分布式/列存储/HTAP数据库，PGVector 之于AI向量数据库，AGE之于图数据库，PipelineDB 之于流处理；
以及终极杀招 —— 使用外部数据源包装器（FDW），使用统一的 SQL 访问所有异构的外部数据库。可以说PG是真正的全栈数据库平台，比起 MySQL 这样单纯的 OLTP 数据库，它的功能要先进太多了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-14.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在一个很可观的规模内，PostgreSQL 都可以独立扮演多面手的角色，一个组件当多种组件使。&lt;strong&gt;而单一数据组件选型可以极大地削减项目额外复杂度，这意味着能节省很多成本。它让十个人才能搞定的事，变成一个人就能搞定的事。&lt;/strong&gt;
在使用“专用数据库”前切莫忘记：&lt;strong&gt;为了不需要的规模而设计是白费功夫&lt;/strong&gt;，这属于&lt;strong&gt;过早优化&lt;/strong&gt;的一种形式。如果真有那么一样技术可以满足你所有的需求，那么使用该技术就是最佳选择，而不是试图用多个组件来重新实现它。&lt;/p&gt;
&lt;p&gt;以探探为例，在 &lt;strong&gt;250w TPS&lt;/strong&gt; 与 &lt;strong&gt;200 TB&lt;/strong&gt; 不重复TP数据的量级下，&lt;strong&gt;单一PostgreSQL选型&lt;/strong&gt;依然能稳定可靠地撑起业务，并能在很可观的规模内做到一专多长。
除了本职的 OLTP，PG 还在相当长的时间里兼任了缓存，OLAP，批处理，甚至消息队列的角色。当然神龟虽寿，犹有竟时。最终这些兼职功能还是要逐渐&lt;strong&gt;分拆&lt;/strong&gt;出去由专用组件负责，但那已经是近&lt;strong&gt;千万日活&lt;/strong&gt;时候的事了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-15.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 的先进，更是体现在其繁荣的生态里。以数据库内核为中心，向上，有着衍生特化的变体与构建于其上的“上层数据库” —— Greenplum数据仓库，Firebase的开源替代 Supabase，专用图数据库 edgedb 等等等等。
向下，有着各种开源/商业/云发行版来整合各种工具形成合力 —— 各家的RDS ，开箱即用的 Pigsty ；水平方向上，甚至还有着一些强大的拟态组件/版本，可以通过兼容 Wire Protocol 的方式来仿真其他数据库，无需修改客户端驱动就能完成数据库迁移
—— 模拟 SQL Server 的 babelfish，模拟 MongoDB 的 FerretDB，兼容 Oracle 的 EnterpriseDB / IvorySQL 都是样例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-16.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 的先进性有目共睹，这也是其对阵同为开源关系型数据库的老对手 —— MySQL 时，真正的核心竞争力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先进，是 PostgreSQL 压倒 MySQL 的核心竞争力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL的口号是“&lt;strong&gt;世界上最流行的开源关系型数据库&lt;/strong&gt;”，它的核心特点是糙猛快，基本盘是互联网公司。互联网公司的典型特点是什么？追逐潮流&lt;strong&gt;糙猛快&lt;/strong&gt;。
&lt;strong&gt;糙&lt;/strong&gt; 说的是互联网公司业务场景简单（CRUD居多）；数据重要性不高，不像传统行业（例如银行）那样在意数据的一致性与正确性；可用性优先，相比停服务更能容忍数据丢乱错，而一些传统行业宁可停止服务也不能让账目出错。
&lt;strong&gt;猛&lt;/strong&gt;说的则是互联网行业数据量大，它们需要的就是水泥槽罐车做海量 CRUD，而不是高铁和载人飞船。
&lt;strong&gt;快&lt;/strong&gt; 说的则是互联网行业需求变化多端，出活周期短，要求响应时间快，大量需求的就是开箱即用的软件全家桶（如LAMP）和简单培训就能上手干活的 CRUD Boy。
于是，糙猛快的互联网公司和糙猛快的 MySQL 一拍即合，MySQL吃到了互联网崛起的一波大红利。&lt;/p&gt;
&lt;p&gt;然而时来天地皆同力，运去英雄不自由。时过境迁，PostgreSQL 进步神速，在”快“与”猛“上 MySQL 已经不占优，现在只剩下”&lt;strong&gt;糙&lt;/strong&gt;“了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-17.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL竟然默认允许部分成功的事务提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先进的因会反映为流行的果，流行的东西因为落后而过气，而先进的东西会因为先进变得流行。在这个变革的时代中，没有先进的功能打底，“流行”也也难以长久。时代所赋予的红利，也会随时代过去而退潮。
调查的结果也用事实证明，MySQL 唯一能引以为豪的 “&lt;strong&gt;流行&lt;/strong&gt;” 在 PostgreSQL 压倒性的 “&lt;strong&gt;先进&lt;/strong&gt;” 优势前，根本维持不住。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先进&lt;/strong&gt;与&lt;strong&gt;开源&lt;/strong&gt;，就是 PostgreSQL 成功的最大法宝。&lt;strong&gt;Oracle 先进， MySQL 开源，PostgreSQL 先进又开源&lt;/strong&gt;。天时地利人和齐备，何愁大业不成？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;展望未来&#34;&gt;展望未来&lt;/h2&gt;
&lt;p&gt;PostgreSQL 数据库内核在数据库领域的生态位，类似于 Linux 操作系统内核在操作系统领域的生态位。
对于数据库，至少是 OLTP 数据库来说，数据库内核之争已经尘埃落定 —— PostgreSQL 已经是一台足够完美的内核发动机。&lt;/p&gt;
&lt;p&gt;然而，用户最终需要的不单单是一台发动机，而是整车、驾驶能力与交通服务。数据库领域竞争的焦点，已经从 Software 本身，转移到了 &lt;strong&gt;Software enabled Service —— 完整的数据库发行版与数据库服务&lt;/strong&gt;。
对于基于 PostgreSQL 内核的数据库发行版而言，竞争才刚刚开始。谁会成为PG的Debian，RedHat 与 Ubuntu ？
这便是我们做 &lt;strong&gt;&lt;a href=&#34;https://pigsty.cc&#34;&gt;Pigsty&lt;/a&gt;&lt;/strong&gt; 的初衷 —— 制作一个开箱即用的、开源免费、本地优先的 PostgreSQL 数据库发行版，让所有人都能用&lt;strong&gt;好数据库&lt;/strong&gt;， &lt;strong&gt;用好&lt;/strong&gt;数据库。
当然，限于篇幅，那就是&lt;a href=&#34;/zh/blog//db/pgsql-x-pigsty/&#34;&gt;另一篇&lt;/a&gt;要介绍的故事了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-no1/pg-is-no1-18.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;p&gt;2022-08 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485240&amp;idx=1&amp;sn=9052f03ae2ef21d9e21037fd7a1fa7fe&amp;chksm=fe4b32e3c93cbbf522616346c1afd49e1e6edbb0898694df224fe2134a69c0c4562aab35587a&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL 到底有多强？&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2022-07 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485216&amp;idx=1&amp;sn=1b59c7dda5f347145c2f39d2679a274d&amp;chksm=fe4b32fbc93cbbed574358a3bcf127dd2e4f458638b46efaee1a885a5702a66a5d9ca18e3f90&amp;scene=21#wechat_redirect&#34;&gt;为什么PostgreSQL是最成功的数据库？&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2022-06 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485170&amp;idx=1&amp;sn=657c75be06557df26e4521ce64178f14&amp;chksm=fe4b3329c93cba3f840283c9df0e836e96a410f540e34ac9b1b68ca4d6247d5f31c94e2a41f4&amp;scene=21#wechat_redirect&#34;&gt;StackOverflow 2022数据库年度调查&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2021-05 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484604&amp;idx=1&amp;sn=357b3381e7636709fa9e5e06894b7273&amp;chksm=fe4b3167c93cb8719b7c6b048fd300a7773c73319ba0c119359f4f8a6684cd969434c5abbdfd&amp;scene=21#wechat_redirect&#34;&gt;Why PostgreSQL Rocks!&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2021-05 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247484591&amp;idx=1&amp;sn=a6ab13d93bfa26fca969ba163b01e1d5&amp;chksm=fe4b3174c93cb862899cbce4b9063ed009bfe735df16bce6b246042e897d494648473eea3cea&amp;scene=21#wechat_redirect&#34;&gt;为什么说PostgreSQL前途无量？&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2018 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483706&amp;idx=1&amp;sn=b842684b41ac6dde8310448ae0a81a76&amp;chksm=fe4b34e1c93cbdf7dcfcdae5f3ddc38bc422989421266dcda957fa2b596e361815624c92b3ec&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL 好处都有啥？&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2023 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;chksm=fe4b3d95c93cb4833b8e80433cff46a893f939154be60a2a24ee96598f96b32271301abfda1f&amp;scene=21#wechat_redirect&#34;&gt;更好的开源RDS替代：Pigsty&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2023 《&lt;a href=&#34;http://demo.pigsty.cc/d/sf-db-survey&#34;&gt;StackOverflow 7年调研数据跟踪&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;2022 《&lt;a href=&#34;https://www.timescale.com/state-of-postgres/2022&#34;&gt;PostgreSQL 社区状态调查报告 2022&lt;/a&gt;》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL 到底有多强？</title>
      <link>/zh/blog/pg/pg-performence/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-performence/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-performence/featured_hubaa281b0612be75c10ccedee4459256b_272972_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;上回，我们通过分析 StackOverflow 的用户调研数据，说明了《&lt;a href=&#34;/zh/blog//db/pg-is-no1/&#34;&gt;为什么PostgreSQL是最成功的数据库&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;而这一次我们将用性能数据来说话，聊聊最成功的 PostgreSQL 到底有多强，帮助大家做到“&lt;strong&gt;心中有数&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-performence/pg-performence-1.jpg&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;太长不看&#34;&gt;太长不看&lt;/h2&gt;
&lt;p&gt;如果您对以下这些问题有兴趣，那么本文会对您有所帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL 到底性能有多强？
点查 QPS 60万+，最高达 200 万。读写 TPS （4写1读）每秒 7 万+，最高达14万。&lt;/li&gt;
&lt;li&gt;PostgreSQL 与 MySQL 的极限性能对比
极限条件下，PgSQL点查性能显著压倒 MySQL，其他性能基本与MySQL持平。&lt;/li&gt;
&lt;li&gt;PostgreSQL 与其他数据库的性能对比
“分布式数据库”/NewSQL 在相同硬件规格下的性能表现显著落后于经典数据库。&lt;/li&gt;
&lt;li&gt;PostgreSQL 与其他分析数据库的 TPC-H 表现。
PostgreSQL 原生作为一个 HATP 数据库，有比较亮眼的分析表现。&lt;/li&gt;
&lt;li&gt;云数据库 / 云服务器 的成本到底有没有优势？
c5d.metal 用1年的价格，可以把服务器买下来托管用5年。对应规格云数据库用1年的价格，可以供你买同样的EC2用20年&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细测试过程与原始数据放置于：&lt;a href=&#34;https://github.com/Vonng/pgtpc&#34;&gt;github.com/Vonng/pgtpc&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pgbench&#34;&gt;PGBENCH&lt;/h2&gt;
&lt;p&gt;软件与硬件的技术日新月异，尽管性能评测的文章汗牛充栋，却没有多少能反映这些变换。在这项测试中，我们选择了两种新规格硬件，使用 &lt;strong&gt;PGBENCH&lt;/strong&gt; 测试了最新的 PostgreSQL 14.5 在这些硬件上的性能表现。&lt;/p&gt;
&lt;p&gt;测试的主体包括四种规格的硬件，两台 Apple 笔记本与三台 AWS EC2云服务器，分别是 2018 年使用 Intel 6核 i9芯片的 15寸顶配 Macbook Pro，2021 年使用 M1 MAX 芯片的顶配 16 寸 Macbook Pro ，AWS z1d.2xlarge (8C 64G)，以及 AWS c5d.metal ，这些都是市面上可以轻松买到的商用硬件。&lt;/p&gt;
&lt;p&gt;PGBENCH是 PostgreSQL 自带的压测工具，默认使用类 TPC-B 的查询，可用于评估 PostgreSQL 及其兼容版数据库的性能。测试分为两种：只读查询 RO、以及读写 RW。只读查询包含一条 SQL，随机从1亿条数据库中挑选一条查出；而读写事务包含5条SQL语句，一条查询、1条插入与三条更新。测试基于 s=1000 的数据集规模，使用 PGBENCH 逐步增加客户端连接数，找到 QPS / TPS 的极大值点，并记录持续测试 3-5 分钟后的稳定均值，结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Spec&lt;/th&gt;
&lt;th&gt;Config&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;Freq&lt;/th&gt;
&lt;th&gt;S&lt;/th&gt;
&lt;th&gt;RO&lt;/th&gt;
&lt;th&gt;RW&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple MBP Intel 2018&lt;/td&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2.9GHz - 4.8GHz&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;113870&lt;/td&gt;
&lt;td&gt;15141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;AWS z1d.2xlarge&lt;/td&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4GHz&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;162315&lt;/td&gt;
&lt;td&gt;24808&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple MBP M1 Max 2021&lt;/td&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;600MHz - 3.22GHz&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;240841&lt;/td&gt;
&lt;td&gt;31903&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;AWS c5d.metal&lt;/td&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;3.6GHz&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;625849&lt;/td&gt;
&lt;td&gt;71624&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;AWS c5d.metal&lt;/td&gt;
&lt;td&gt;Extreme&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;3.6GHz&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;1998580&lt;/td&gt;
&lt;td&gt;137127&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;read-write&#34;&gt;&lt;strong&gt;Read Write&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-2.jpg&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：各硬件配置下读写 TPS 上限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-3.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-3.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：各硬件配置下读写 TPS 曲线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Read Only&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-4.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：各硬件配置下点查 QPS 上限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-5.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-5.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：各硬件配置下点查 QPS - 并发曲线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果相当令人震惊，在 Apple M1 Max 10C 笔记本上，PG 跑出了 32K 读写，240K 点查的性能水平，在 AWS c5d.metal 生产物理机上，PG 跑出了 72K 读写，630K 点查的性能。使用极限优化压榨，最多可以达到 &lt;strong&gt;单机 137K 读写，2M 点查&lt;/strong&gt; 的怪兽级性能。&lt;/p&gt;
&lt;p&gt;作为一个粗略的规格参考，探探作为一个前部的互联网App，PostgreSQL 全局 TPS 为 40万左右。这意味着十几台这样的新笔记本，或几台顶配服务器（10W内¥）就有潜力支撑起一个大型互联网应用的数据库服务，这对于以前来说是难以想象的。&lt;/p&gt;
&lt;h3 id=&#34;关于成本&#34;&gt;&lt;strong&gt;关于成本&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;以宁夏区域，C5D.METAL 机型为例，该机型是目前综合算力最好的物理机，且自带 3.6 TB的本地NVME SSD存储，有7种可选的付费模式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;付费模式&lt;/th&gt;
&lt;th&gt;月度&lt;/th&gt;
&lt;th&gt;预付&lt;/th&gt;
&lt;th&gt;折合每年&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;按需付费&lt;/td&gt;
&lt;td&gt;31927&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;383,124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标准预留，1年，无预付费用&lt;/td&gt;
&lt;td&gt;12607&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;151,284&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标准预留，1年，预付部分&lt;/td&gt;
&lt;td&gt;5401&lt;/td&gt;
&lt;td&gt;64,540&lt;/td&gt;
&lt;td&gt;129,352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标准预留，1年，预付全部费用&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;126,497&lt;/td&gt;
&lt;td&gt;126,497&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可转化预留，3年，无预付费用&lt;/td&gt;
&lt;td&gt;11349&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;136,188&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可转化预留，3年，预付部分&lt;/td&gt;
&lt;td&gt;4863&lt;/td&gt;
&lt;td&gt;174,257&lt;/td&gt;
&lt;td&gt;116,442&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可转化预留，3年，预付全部费用&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;341,543&lt;/td&gt;
&lt;td&gt;113,847&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;折合每年成本在 11万 ～ 15万，零售按需每年成本38万。该机器如果自行购置，IDC托管代维网电五年综合成本应在10万内。尽管看上去云硬件的年化成本高达自建的五倍，但考虑到其灵活性，折扣优惠与抵扣券，AWS EC2 云服务器定价总体仍处于合理范围。使用此类云硬件自建数据库，也有非常优异的性能表现。&lt;/p&gt;
&lt;p&gt;但 RDS for PostgreSQL 则完全是另一个故事了，如果您想使用类似规格的云数据库，最接近的规格是 db.m5.24xlarge，96C，384G，配置 3.6T / 80000 IOPS 的 io1存储（c5d.metal 3.6T NVME SSD 8K RW IOPS 大约95K左右，普通 io1 存储最高 IOPS 为 80K），则每月成本为 24万¥，每年成本为286,7630¥ ，&lt;strong&gt;是同规格 EC2 自建的近 20 倍&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS价格计算器：&lt;a href=&#34;https://calculator.amazonaws.cn/&#34;&gt;https://calculator.amazonaws.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sysbench&#34;&gt;SYSBENCH&lt;/h2&gt;
&lt;p&gt;PostgreSQL 确实很强，但与其他数据库系统相比则何如？PGBENCH 主要用于评估 PostgreSQL 及其衍生/兼容数据库的性能，但如果需要横向比较不同数据库的性能表现，我们就要用到 sysbench 了。&lt;/p&gt;
&lt;p&gt;sysbench 是一款开源、跨平台的多线程数据库性能测试工具，测试结果可以很有代表性地反映一个数据库系统的事务处理能力能力。sysbench 包含了10个典型测试用例，如测试点查性能的 &lt;code&gt;oltp_point_select&lt;/code&gt;，更新性能的 &lt;code&gt;oltp_update_index&lt;/code&gt;，综合读写事务性能的 &lt;code&gt;oltp_read_only&lt;/code&gt; (16条查询一个事务)，&lt;code&gt;oltp_read_write&lt;/code&gt; （20条混合查询一个事务）与&lt;code&gt;oltp_write_only&lt;/code&gt; （6条写入SQL）等…。&lt;/p&gt;
&lt;p&gt;sysbench 既可以用于测试 MySQL 的性能，也可以用来测试 PgSQL 的性能（当然也包括两者的兼容衍生），因此具有良好的横向可比性。让我们先来看一下最为喜闻乐见的对比，开源关系数据库内战：世界上“最流行”的开源关系型数据库 —— MySQL ， 与世界上最先进的开源关系型数据库 —— PostgreSQL 性能横向对比。&lt;/p&gt;
&lt;h3 id=&#34;dirty-hack&#34;&gt;&lt;strong&gt;Dirty Hack&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MySQL 并没有提供一个官方的 sysbench 测试结果，只是在官网上贴出了一个第三方评测结果的图片与链接，不加解释地暗示 MySQL 可以做到 1M 的点查 QPS，240K 的索引键更新，约 39K 的复合读写TPS。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-5.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-6.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：https://www.mysql.com/why-mysql/benchmarks/mysql/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是相当&lt;strong&gt;不讲武德&lt;/strong&gt;的行为。因为如果阅览了连接的评测文章就会发现：这是把所有 MySQL 安全特性关闭得到的结果：关闭Binlog，提交刷盘，FSYNC，性能监控，DoubleWrite，校验和，强制使用 LATIN-1 字符集，这样的数据库根本没法用于生产环境，只是为了刷分而刷分。&lt;/p&gt;
&lt;p&gt;但反过来说，我们也可以使用这些 Dirty Hack，把对应的 PostgreSQL 安全特性也关闭，也看看 PostgreSQL 的最终极限在哪里？结果相当震撼，PGSQL点查QPS干到了 &lt;a href=&#34;/zh/blog//db/pg-performence/&#34;&gt;233万每秒&lt;/a&gt;，峰值远远甩开 MySQL 一倍还多。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-6.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;图：不讲武德的Benchmark：PgSQL vs MySQL&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-7.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-8.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL 极限配置下点查压测现场&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;必须说明的是，MySQL 的bench使用的是 48C 2.7GHz的机器，而PostgreSQL使用的是 96C 3.6GHz 的机器。不过因为PG使用进程模型，我们可以使用 c=48 的测试值作为 PG 在 48C 机器上表现的一个下限近似：对于只读请求，QPS峰值通常在客户端数略大于CPU核数时达到。即便如此，c=48 时PG的点查 QPS（ 150万）仍然比MySQL峰值高了43%。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此也期待 MYSQL 专家基于完全相同的硬件给出测评报告，更好的地进行对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-8.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-9.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：MySQL 有结果的四项 sysbench 结果，c=48&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在其他测试上，MySQL 也有不错的极限表现，&lt;code&gt;otlp_read_only&lt;/code&gt;, &lt;code&gt;oltp_update_non_index&lt;/code&gt; 都与 PostgreSQL （c=48）接近持平，甚至在 &lt;code&gt;oltp_read_write&lt;/code&gt; 上还略微超过 PostgreSQL。&lt;/p&gt;
&lt;p&gt;总体来说在极限条件下，PG除了点查上碾压了MySQL，其他测试上性能与 MySQL 基本持平。&lt;/p&gt;
&lt;h3 id=&#34;fair-play&#34;&gt;&lt;strong&gt;Fair Play&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;尽管在功能丰富度上判若云泥，但 MySQL 在极限性能上基本能与 PostgreSQL 称得上大体旗鼓相当。那么其他的数据库，特别是新一代 NewSQL 的表现又如何呢？&lt;/p&gt;
&lt;p&gt;能够在官网上给出 sysbench 测试报告的数据库都算是 Fair Play 的体面玩家，我们相信他们都是基于真实生产环境使用的配置进行的测试，因此不能和 MySQL 那样使用 Dirty Hack。这里我们依然使用 AWS c5d.metal 机型，但完全使用生产环境配置进行性能测试，相比极限性能有接近一半折损，但更为费厄泼赖，具有很强的可对比性。&lt;/p&gt;
&lt;p&gt;我们从几种比较具有代表性的NewSQL数据库官网上收集到了官方的 sysbench 评测报告。并不是所有的数据库都给出了完整的 sysbench 10 项测试结果，而且硬件规格与表规格也参差不齐。不过考虑到几种数据库均使用基本相仿的硬件规格（100核上下的算力，PolarDB-X , YugaBytes 除外），数据规模也基本为 160M 记录（OB，YB除外），总体还是具有比较可观的横向可比性，也足以让我们管中窥豹形成直觉认知了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;PGSQL.C5D96C&lt;/th&gt;
&lt;th&gt;TiDB.108C&lt;/th&gt;
&lt;th&gt;OceanBase.96C&lt;/th&gt;
&lt;th&gt;PolarX.64C&lt;/th&gt;
&lt;th&gt;Cockroach&lt;/th&gt;
&lt;th&gt;Yugabyte&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;oltp_point_select&lt;/td&gt;
&lt;td&gt;1372654&lt;/td&gt;
&lt;td&gt;407625&lt;/td&gt;
&lt;td&gt;401404&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;336000&lt;/td&gt;
&lt;td&gt;95695&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_read_only&lt;/td&gt;
&lt;td&gt;852440&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;279067&lt;/td&gt;
&lt;td&gt;366863&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;52416&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_read_write&lt;/td&gt;
&lt;td&gt;519069&lt;/td&gt;
&lt;td&gt;124460&lt;/td&gt;
&lt;td&gt;157859&lt;/td&gt;
&lt;td&gt;177506&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9740&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_write_only&lt;/td&gt;
&lt;td&gt;495942&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;119307&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9090&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_delete&lt;/td&gt;
&lt;td&gt;839153&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;67499&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_insert&lt;/td&gt;
&lt;td&gt;164351&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;112000&lt;/td&gt;
&lt;td&gt;6348&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_update_non_index&lt;/td&gt;
&lt;td&gt;217626&lt;/td&gt;
&lt;td&gt;62084&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;11496&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oltp_update_index&lt;/td&gt;
&lt;td&gt;169714&lt;/td&gt;
&lt;td&gt;26431&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select_random_points&lt;/td&gt;
&lt;td&gt;227623&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select_random_ranges&lt;/td&gt;
&lt;td&gt;24632&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Machine&lt;/td&gt;
&lt;td&gt;c5d.metal&lt;/td&gt;
&lt;td&gt;m5.xlarge x3 i3.4xlarge x3 c5.4xlarge x3&lt;/td&gt;
&lt;td&gt;ecs.hfg7.8xlarge x3 ecs.hfg7.8xlarge x1&lt;/td&gt;
&lt;td&gt;Enterprise&lt;/td&gt;
&lt;td&gt;c5d.9xlarge x3&lt;/td&gt;
&lt;td&gt;c5.4xlarge x3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spec&lt;/td&gt;
&lt;td&gt;96C 192G&lt;/td&gt;
&lt;td&gt;108C 510G&lt;/td&gt;
&lt;td&gt;96C 384G&lt;/td&gt;
&lt;td&gt;64C 256G&lt;/td&gt;
&lt;td&gt;108C 216G&lt;/td&gt;
&lt;td&gt;48C 96G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Table&lt;/td&gt;
&lt;td&gt;16 x 10M&lt;/td&gt;
&lt;td&gt;16 x 10M&lt;/td&gt;
&lt;td&gt;30 x 10M&lt;/td&gt;
&lt;td&gt;1 x 160M&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;10 x 0.1M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Source&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;td&gt;TiDB 6.1&lt;/td&gt;
&lt;td&gt;OceanBase&lt;/td&gt;
&lt;td&gt;PolarDB&lt;/td&gt;
&lt;td&gt;Cockroach&lt;/td&gt;
&lt;td&gt;YugaByte&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-10.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-10.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：sysbench 10项测试结果（QPS，越高越好）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-11.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-11.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;按数据库分类，除以核数的归一化性能对比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让人感到震惊的是，新一代分布式数据库（NewSQL）全线拉胯。在相近的硬件规格下，与 PostgreSQL 表现出高达数量级的差距，几种新数据库中表现最好的反而是仍然基于经典主从架构的 PolarDB。这样的性能结果，&lt;strong&gt;难免不让人重新审视起分布式数据库与 NewSQL 的理念&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常来说，分布式数据库的核心利弊权衡是质量换规模，但让人没想到的是牺牲掉的不仅仅是功能与稳定性，还有如此可观的性能。高德纳曰：“过早优化是万恶之源”，为了不需要的规模（万亿级+，TP百TB+）牺牲如此大的性能（以及功能与稳定性）毫无疑问是过早优化的一种形式，而能有多少业务场景会有 Google 量级的数据非要分布式数据库不可，仍然是一个问号。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tpc-h分析性能&#34;&gt;TPC-H分析性能&lt;/h2&gt;
&lt;p&gt;TP不行，AP来凑。尽管分布式数据库在 TP 领域如此拉胯，但数据分析 AP 才是分布式数据库的基本盘，因此很多分布式数据库喜欢炒作 HTAP 的概念。而衡量 AP 系统的能力，我们会用到 TPC-H 测试。&lt;/p&gt;
&lt;p&gt;TPC-H 是一个模拟数仓，包含8张数据表，与22条复杂分析类SQL。衡量分析性能的标准通常是在指定仓数下执行这22条SQL的耗时。通常使用100仓，约100GB数据作为基准。我们在本地笔记本和小型AWS云服务器进行了 TPC-H 1,10,50,100 仓的测试，完成全部22个查询，耗时结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scale Factor&lt;/th&gt;
&lt;th&gt;Time (s)&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10C / 64G&lt;/td&gt;
&lt;td&gt;apple m1 max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10C / 64G&lt;/td&gt;
&lt;td&gt;apple m1 max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;1327&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10C / 64G&lt;/td&gt;
&lt;td&gt;apple m1 max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;4835&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10C / 64G&lt;/td&gt;
&lt;td&gt;apple m1 max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;13.5&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8C / 64G&lt;/td&gt;
&lt;td&gt;z1d.2xlarge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;133&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8C / 64G&lt;/td&gt;
&lt;td&gt;z1d.2xlarge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;作为横向对比，我们选取了一些其他数据库官网或比较详细的第三方测评结果。不过在对比前，有几点需要注意：一是有一些数据库产品仓数并非100，二来硬件规格也不尽相同，三来并不是所有数据库评测结果都来自原厂，因此只能作为&lt;strong&gt;大致的对照和参考&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;S&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;QPH&lt;/th&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;45.0&lt;/td&gt;
&lt;td&gt;10C / 64G M1 Max&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;64.3&lt;/td&gt;
&lt;td&gt;10C / 64G M1 Max&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;1327&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;13.6&lt;/td&gt;
&lt;td&gt;10C / 64G M1 Max&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;4835&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;7.4&lt;/td&gt;
&lt;td&gt;10C / 64G M1 Max&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;13.51&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;33.3&lt;/td&gt;
&lt;td&gt;8C / 64G z1d.2xlarge&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;133.35&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;33.7&lt;/td&gt;
&lt;td&gt;8C / 64G z1d.2xlarge&lt;/td&gt;
&lt;td&gt;Vonng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TiDB&lt;/td&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;15.8&lt;/td&gt;
&lt;td&gt;120C / 570G&lt;/td&gt;
&lt;td&gt;TiDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spark&lt;/td&gt;
&lt;td&gt;388&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;7.7&lt;/td&gt;
&lt;td&gt;120C / 570G&lt;/td&gt;
&lt;td&gt;TiDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Greenplum&lt;/td&gt;
&lt;td&gt;436&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;288&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;120C / 570G&lt;/td&gt;
&lt;td&gt;TiDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeepGreen&lt;/td&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;288C / 1152G&lt;/td&gt;
&lt;td&gt;Digoal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MatrixDB&lt;/td&gt;
&lt;td&gt;2306&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;6.1&lt;/td&gt;
&lt;td&gt;256C / 1024G&lt;/td&gt;
&lt;td&gt;MXDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hive&lt;/td&gt;
&lt;td&gt;59599&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;256C / 1024G&lt;/td&gt;
&lt;td&gt;MXDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StoneDB&lt;/td&gt;
&lt;td&gt;3388&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;1.7&lt;/td&gt;
&lt;td&gt;64C / 128G&lt;/td&gt;
&lt;td&gt;StoneDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClickHouse&lt;/td&gt;
&lt;td&gt;11537&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;64C / 128G&lt;/td&gt;
&lt;td&gt;StoneDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OceanBase&lt;/td&gt;
&lt;td&gt;189&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;19.8&lt;/td&gt;
&lt;td&gt;96C / 384G&lt;/td&gt;
&lt;td&gt;OceanBase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolarDB&lt;/td&gt;
&lt;td&gt;387&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;14.5&lt;/td&gt;
&lt;td&gt;32C / 128G&lt;/td&gt;
&lt;td&gt;阿里云&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolarDB&lt;/td&gt;
&lt;td&gt;755&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;14.9&lt;/td&gt;
&lt;td&gt;16C / 64G&lt;/td&gt;
&lt;td&gt;阿里云&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为了便于衡量，我们可以归一化核数与仓数，用 QPH ，即每小时，每核，执行1仓 TPC-H 查询可以执行多少轮，来近似评估数据库的相对分析性能。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-12.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-12.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QPH = (1 / 时长) * (仓数 / 核数) * 3600&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;22个查询耗时对于不同仓数来说并非完全线性关系，因此只可作为近似参考。&lt;/p&gt;
&lt;p&gt;不过总体来说，即使是 10 核的笔记本跑 PostgreSQL，也可以有相当亮眼的分析成绩来&lt;/p&gt;
&lt;p&gt;（注：50C以上已经超过内存，走SWAP与磁盘IO了）。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-13.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-13.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：论文《how good is my HTAP system》提出的评测 HTAP系统能力的方法 —— 吞吐量前沿，在AP/TP二维平面上画出混合负载的吞吐量极值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至少在百GB级的表上，PostgreSQL足以称得上是一款表现优秀的分析数据库。如果单表超过几TB量级，也可以平滑升级至 Greenplum / MatrixDB / DeepGreen 等 PostgreSQL 兼容MPP数仓。。采用主从复制的 PostgreSQL 可以通过级联从库的方式近乎无限地 Scale 读负载，采用逻辑复制的 PostgreSQL 可以内置/同步地完成AP模式ETL，可谓是真正的 HTAP 数据库。&lt;/p&gt;
&lt;p&gt;综上所述，&lt;strong&gt;PostgreSQL 在 TP 领域表现极其亮眼，在 AP 领域表现可圈可点&lt;/strong&gt;。这也难怪在最近几年的 StackOverflow 开发者年度调研中， PostgreSQL 成为了 专业开发者最常用，最受喜爱，最想要的&lt;a href=&#34;/zh/blog//db/pg-is-no1/&#34;&gt;三冠王数据库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-performence-14.png&#34; src=&#34;/zh/blog/pg/pg-performence/pg-performence-14.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;StackOverflow 近六年数据库开发者调研结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;[1]  &lt;a href=&#34;https://github.com/Vonng/pgtpc&#34;&gt;Vonng: PGTPC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]  &lt;a href=&#34;https://www.mysql.com/cn/why-mysql/benchmarks/mysql/&#34;&gt;WHY MYSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3]  &lt;a href=&#34;http://dimitrik.free.fr/blog/posts/mysql-performance-1m-iobound-qps-with-80-ga-on-intel-optane-ssd.html&#34;&gt;MySQL Performance : 1M &lt;em&gt;IO-bound&lt;/em&gt; QPS with 8.0 GA on Intel Optane SSD !&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]  &lt;a href=&#34;http://dimitrik.free.fr/blog/posts/mysql-performance-80-and-sysbench-oltp_rw-updatenokey.html&#34;&gt;MySQL Performance : 8.0 and Sysbench OLTP_RW / Update-NoKEY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5]  &lt;a href=&#34;http://dimitrik.free.fr/blog/posts/mysql-80-perf-new-dblwr.html&#34;&gt;MySQL Performance : The New InnoDB Double Write Buffer in Action&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6]  &lt;a href=&#34;https://docs.pingcap.com/tidb/stable/benchmark-sysbench-v6.1.0-vs-v6.0.0&#34;&gt;TiDB Sysbench Performance Test Report &amp;ndash; v6.1.0 vs. v6.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7]  &lt;a href=&#34;https://www.oceanbase.com/docs/community/observer-cn/V3.1.4/10000000000450311&#34;&gt;OceanBase 3.1 Sysbench 性能测试报告&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8]  &lt;a href=&#34;https://www.cockroachlabs.com/docs/stable/performance.html&#34;&gt;Cockroach 22.15 Benchmarking Overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9]  &lt;a href=&#34;https://docs.yugabyte.com/preview/benchmark/sysbench-ysql/&#34;&gt;Benchmark YSQL performance using sysbench (v2.15)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10] &lt;a href=&#34;https://help.aliyun.com/document_detail/139562.html&#34;&gt;PolarDB-X 1.0 Sysbench 测试说明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[11] &lt;a href=&#34;https://stonedb.io/zh/docs/performance-tuning/performance-tests/OLAP/tcph-test-report/&#34;&gt;StoneDB OLAP TCP-H测试报告&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[12] &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3514221.3526148&#34;&gt;Elena Milkai: &amp;ldquo;How Good is My HTAP System?&amp;quot;,SIGMOD ’22 Session 25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[13] &lt;a href=&#34;https://calculator.amazonaws.cn/&#34;&gt;AWS Calculator&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 为什么PostgreSQL是最成功的数据库？</title>
      <link>/zh/blog/pg/pg-is-best/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-is-best/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-is-best/featured_hu9219dcea2520a215cc241ac1c1fe8b1f_187728_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们说一个数据库&amp;quot;成功&amp;quot;时，到底在说什么？是指功能性能易用性，还是成本生态复杂度？评价指标有很多，但这件事最终还得由用户来定夺。&lt;/p&gt;
&lt;p&gt;数据库的用户是开发者，而开发者的意愿、喜好、选择又如何？StackOverflow 连续六年，向来自180个国家的七万多开发者问了这三个问题。&lt;/p&gt;
&lt;p&gt;总览这六年的调研结果，不难看出在2022年，PostgreSQL 已经同时在这三项上登顶夺冠，成了字面意义上 “最成功的数据库”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL 成为 专业开发者&lt;strong&gt;最常使用&lt;/strong&gt;的数据库！（Used）&lt;/li&gt;
&lt;li&gt;PostgreSQL 成为 开发者&lt;strong&gt;最为喜爱&lt;/strong&gt;的数据库！（Loved）&lt;/li&gt;
&lt;li&gt;PostgreSQL 成为开发者&lt;strong&gt;最想要用&lt;/strong&gt;的数据库！（Wanted）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;流行度反映当年势能，需求度预示来年动能，喜爱度代表长期潜能。时与势都站在 PostgreSQL 一侧，让我们来看一看更具体的数据与结果。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;最流行&#34;&gt;最流行&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 专业开发者中最流行的数据库！（Used）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一项调研，是关于开发者目前使用着什么样的数据库，即，&lt;strong&gt;流行度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;过去几年，MySQL一直霸占着数据库流行榜的榜首，很符合其 ”世界上最流行的开源关系型数据库“ 这一口号。不过这一次，”最流行“的桂冠恐怕要让给 PostgreSQL 了。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;专业开发者&lt;/strong&gt;中，PostgreSQL 以 46.5% 的使用率第一次超过 MySQL 位居第一，而 MySQL 以 45.7% 的使用率降至第二名。
同为泛用性最好的&lt;strong&gt;开源&lt;/strong&gt;关系型数据库，排名第一第二的 PGSQL 与 MySQL ，与其他的数据库远远拉开了距离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-3.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TOP 9 数据库流行度演变（2017-2022）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PGSQL 与 MySQL 的流行度差别并不大。值得一提的是，在&lt;strong&gt;见习开发者&lt;/strong&gt;群体中，MySQL 仍然占据显著使用率优势（58.4%），如果算上&lt;strong&gt;见习开发者&lt;/strong&gt;，MySQL 甚至仍然保有 3.3% 的微弱整体领先优势。&lt;/p&gt;
&lt;p&gt;但从下图中不难看出，PostgreSQL 有显著的增长动能，而其他数据库，特别是  MySQL、 SQL Server、Oracle 的使用率则在最近几年持续衰退。随着时间的推移，PostgreSQL 的领先优势将进一步拉大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四大关系型数据库流行度对比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;流行度&lt;/strong&gt;反映的是当下数据库的规模势能，而&lt;strong&gt;喜爱度&lt;/strong&gt;反映的是未来数据库的增长潜能。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;最喜爱&#34;&gt;最喜爱&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 开发者&lt;strong&gt;最为喜爱&lt;/strong&gt;的数据库！（Loved）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二个问题是关于开发者喜爱什么数据库，讨厌什么数据库。在此项调研中，PostgreSQL与Redis一骑绝尘，以70%+ 的喜爱率高居榜首，显著甩开其他数据库。&lt;/p&gt;
&lt;p&gt;在过去几年，Redis一直是用户最喜欢的数据库。在 2022 年，形势发生了变化，PostgreSQL 第一次超过 Redis，成为最受开发者喜爱的数据库。
Redis是简单易用的数据结构缓存服务器，经常会与关系型数据库搭配使用，广受开发者喜爱。不过开发者明显更爱功能强大得多的 PostgreSQL 多一丢丢。&lt;/p&gt;
&lt;p&gt;相比之下 MySQL 与 Oracle 的表现就比较拉胯了。喜欢和讨厌 MySQL 的人基本各占一半；而只有35%的用户喜欢 Oracle ，这也意味着近 2/3 的开发者反感 Oracle 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-5.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TOP 9 数据库喜爱度演变（2017-2022）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从逻辑上讲，&lt;strong&gt;用户的喜爱将导致软件的流行，用户的厌恶将导致软件过气&lt;/strong&gt;。
我们可以参照 净推荐指数（NPS，又称口碑，推荐者%-贬损者%）的构造方式，
设计一个净喜爱指数 NLS：即 喜爱人群% - 厌恶人群%，
而数据库流行度的导数应当与 NLS 呈现正相关性 。&lt;/p&gt;
&lt;p&gt;数据很好的印证了这一点： PGSQL 有着全场最高的 NLS： 44% ，对应着最高的流行度增长率 每年 460个基点。
MySQL 的口碑刚好落在褒贬线上方 （2.3%），流行度平均增速为36个基点；
而 Oracle 的口碑则为负的 29%，对应平均每年44个基点的使用率负增长。
当然在这份榜单上， Oracle 只是倒数第三惨的，最不受人待见的是 IBM DB2 ：
1/4的人喜欢，3/4的人讨厌，NLS = -48% ，对应46个基点的年平均衰退。&lt;/p&gt;
&lt;p&gt;当然，并不是所有潜能，都可以转换为实打实的动能。
用户的喜爱并不一定会付诸行动，而这就是第三项调研所要回答的问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;最想要&#34;&gt;最想要&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL —— 开发者 最想使用的数据库！（Wanted）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“在过去的一年中，你在哪些数据库环境中进行了大量开发工作？在未来一年，你想在哪些数据库环境中工作？ ”&lt;/p&gt;
&lt;p&gt;对于这个问题前半段的回答，引出了”最流行“数据库的调研结果；而后半段，则给出了”最想要“这个问题的答案。
如果说用户的喜爱代表的是未来增长的潜能，那么用户的需求（想要，Want）就代表了下一年实打实的增长动能。&lt;/p&gt;
&lt;p&gt;在今年的调研中， PostgreSQL 毫不客气的挤开 MongoDB ，占据了开发者最想使用数据库的宝座。
高达 19% 的受访者表示，下一年中想要使用 PostgreSQL 环境进行开发。
紧随其后的是 MongoDB (17%) 与 Redis (14%)，这三种数据库的需求程度与其他数据库显著拉开了一个台阶。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;此前， MongoDB 一直占据”最想要“数据库榜首，但最近开始出现过气乏力的态势。
原因是多方面的：例如，MongoDB 本身也受到了 PostgreSQL 的冲击。
PostgreSQL 本身就包含了完整的 JSON 特性，可直接用作文档数据库，更有类似 FerretDB （原名 MangoDB）的项目可以直接在 PG 上对外提供 MongoDB 的 API。&lt;/p&gt;
&lt;p&gt;MongoDB 与 Redis 都是 NoSQL 运动的主力军。但与 MongoDB 不同，Redis的需求在不断增长。PostgreSQL 与 Redis，分别作为 SQL 与 NoSQL 的领军者，保持着旺盛的需求与高速的增长，前途无量。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;为什么&#34;&gt;为什么？&lt;/h2&gt;
&lt;p&gt;PostgreSQL 在需求率， 使用率，喜爱率上都拔得头筹，天时地利人和齐备，动能势能潜能都有，足以称得起是最成功的数据库了。&lt;/p&gt;
&lt;p&gt;但我们想知道的是，为什么 PostgreSQL 会如此成功 ？&lt;/p&gt;
&lt;p&gt;其实，秘密就藏在它的 Slogan 里： ”世界上&lt;strong&gt;最先进&lt;/strong&gt;的&lt;strong&gt;开源&lt;/strong&gt; &lt;strong&gt;关系型数据库&lt;/strong&gt;“。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关系型数据库&#34;&gt;关系型数据库&lt;/h2&gt;
&lt;p&gt;关系型数据库是如此的普及与重要，也许其他的数据库品类如键值，文档，搜索引擎，时序，图，向量加起来也比不上它的一个零头。以至于当大家谈起数据库时，如果没有特殊说明，默认隐指的就是”关系型数据库“。在它面前，没有其他数据库品类敢称自己为”主流“。&lt;/p&gt;
&lt;p&gt;以 &lt;a href=&#34;https://db-engines.com/en/ranking_trend&#34;&gt;DB-Engine&lt;/a&gt; 为例，DB-Engine的排名标准包括搜索系统名称时的搜索引擎结果数，Google趋势，Stack Overflow讨论，Indeed 提及系统的工作机会，LinkedIn等专业网络中的个人资料数，Twitter等社交网络中的提及数等，可理解为数据库的“综合热度”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-7.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库热度趋势：https://db-engines.com/en/ranking_trend&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 DB-Engine 的热度趋势图中我们可以看到一条鸿沟，前四名全都是 &lt;strong&gt;关系型数据库&lt;/strong&gt; ，加上排名第五的 MongoDB，与其他数据库在热度上拉开了 &lt;strong&gt;数量级上的差距&lt;/strong&gt;。
我们只需要把关注点聚焦到这四种核心的&lt;strong&gt;关系型数据库&lt;/strong&gt; Oracle，MySQL，SQL Server，PostgreSQL 上即可。&lt;/p&gt;
&lt;p&gt;关系型数据库的生态位高度重叠，其关系可以视作零和博弈。抛开微软生态关门自嗨相对独立的商业数据库 SQL Server不提。在关系型数据库世界里，上演的是一场三国演义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-8.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oracle有才无德，MySQL才浅德薄，唯有PostgreSQL德才兼备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oracle是老牌商业数据库，有着深厚的历史技术积淀，功能丰富，支持完善。稳坐数据库头把交椅，广受不差钱且需要背锅侠的企业喜爱。但Oracle费用昂贵，且以讼棍行径成为知名的业界毒瘤。Microsoft SQL Server性质与Oracle类似，都属于商业数据库。&lt;strong&gt;商业数据库整体受开源数据库冲击&lt;/strong&gt;，处于缓慢衰退的状态。&lt;/p&gt;
&lt;p&gt;MySQL流行度位居第二，但树大招风，处于前狼后虎，上有野爹下有逆子的不利境地：在严谨的事务处理和数据分析上，MySQL被同为开源生态位的PostgreSQL甩开几条街；而在糙猛快的敏捷方法论上，MySQL又不如新兴NoSQL好用；同时 MySQL 上有养父 Oracle 压制，中有兄弟 MariaDB 分家，下有诸如逆子 TiDB 等协议兼容NewSQL分羹，因此也在走下坡路。&lt;/p&gt;
&lt;p&gt;作为老牌商业数据库，Oracle的&lt;strong&gt;才&lt;/strong&gt;毋庸质疑，但其作为业界毒瘤，“&lt;strong&gt;德&lt;/strong&gt;” ，亦不必多说，故曰：“&lt;strong&gt;有才无德&lt;/strong&gt;”。MySQL 虽有开源之功德，奈何认贼作父；且才疏学浅，功能简陋，只能干干CRUD，故曰“&lt;strong&gt;才浅德薄&lt;/strong&gt;”。唯有PostgreSQL，&lt;strong&gt;德才兼备&lt;/strong&gt;，既占据了&lt;strong&gt;开源&lt;/strong&gt;崛起之天时，又把握住功能&lt;strong&gt;先进&lt;/strong&gt;之地利，还有着宽松BSD协议之人和。正所谓：藏器于身，因时而动。不鸣则已，一鸣惊人，一举夺冠！&lt;/p&gt;
&lt;p&gt;而 PostgreSQL 德以致胜的秘密，就是 &lt;strong&gt;先进&lt;/strong&gt; 与 &lt;strong&gt;开源&lt;/strong&gt;！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;开源之德&#34;&gt;开源之德&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PG的“德”在于开源&lt;/strong&gt;。祖师爷级的开源项目，全世界开发者群策群力的伟大成果。&lt;/p&gt;
&lt;p&gt;协议友善BSD，生态繁荣扩展多。开枝散叶，子孙满堂，Oracle替代扛旗者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么叫“德”，合乎于“道”的表现就是德。而这条“道”就是&lt;strong&gt;开源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;PostgreSQL是历史悠久的祖师爷级开源项目，更是全世界开发者群策群力的典范成果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-9.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生态繁荣，扩展丰富，开枝散叶，子孙满堂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久很久以前，开发软件/信息服务需要使用非常昂贵的商业数据库软件：例如Oracle与SQL Server：单花在软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。Oracle一个 CPU 核一年的软件授权费用便高达十几万，即使壕如阿里也吃不消要去IOE。以 PostgreSQL / MySQL 为代表的的开源数据库崛起，让用户有了一个新选择：软件不要钱。“不要钱” 的开源数据库可以让我们自由随意地使用数据库软件，而这一点深刻影响了行业的发展：从接近一万￥/ 核·月的商业数据库，到20块钱/核·月的纯硬件成本。数据库走入寻常企业中，让免费提供信息服务成为可能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-10.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;开源是有大功&lt;strong&gt;德&lt;/strong&gt;的。互联网的历史就是开源软件的历史，IT行业之所以有今天的繁荣，人们能享受到如此多的免费信息服务，核心原因之一就是开源软件。开源是一种真正成功的，以软件自由为目的，由开发者构成的 Communism（&lt;strong&gt;社区主义&lt;/strong&gt;）：软件这种IT业的核心生产资料变为全世界开发者公有，按需分配。开发者各尽所能，人人为我，我为人人。&lt;/p&gt;
&lt;p&gt;一个开源程序员工作时，其劳动背后可能蕴含的是数以万计顶尖开发者的智慧结晶。程序员薪资高从原理上来说是因为，开发者本质上不是一个简单的工人，而是一个指挥软件和硬件干活的包工头。程序员自己就是核心生产资料；软件来自公有社区；服务器硬件更是唾手可得；因此一个或几个高级的软件工程师，就可以很轻松的利用&lt;strong&gt;开源生态&lt;/strong&gt;快速解决领域问题。&lt;/p&gt;
&lt;p&gt;通过开源，所有社区开发者形成合力，极大降低了重复造轮子的内耗。使得整个行业的技术水平以匪夷所思的速度向前迈进。开源的势头就像滚雪球，时至今日已经势不可挡。基本上除了一些特殊场景和路径依赖，软件开发中闭门造车搞自力更生几乎成了一个大笑话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-11.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;越是底层基础的软件，开源便越占优势。开源，也是 PostgreSQL 对阵 Oracle 的最大底气所在。&lt;/p&gt;
&lt;p&gt;Oracle 先进，但 PostgreSQL 也不差。PostgreSQL 是 Oracle 兼容性最好的开源数据库，原生即支持 Oracle 85% 的功能，更有 96% 功能兼容的专业发行版。但更重要的是，Oracle价格高昂，而PG开源免费。压倒性的成本优势让PG拥有了巨大的生态位基础：它不一定要在功能先进性上超过 Oracle 才能成功 ，廉价9成正确已经足以干翻 Oracle 。&lt;/p&gt;
&lt;p&gt;PostgreSQL 可以视作一个开源版的“Oracle”，是唯一能真正威胁到 Oracle 的数据库。作为 ”去O“ 抗旗者，PG 可谓子孙满堂， 36% 的 “国产数据库” 更是直接基于PG “开发”，养活了一大批 &lt;strong&gt;自主可控&lt;/strong&gt; 的 数据库公司，可谓功德无量。更重要的是，PostgreSQL 社区并不反对这样的行为，BSD 协议允许这样做。这样开放的胸襟，是被Oracle收购的，使用GPL协议的MySQL所难以相比的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;先进之才&#34;&gt;先进之才&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PG的“才”在于先进&lt;/strong&gt;。一专多长的全栈数据库，一个打十个，天生就是 HTAP。&lt;/p&gt;
&lt;p&gt;时空地理分布式，时序文档超融合，单一组件即可覆盖几乎所有数据库需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PG的“才”在于一专多长&lt;/strong&gt;。PostgreSQL是一专多长的全栈数据库，天生就是HTAP，超融合数据库，一个打十个。基本单一组件便足以覆盖中小型企业绝大多数的数据库需求：OLTP，OLAP，时序数据库，空间GIS，全文检索，JSON/XML，图数据库，缓存，等等等等。&lt;/p&gt;
&lt;p&gt;PostgreSQL是各种关系型数据库中性价比最高的选择：它不仅可以用来做传统的CRUD OLTP业务，&lt;strong&gt;数据分析&lt;/strong&gt;更是它的拿手好戏。各种特色功能更是提供了切入多种行业以的契机：基于PostGIS的地理时空数据处理分析，基于Timescale的时序金融物联网数据处理分析，基于Pipeline存储过程触发器的流式处理，基于倒排索引全文检索的搜索引擎，FDW对接统一各式各样的外部数据源。可以说，PG是真正一专多长的全栈数据库，它可以实现的比单纯OLTP数据库要丰富得多的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-12.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在一个很可观的规模内，PostgreSQL都可以独立扮演多面手的角色，一个组件当多种组件使。&lt;strong&gt;而单一数据组件选型可以极大地削减项目额外复杂度，这意味着能节省很多成本。它让十个人才能搞定的事，变成一个人就能搞定的事。&lt;/strong&gt; 不是说PG要一个打十个把其他数据库的饭碗都掀翻：专业组件在专业领域的实力是毋庸置疑的。但切莫忘记，&lt;strong&gt;为了不需要的规模而设计是白费功夫&lt;/strong&gt;，这属于&lt;strong&gt;过早优化&lt;/strong&gt;的一种形式。如果真有那么一样技术可以满足你所有的需求，那么使用该技术就是最佳选择，而不是试图用多个组件来重新实现它。&lt;/p&gt;
&lt;p&gt;以探探为例，在 250w TPS与 200TB 数据的量级下，&lt;strong&gt;单一PostgreSQL选型&lt;/strong&gt;依然能稳定可靠地撑起业务。能在很可观的规模内做到一专多长，除了本职的OLTP，PG 还在相当长的时间里兼任了缓存，OLAP，批处理，甚至消息队列的角色。当然神龟虽寿，犹有竟时。最终这些兼职功能还是要逐渐&lt;strong&gt;分拆&lt;/strong&gt;出去由专用组件负责，但那已经是近千万日活时的事了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pg-is-great-13.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;vs-mysql&#34;&gt;vs MySQL&lt;/h3&gt;
&lt;p&gt;PostgreSQL 的先进性有目共睹，这也是其对阵同为开源关系型数据库的老对手 ——  MySQL 时，真正的核心竞争力。&lt;/p&gt;
&lt;p&gt;MySQL的口号是“&lt;strong&gt;世界上最流行的开源关系型数据库&lt;/strong&gt;”，它的核心特点是&lt;strong&gt;糙猛快&lt;/strong&gt;，用户基本盘是互联网。互联网公司的典型特点是什么？追逐潮流&lt;strong&gt;糙猛快&lt;/strong&gt;。&lt;strong&gt;糙&lt;/strong&gt;说的是互联网公司业务场景简单（CRUD居多）；数据重要性不高，不像传统行业（例如银行）那样在意数据的一致性与正确性；可用性优先，相比停服务更能容忍数据丢乱错，而一些传统行业宁可停止服务也不能让账目出错。 &lt;strong&gt;猛&lt;/strong&gt;说的则是互联网行业数据量大，它们需要的就是水泥槽罐车做海量CRUD，而不是高铁和载人飞船。 &lt;strong&gt;快&lt;/strong&gt;说的则是互联网行业需求变化多端，出活周期短，要求响应时间快，大量需求的就是开箱即用的软件全家桶（如LAMP）和简单培训就能上手干活的CRUD Boy。于是，糙猛快的互联网公司和糙猛快的MySQL一拍即合。&lt;/p&gt;
&lt;p&gt;但时过境迁，PostgreSQL 进步神速，在”快“与”猛“上 MySQL 已经不占优了，现在能拿出手的只剩下”糙“了。举个例子，MySQL 的哲学可以称之为：“好死不如赖活着”，与 “我死后哪管洪水滔天”。 其“糙”体现在各种“容错”上，例如允许呆瓜程序员写出的错误的SQL也能跑起来。最离谱的例子就是MySQL竟然允许&lt;strong&gt;部分成功&lt;/strong&gt;的事务提交，这就违背了关系型数据库的基本约束：&lt;strong&gt;原子性与数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pg-is-great-14.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：MySQL默认竟然允许部分成功的事务提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先进的因会反映为流行的果，流行的东西因为落后而过气，而先进的东西会因为先进变得流行。时代所赋予的红利，也会随时代过去而退潮。在这个变革的时代中，没有先进的功能打底，“流行”也也难以长久。在先进性上， PostgreSQL 丰富的功能已经甩开 MySQL 了几条街，而 MySQL 引以为豪的 ”流行度“ 也开始被 PostgreSQL 反超。&lt;/p&gt;
&lt;p&gt;大势所趋，大局已定。正所谓：时来天地皆同力，运去英雄不自由。先进与开源，就是 PostgreSQL 最大的两样杀手锏。Oracle 先进， MySQL 开源，PostgreSQL 先进又开源。天时地利人和齐备，何愁大业不成？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;展望未来&#34;&gt;展望未来&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;软件吞噬世界， 开源吞噬软件，而云吞噬开源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看上去，数据库之争已经尘埃落定，一段时间内大概不会有其他数据库内核能威胁到 PostgreSQL 了。
但对 PostgreSQL 开源社区 真正的威胁，已经不再是其他数据库内核，而是软件使用范式的嬗变：云出现了。&lt;/p&gt;
&lt;p&gt;最初，大家开发软件/信息服务需要使用昂贵的&lt;strong&gt;商业软件&lt;/strong&gt;（ Oracle，SQL Server，Unix）。而随着 Linux / PostgreSQL 这些&lt;strong&gt;开源&lt;/strong&gt;软件的兴起，用户们有了新的选择。开源软件确实免费不要钱，但想用好开源软件，是一件门槛很高的事情，用户不得不雇佣开源软件专家来帮助自己用好开源软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-15.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当数据库上了规模，雇佣开源DBA自建始终是合算的，只是好DBA太稀缺了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这便是开源的核心模式：开源软件开发者给开源软件做贡献；开源软件通过好用免费吸引大量用户；用户在使用开源软件时产生需求，创造更多开源软件相关就业岗位，创造更多的开源软件开发者。
这三步形成了一个正反馈循环：更多的开源贡献者让开源软件更好用，更省钱，从而吸引更多用户，并创造出更多的开源贡献者。开源生态的繁荣有赖于这个闭环，而公有云厂商的出现打破了这个循环。&lt;/p&gt;
&lt;p&gt;公有云厂商将开源数据库套上壳，加上自己的硬件与管控软件，雇佣共享DBA提供支持，便成了&lt;strong&gt;云数据库&lt;/strong&gt;。诚然这是一项很有价值的服务，但云厂商将开源软件放在自家的云平台售卖而鲜有回馈，实质上是一种通过“搭便车”吸血开源的行为。
这样的共享外包模式将导致开源软件的岗位向云厂商集中，最终形成少数巨头做大垄断，伤害到所有用户的软件自由。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界已经被云改变了，闭源软件早已不是最重要的问题了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“&lt;strong&gt;在 2020 年，计算自由的敌人是云计算软件&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这是 DDIA 作者 Martin Kleppmann 在其“本地优先软件”运动中提出的 &lt;a href=&#34;https://pg.vonng.com/#/post/goodbye-gpl&#34;&gt;宣言&lt;/a&gt;。云软件指的是运行在供应商服务器上的软件，例如：Google Docs、Trello、Slack、Figma、Notion 。以及最核心的云软件，&lt;strong&gt;云数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;后云时代，开源社区如何应对云软件的挑战？Cloud Native 运动给出了答案。这是一场从公有云夺回软件自由的伟大运动，而数据库，则是其中的核心焦点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-16.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud Native 全景图，还缺少最后一块拼图：有状态的数据库！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也是我们做 &lt;strong&gt;开箱即用的开源PostgreSQL 数据库发行版&lt;/strong&gt; —— &lt;a href=&#34;https://pigsty.cc&#34;&gt;Pigsty&lt;/a&gt; 想要解决的问题：做一个用户在本地即可使用的RDS服务，成为云数据库的开源替代！&lt;/p&gt;
&lt;p&gt;Pigsty 带有开箱即用的 RDS / PaaS / SaaS 整合；一个无可比拟的PG监控系统与自动驾驶的高可用集群架构方案；一键安装部署，并提供 Database as Code 的易用体验；在体验比肩甚至超越云数据库的前提下，数据自主可控且成本减少 50% ~ 90%。我们希望它能极大降低 PostgreSQL 使用的门槛，让更多用户可以用 &lt;strong&gt;好数据库&lt;/strong&gt;， &lt;strong&gt;用好&lt;/strong&gt; 数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-best/pg-is-best-17.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，限于篇幅，云数据库与后云时代的数据库未来，就是下一篇文章要介绍的故事了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 为什么PostgreSQL前途无量？</title>
      <link>/zh/blog/pg/pg-is-great/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-is-great/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-is-great/featured_hua13bcd8b195c6b2511b2eb3f83018d53_272664_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;最近做的事儿都围绕着PostgreSQL生态，因为我一直觉得这是一个前途无量的方向。&lt;/p&gt;
&lt;p&gt;为什么这么说？因为数据库是信息系统的核心组件，关系型数据库是数据库中的绝对主力，而PostgreSQL是世界上最先进的开源关系型数据库。占据天时地利，何愁大业不成？&lt;/p&gt;
&lt;p&gt;做一件事最重要的就是认清形势，时来天地皆同力，运去英雄不自由。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;天下大势&#34;&gt;天下大势&lt;/h2&gt;
&lt;p&gt;今天下三分，然Oracle ｜ MySQL ｜ SQL Server 疲敝，日薄西山。PostgreSQL紧随其后，如日中天。前四的数据库中，前三者都在走下坡路，唯有PG增长势头不减，此消彼长，前途无量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-1.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://db-engines.com/en/ranking_trend&#34;&gt;DB-Engine 数据库流行度趋势&lt;/a&gt; （注意这是&lt;strong&gt;对数&lt;/strong&gt;坐标系）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在唯二两个头部开源关系型数据库 MySQL &amp;amp; PgSQL 中，MySQL (2nd) 虽占上风，但其生态位却在逐渐被PostgreSQL (4th) 和非关系型的文档数据库MongoDB (5th) 抢占。按照现在的势头，几年后PostgreSQL的流行度即将跻身前三，与Oracle、MySQL分庭抗礼。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;竞争关系&#34;&gt;竞争关系&lt;/h2&gt;
&lt;p&gt;关系型数据库的生态位高度重叠，其关系可以视作零和博弈。与PostgreSQL形成直接竞争关系的，就是&lt;strong&gt;Oracle&lt;/strong&gt;与&lt;strong&gt;MySQL&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Oracle流行度位居第一，是老牌商业数据库，有着深厚的历史技术积淀，功能丰富，支持完善。稳坐数据库头把交椅，广受不差钱的企业组织喜爱。但Oracle费用昂贵，且以讼棍行径成为知名的业界毒瘤。排名第三的SQL Server属于相对独立的微软生态，性质上与Oracle类似，都属于商业数据库。商业数据库整体受开源数据库冲击，流行度处于缓慢衰减的状态。&lt;/p&gt;
&lt;p&gt;MySQL流行度位居第二，但树大招风，处于前有狼后有虎，上有野爹下有逆子的不利境地：在严谨的事务处理和数据分析上，MySQL被同为开源关系型数据库的PgSQL甩开几条街；而在糙猛快的敏捷方法论上，MySQL又不如新兴NoSQL。同时，MySQL上有养父Oracle的压制，中有MariaDB分家，下有诸如TiDB，OB之类的兼容性新数据库分羹，因而也止步不前。&lt;/p&gt;
&lt;p&gt;唯有PostgreSQL迎头赶上，保持着近乎指数增长的势头。如果说几年前PG的势还是Potential，那么现在Potential已经开始兑现为Impact，开始对竞品构成强力挑战。&lt;/p&gt;
&lt;p&gt;而在这场你死我活的斗争中，PostgreSQL占据了三个“&lt;strong&gt;势&lt;/strong&gt;”：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开源软件普及发展，蚕食商业软件市场&lt;/p&gt;
&lt;p&gt;在去IOE与开源浪潮的大背景下，凭借开源生态对商业软件（Oracle）形成压制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;满足用户日益增长的数据处理功能需求&lt;/p&gt;
&lt;p&gt;凭借地理空间数据的事实标准PostGIS处理立于不败之地，凭借对标Oracle的极为丰富的功能，对MySQL形成技术压制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;市场份额均值回归的势&lt;/p&gt;
&lt;p&gt;国内PG市场份额因历史原因，远低于世界平均水平，本身蕴含着巨大势能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Oracle作为老牌商业软件，&lt;strong&gt;才&lt;/strong&gt;毋庸质疑，同时作为业界毒瘤，“&lt;strong&gt;德&lt;/strong&gt;”也不必多说，故曰：“&lt;strong&gt;有才无德&lt;/strong&gt;”。MySQL有开源之功德，但它一来采用了GPL协议，比起使用无私宽松BSD协议的PgSQL还是差不少意思，二来认贼作父，被Oracle收购，三来才疏学浅，功能简陋，故曰“&lt;strong&gt;才浅德薄&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;德不配位，必有灾殃。唯有PostgreSQL，既占据了开源崛起之天时，又把握住功能强劲之地利，还有着宽松BSD协议之人和。正所谓：藏器于身，因时而动。不鸣则已，一鸣惊人。德才兼备，攻守之势易矣！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;德才兼备&#34;&gt;德才兼备&lt;/h2&gt;
&lt;h3 id=&#34;postgresql的德&#34;&gt;PostgreSQL的德&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PG的“德”在于开源&lt;/strong&gt;。什么叫“德”，合乎于“道”的表现就是德。而这条“道”就是&lt;strong&gt;开源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;PG本身就是祖师爷级开源软件，是开源世界中的一颗明珠，是全世界开发者群策群力的成功典范。而且更重要的是它采用无私的BSD协议：除了打着PG的名号招摇撞骗外，基本可以说是百无禁忌：比如换皮改造为国产数据库出售。PG可谓无数数据库厂商们的衣食父母。子孙满堂，活人无数，功德无量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-3.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库谱系图，若列出所有PgSQL衍生版，估计可以撑爆这张图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;postgresql的才&#34;&gt;PostgreSQL的才&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PG的“才”在于一专多长&lt;/strong&gt;。PostgreSQL是一专多长的全栈数据库，天生就是HTAP，超融合数据库，一个打十个。基本单一组件便足以覆盖中小型企业绝大多数的数据库需求：OLTP，OLAP，时序数据库，空间GIS，全文检索，JSON/XML，图数据库，缓存，等等等等。&lt;/p&gt;
&lt;p&gt;PostgreSQL在一个很可观的规模内都可以独立扮演多面手的角色，一个组件当多种组件使。&lt;strong&gt;而单一数据组件选型可以极大地削减项目额外复杂度，这意味着能节省很多成本。它让十个人才能搞定的事，变成一个人就能搞定的事。&lt;/strong&gt; 如果真有那么一样技术可以满足你所有的需求，那么使用该技术就是最佳选择，而不是试图用多个组件来重新实现它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考阅读：&lt;a href=&#34;/zh/blog//db/pg-is-good/&#34;&gt;&lt;strong&gt;PG好处都有啥&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;开源之德&#34;&gt;开源之德&lt;/h2&gt;
&lt;p&gt;开源是有大功&lt;strong&gt;德&lt;/strong&gt;的。互联网的历史就是开源软件的历史，IT行业之所以有今天的繁荣，人们能享受到如此多的免费信息服务，核心原因之一就是开源软件。开源是一种真正成功的，由开发者构成的communism（译成&lt;strong&gt;社区主义&lt;/strong&gt;会更贴切）：软件这种IT业的核心生产资料变为全世界开发者公有，人人为我，我为人人。&lt;/p&gt;
&lt;p&gt;一个开源程序员干活时，其劳动背后其实可能蕴含有数以万计的顶尖开发者的智慧结晶。互联网程序员贵，因为从效果上来讲，其实程序员不是一个工人，而是一个指挥软件和机器来干活的包工头。	程序员自己就是核心生产资料，服务器很容易取得（相比其他行业的科研设备与实验环境），软件来自公有社区，一个或几个高级的软件工程师可以很轻松的利用&lt;strong&gt;开源生态&lt;/strong&gt;快速解决领域问题。&lt;/p&gt;
&lt;p&gt;通过开源，所有社区开发者形成合力，极大降低了重复造轮子的内耗。使得整个行业的技术水平以匪夷所思的速度向前迈进。开源的势头就像滚雪球，时至今日已经势不可挡。基本上除了一些特殊场景和路径依赖，软件开发中闭门造车搞自力更生几乎成了一个大笑话。&lt;/p&gt;
&lt;p&gt;所以说，搞数据库也好，做软件也罢，&lt;strong&gt;要搞技术就要搞开源的技术&lt;/strong&gt;，闭源的东西生命力太弱，没意思。开源之德，也是PgSQL与MySQL对Oracle的最大底气所在。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生态之争&#34;&gt;生态之争&lt;/h2&gt;
&lt;p&gt;开源的核心就在于&lt;strong&gt;生态（ECO）&lt;/strong&gt;，每一个开源技术都有自己的小生态。所谓生态就是各种主体及其环境通过密集相互作用构成的一个系统，而开源软件的生态模式大致可以描述为由以下三个步骤组成的正反馈循环：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源软件开发者给开源软件做贡献&lt;/li&gt;
&lt;li&gt;开源软件本身免费，吸引更多用户&lt;/li&gt;
&lt;li&gt;用户使用开源软件，产生需求，创造更多开源软件相关岗位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开源生态的繁荣有赖于这个闭环，而生态系统的规模（用户/开发者数量）与复杂度（用户/开发者质量）直接决定了这个软件的生命力，所以每一个开源软件都有天命去扩大自己的规模。而软件的规模通常取决于软件所占据的&lt;strong&gt;生态位&lt;/strong&gt;，如果不同的软件的生态位重叠，就会发生竞争。在开源关系型数据库的生态位中，PgSQL与MySQL就是最直接的竞争者。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;流行-vs-先进&#34;&gt;流行 vs 先进&lt;/h2&gt;
&lt;p&gt;MySQL的口号是“&lt;strong&gt;世界上最流行的开源关系型数据库&lt;/strong&gt;”，而PostgreSQL的Slogan则是“&lt;strong&gt;世界上最先进的开源关系型数据库&lt;/strong&gt;”，一看这就是一对老冤家了。这两个口号很好的反映出了两种产品的特质：PostgreSQL是功能丰富，一致性优先，高大上的严谨的学院派数据库；MySQL是功能粗陋，可用性优先，糙猛快的“工程派”数据库。&lt;/p&gt;
&lt;p&gt;MySQL的主要用户群体集中在互联网公司，互联网公司的典型特点是什么？追逐潮流&lt;strong&gt;糙猛快&lt;/strong&gt;，&lt;strong&gt;糙&lt;/strong&gt;说的是互联网公司业务场景简单（CRUD居多）；数据重要性不高，不像传统行业（例如银行）那样在意数据的一致性（正确性）；可用性优先（相比停服务更能容忍数据丢乱错，而一些传统行业宁可停止服务也不能让账目出错）。 &lt;strong&gt;猛&lt;/strong&gt;说的则是互联网行业数据量大，它们需要的就是水泥槽罐车，而不是高铁和载人飞船。 &lt;strong&gt;快&lt;/strong&gt;说的则是互联网行业需求变化多端，出活周期短，要求响应时间快，大量需求的就是开箱即用的软件全家桶（如LAMP）和简单培训一下就能干活的CRUD Boy。于是糙猛快的互联网公司和糙猛快的MySQL一拍即合。&lt;/p&gt;
&lt;p&gt;而PgSQL的用户则更偏向于传统行业，&lt;strong&gt;传统行业之所以称为传统行业，就是因为它们已经走过了野蛮生长的阶段&lt;/strong&gt;，有着成熟的业务模型与深厚的底蕴积淀。它们需要的是正确的结果，稳定的表现，丰富的功能，对数据进行&lt;strong&gt;分析加工提炼&lt;/strong&gt;的能力。所以在传统行业中，往往是Oracle、SQL Server、PostgreSQL的天下。特别是在地理相关的场景中更是有着不可替代的地位。与此同时，不少互联网公司的业务也开始成熟沉淀，已经一只脚迈入“传统行业”了，越来越多的互联网公司脱离了糙猛快的低级循环，将目光投向PostgreSQL 。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;谁更正确&#34;&gt;谁更正确？&lt;/h2&gt;
&lt;p&gt;最了解一个人的的往往是他的竞争对手，PostgreSQL与MySQL的口号都很精准地戳中了对手的痛点。PgSQL“最先进”的潜台词就是MySQL太落后，而MySQL”最流行“就是说PgSQL不流行。用户少但先进，用户多但落后。哪一个更”好“？这种价值判断的问题不好回答。&lt;/p&gt;
&lt;p&gt;但我认为时间站在 &lt;strong&gt;先进&lt;/strong&gt; 技术的一边：因为先进与落后是技术的核心度量，是因，而流行与否则是果；流行不流行是内因（技术是否先进）和外因（历史路径依赖）共同对时间积分的&lt;strong&gt;结果&lt;/strong&gt;。当下的因会反映为未来的果：流行的东西因为落后而过气，而先进的东西会因为先进变得流行。&lt;/p&gt;
&lt;p&gt;虽然很多流行的东西都是垃圾，但流行并不一定代表着落后。如果只是缺少一些功能，MySQL还不至于被称为“落后”。问题在于MySQL已经糙到连&lt;strong&gt;事务&lt;/strong&gt;这种关系型数据库的基本功能都有缺陷，那就不是落后不落后能概括的问题，而是合格不合格的问题了。&lt;/p&gt;
&lt;h3 id=&#34;acid&#34;&gt;ACID&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一些作者声称，支持通用的两阶段提交代价太大，会带来性能与可用性的问题。让程序员来处理过度使用事务导致的性能问题，总比缺少事务编程好得多。
——James Corbett等，Spanner：Google的全球分布式数据库（2012）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我看来， MySQL的哲学可以称之为：“好死不如赖活着”，以及，“我死后哪管洪水滔天”。 其“可用性”体现在各种“容错”上，例如允许呆瓜程序员写出的错误的SQL查询也能跑起来。最离谱的例子就是MySQL竟然允许&lt;strong&gt;部分成功&lt;/strong&gt;的事务提交，这就违背了关系型数据库的基本约束：&lt;strong&gt;原子性与数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-5.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图：MySQL竟然允许部分成功的事务提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里在一个事务中插入了两条记录，第一条成功，第二条因为约束失败。根据事务的原子性，整个事务要么整个成功，要么整个失败（最终一条都没有插入）。结果MySQL的默认表现竟然是允许部分成功的事务提交，也就是事务没有&lt;strong&gt;原子性&lt;/strong&gt;，&lt;strong&gt;没有原子性就没有一致性&lt;/strong&gt;，如果这个事务是一笔转账（先扣再加），因为某些原因失败，那这里的帐就做不平了。这种数据库如果用来记账恐怕是一笔糊涂账，所以说什么“金融级MySQL”恐怕就是一个笑话。&lt;/p&gt;
&lt;p&gt;当然，滑稽的是还有一些MySQL用户将其称为“&lt;strong&gt;特性&lt;/strong&gt;”，说这体现了MySQL的容错性。实际上，此类“特殊容错”需求在SQL标准中完全可以通过SAVEPOINT机制实现。PgSQL对此的实现就堪称典范，psql客户端允许通过&lt;code&gt;ON_ERROR_ROLLBACK&lt;/code&gt;选项，隐式地在每条语句后创建&lt;code&gt;SAVEPOINT&lt;/code&gt;，并在语句失败后自动&lt;code&gt;ROLLBACK TO SAVEPOINT&lt;/code&gt;，以标准SQL的方式，以客户端可选项的形式，在不破坏事物ACID的情况下，同样实现这种看上去便利实则&lt;strong&gt;苟且&lt;/strong&gt;的功能。相比之下，MySQL的这种所谓“特性”是以直接在服务端默认牺牲事务ACID为代价的（这意味着用户使用JDBC，psycopg等应用驱动也照样受此影响）。&lt;/p&gt;
&lt;p&gt;如果是互联网业务，注册个新用户丢个头像、丢个评论可能不是什么大事。数据那么多，丢几条，错几条又算个什么？别说是数据，业务本身很可能都处于朝不保夕的状态，所以糙又如何？万一成功了，前人拉的屎反正也是后人来擦。所以一些互联网公司通常并不在乎这些。&lt;/p&gt;
&lt;p&gt;PostgreSQL所谓“严格的约束与语法“可能对新人来说“不近人情”，例如，一批数据中如果有几条脏数据，MySQL可能会照单全收，而PG则会严格拒绝。尽管苟且妥协看上去很省事，但在其他地方卖下了雷：因为逻辑炸弹深夜加班排查擦屁股的工程师，和不得不天天清洗脏数据的数据分析师肯定对此有很大怨念。从长期看，要想成功，&lt;strong&gt;做正确的事&lt;/strong&gt;最重要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个成功的技术，现实的优先级必须高于公关，你可以糊弄别人，但糊弄不了自然规律。&lt;/p&gt;
&lt;p&gt;——罗杰斯委员会报告（1986）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL的流行度并没有和PgSQL相差太远，然而其功能比起PostgreSQL和Oracle却是差距不小。Oracle与PostgreSQL算诞生于同一时期，再怎么斗，立场与阵营不同，也有点惺惺相惜的老对手的意思：都是扎实修炼了半个世纪内功，厚积薄发的老法师。而MySQL就像心浮气躁耍刀弄枪的二十来岁毛头小伙子，凭着一把蛮力，借着互联网野蛮生长的黄金二十年趁势而起，占山为王。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;时代所赋予的红利，也会随时代过去而退潮。在这个变革的时代中，没有先进的功能打底，“流行”也恐怕也难以长久。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;发展前景&#34;&gt;发展前景&lt;/h2&gt;
&lt;p&gt;从个人&lt;strong&gt;职业发展&lt;/strong&gt;前景的角度看，很多数程序员学习一门技术的原因都是为了提高自己的技术竞争力（从而更好占坑赚钱）。PostgreSQL是各种关系型数据库中性价比最高的选择：它不仅可以用来做传统的CRUD OLTP业务，&lt;strong&gt;数据分析&lt;/strong&gt;更是它的拿手好戏。各种特色功能更是提供了切入多种行业以的契机：基于PostGIS的地理时空数据处理分析，基于Timescale的时序金融物联网数据处理分析，基于Pipeline存储过程触发器的流式处理，基于倒排索引全文检索的搜索引擎，FDW对接统一各式各样的外部数据源。可以说，它是真正一专多长的全栈数据库，用它可以实现的功能要比单纯的OLTP数据库要丰富得多，更是为CRUD码农提供了转型和深入的进阶道路。&lt;/p&gt;
&lt;p&gt;从&lt;strong&gt;企业用户&lt;/strong&gt;的角度来看，PostgreSQL在一个很可观的规模内都可以独立扮演多面手的角色，一个组件当多种组件使。&lt;strong&gt;而单一数据组件选型可以极大地削减项目额外复杂度，这意味着能节省很多成本。它让十个人才能搞定的事，变成一个人就能搞定的事。&lt;/strong&gt; 当然这不是说PG要一个打十个把其他数据库的饭碗都掀翻，专业组件在专业领域的实力是毋庸置疑的。但切莫忘记，&lt;strong&gt;为了不需要的规模而设计是白费功夫&lt;/strong&gt;，实际上这属于过早优化的一种形式。如果真有那么一样技术可以满足你所有的需求，那么使用该技术就是最佳选择，而不是试图用多个组件来重新实现它。&lt;/p&gt;
&lt;p&gt;以探探为例，在250WTPS与200TB数据的量级下，&lt;strong&gt;单一PostgreSQL选型&lt;/strong&gt;依然能稳如狗地支撑业务。能在很可观的规模内做到一专多长，除了本职的OLTP，Pg还在相当长的时间里兼任了缓存，OLAP，批处理，甚至消息队列的角色。当然神龟虽寿，犹有竟时。最终这些兼职功能还是要逐渐&lt;strong&gt;分拆&lt;/strong&gt;出去由专用组件负责，但那已经是近千万日活时的事了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-7.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;从&lt;strong&gt;商业生态&lt;/strong&gt;的角度看，PostgreSQL也有巨大的优势。一来PG&lt;strong&gt;技术先进&lt;/strong&gt;，可称为 “开源版Oracle”。原生的PG基本可以对Oracle的功能做到八九成兼容，EDB更是有96% Oracle兼容的专业PG发行版。因此在抢占去O腾退出的市场中，PostgreSQL及其衍生版本的技术优势是压倒性的。二来PG协议友善，采用了宽松的BSD协议。因此各种数据库厂商，云厂商出品的“自研数据库”，以及很多“云数据库”大体都是基于PgSQL改造的。例如最近HW基于PostgreSQL搞openGaussDB就是一个很明智的选择。不要误会，PG的协议确实允许这样做，而且这样做也确实让PostgreSQL的生态更加繁荣壮大。卖PostgreSQL衍生版是一个很成熟的市场：传统企业不差钱且愿意为此付费买单。开源天才之火有商业利益之油浇灌，因而源源不断地释放出旺盛的生命力。&lt;/p&gt;
&lt;h3 id=&#34;vs-mysql&#34;&gt;vs MySQL&lt;/h3&gt;
&lt;p&gt;作为老对手，MySQL的处境就有些尴尬了。&lt;/p&gt;
&lt;p&gt;从个人职业发展上来看，学MySQL主要就是干CRUD。学好增删改查成为一个合格的码农是没问题的，然而谁又愿意一直“数据矿工”的活呢？数据分析才是数据产业链上的暴利肥差。以MySQL孱弱的分析能力，很难支持CURD程序员升级转型发展。此外，PostgreSQL的市场需求摆在那里，但现在却面临供不应求的状况（以至于现在大量良莠不齐的PG培训机构如雨后春笋般冒了出来），MySQL的人确实比PgSQL的人好招，这是不假的。但反过来说MySQL界的内卷程度也要大的多，供不应求方才体现稀缺性，人太多了技能也就贬值了。&lt;/p&gt;
&lt;p&gt;从企业用户的角度来看，MySQL就是专用于OLTP的单一功能组件，往往需要ES, Redis, Mongo等其他等等一起配合才能满足完整的数据存储需求，而PG基本就不会有这个问题。此外，MySQL和PgSQL都是开源数据库，都“免费”。免费的Oracle和免费的MySQL用户会选择哪个呢？&lt;/p&gt;
&lt;p&gt;从商业生态来看，MySQL面临的最大问题是 &lt;strong&gt;叫好不叫座&lt;/strong&gt;。叫好当然是因为越流行则声音越大，尤其主要的用户互联网企业本身就占据话语权高地。&lt;strong&gt;不叫座&lt;/strong&gt;当然也是因为互联网公司本身对于这类软件付费的意愿是极弱的：怎么算都是养几个MySQL DBA直接用开源的更合算。此外，因为MySQL的GPL协议要求衍生软件也要开源，软件厂商基于MySQL研发的动机也不强，基本都是采用 兼容“MySQL” 协议来分MySQL的市场蛋糕，而不是基于MySQL的代码进行开发与回馈，让人对其生态健康程度产生怀疑。&lt;/p&gt;
&lt;p&gt;当然MySQL最大的问题就在于：它的&lt;strong&gt;生态位&lt;/strong&gt;越来越狭窄。论严谨的事务处理与数据分析，PostgreSQL甩开它几条街；论糙猛快，快速出原型，NoSQL全家桶又要比MySQL方便太多。论商业发财，上面有Oracle干爹压着；论开源生态，又不断出现MySQL兼容的新生代产品来尝试替代主体。可以说MySQL处在一种吃老本的位置上，只是凭籍历史积分存量维持着现状的地位。时间是否会站在MySQL这一边，我们拭目以待。&lt;/p&gt;
&lt;h3 id=&#34;vs-newsql&#34;&gt;vs NewSQL&lt;/h3&gt;
&lt;p&gt;最近市场上当然也有一些很亮眼的NewSQL产品，例如TiDB，Cockroachdb，Yugabytedb等等。何如？我认为它们都是很好的产品，有一些不错的技术亮点，都是对开源技术的贡献。但是它们可能同样面临&lt;strong&gt;叫好不叫座&lt;/strong&gt;的困局。&lt;/p&gt;
&lt;p&gt;NewSQL的大体特征是：主打“&lt;strong&gt;分布式&lt;/strong&gt;”的概念，通过“分布式”解决&lt;strong&gt;水平扩展性&lt;/strong&gt;与&lt;strong&gt;容灾高可用&lt;/strong&gt;两个问题，并因分布式的内在局限性会牺牲许多&lt;strong&gt;功能&lt;/strong&gt;，只能提供较为简单有限的查询支持。分布式数据库在高可用容灾方面与传统主从复制并没有质的区别，因此其特征主要可以概括为“&lt;strong&gt;以量换质&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;然而对很多企业而言，牺牲功能换取&lt;strong&gt;扩展性&lt;/strong&gt;很可能是一个&lt;strong&gt;伪需求&lt;/strong&gt;或&lt;strong&gt;弱需求&lt;/strong&gt;。在我接触过的为数不少的用户中，绝大多数场景下的的数据量和负载水平完全落在单机Postgres的处理范围内（目前弄过的记录是单库15TB，单集群40万TPS）。从数据量上来讲，绝大多数企业终其生命周期的数据量也超不过这个瓶颈；至于性能就更不重要了，过早优化是万恶之源，很多企业的DB性能余量足够让他们把所有业务逻辑用存储过程编写然后高高兴兴的跑在数据库里。&lt;/p&gt;
&lt;p&gt;NewSQL的祖师爷Google Spanner就是为了解决海量数据扩展性的问题，但又有多少企业能有Google的业务数据量？恐怕还是只有典型的互联网公司，或者某些大企业的部分业务会有这种量级的数据存储需求。所以和MySQL一样，NewSQL的问题就回到了&lt;strong&gt;谁来买单&lt;/strong&gt;这个根本问题上。恐怕到最后只能还是由投资人和国资委来买吧。&lt;/p&gt;
&lt;p&gt;但最起码，NewSQL的这种尝试始终是值得赞扬的。&lt;/p&gt;
&lt;h3 id=&#34;vs-云数据库&#34;&gt;vs 云数据库&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;我想直率地说：多年来，我们就像个傻子一样，他们拿着我们开发的东西大赚了一笔&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;—— Ofer Bengal ， Redis Labs 首席执行官&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个值得关注的“竞争者”是所谓云数据库，包括两种，一种是放在云上托管的开源数据库。例如 RDS for PostgreSQL，另一种是自研的新一代云数据库。&lt;/p&gt;
&lt;p&gt;针对前者，主要的问题是“&lt;strong&gt;云厂商吸血&lt;/strong&gt;”。如果云厂商&lt;strong&gt;售卖&lt;/strong&gt;开源软件，实际上会导致就会导致开源软件的相关岗位和利润向云厂商集中，而云厂商是否允许自己的程序员给开源项目做贡献，做多少贡献，其实是很难说的。负责人的大厂通常是会回馈社区，回馈生态的，但这取决于它们的自觉。开源软件还是应当将命运握在自己手中，防止云厂商过分做大形成垄断。相比少量垄断巨头，多数分散的小团体能提供更高的生态多样性，更有利于生态健康发展。&lt;/p&gt;
&lt;p&gt;Gartner称2022年75%的数据库将部署至云平台，这个牛逼吹的太大了。（但也有圆的办法，毕竟用一台机器就可以轻松创建几亿个sqlite文件数据库，这算不算？）。因为云计算解决不了一个根本性的问题 —— 信任。实际上在商业活动中，技术牛逼不牛逼是很次要的因素，Trust才是最关键的。数据是很多企业的生命线，云厂商又不是真正的中立第三方，谁能保证数据不会被其偷窥，盗窃，泄漏，甚至直接被卡脖子关停（如各路云厂商锤Parler）？TDE之类的透明加密解决方案也属于鸡肋，充分的恶心了自己，但也防不住真正的有心人。也许要等真正实用的高效全同态加密技术成熟才能解决信任与安全这个问题吧。&lt;/p&gt;
&lt;p&gt;另一个根本性的问题在于&lt;strong&gt;成本&lt;/strong&gt;：就目前云厂商的定价策略，云数据库只有在小微规模下有优势。例如一台D740 64核|400G内存|3TB PCI-E SSD的高配机型四年综合成本撑死了十几万块。然而我能找到最大的规格RDS（比这差很多，32核|128GB）一年的价格就这个数了。只要数据量节点数稍微上那么点规模，雇个DBA自建就合算太多了。&lt;/p&gt;
&lt;p&gt;云数据库的主要优势还是在于&lt;strong&gt;管控&lt;/strong&gt;，说白了就是用起来方便，点点鼠标。日常运维功能已经覆盖的比较全面，也有一些基础的监控支持。总之下限是摆在那里，如果找不到靠谱的数据库人才，用云数据库起码不至于出太多幺蛾子。 不过这些管控软件虽好，基本都是闭源的，而且与供应商深度绑定。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想找一个&lt;strong&gt;开源&lt;/strong&gt;的PostgreSQL监控管控一条龙解决方案，不妨试试Pigsty。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后一种云数据库以AWS Aurora为代表，也包括一系列类似产品如阿里云PolarDB，腾讯云CynosDB。基本都是采用PostgreSQL与MySQL作为Base和协议层，基于云基础设施（共享存储，S3，RDMA）进行定制化，对&lt;strong&gt;扩容速度&lt;/strong&gt;与&lt;strong&gt;性能&lt;/strong&gt;进行了优化。这类产品在技术上肯定是有新颖性和创造性的。但灵魂问题就是，这类产品相比直接使用原生PostgreSQL的收益到底在哪里呢？能看到立竿见影的好处就是集群扩容会快很多（从几小时级到5分钟），不过相比高昂的费用与供应商锁定的问题，实在是挠不到痛点和痒点。&lt;/p&gt;
&lt;p&gt;总的来说，云数据库对原生PostgreSQL 构成的威胁是有限的。也不用太担心云厂商的问题，云厂商总的来说还开源软件生态的一份子，对社区和生态是有贡献的。赚钱嘛，不磕碜，大家都有钱赚了，才有余力去搞公益，对不对？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;弃暗投明&#34;&gt;弃暗投明？&lt;/h2&gt;
&lt;p&gt;通常来说，Oracle的程序员转PostgreSQL不会有什么包袱，因为两者功能类似，大多数经验都是通用的。实际上，很多PostgreSQL生态的成员都是从Oracle阵营转投PG的。例如国内著名的Oracle服务商云和恩墨（由中国第一位Oracle ACE总监盖国强创办），去年就公开宣布“躬身入局”，拥抱PostgreSQL。&lt;/p&gt;
&lt;p&gt;也有不少MySQL阵营转投PgSQL的，其实这类用户对两者的区别感受才是最深的：基本上都是一副相见恨晚，弃暗投明的样子。实际上我自己最开始也是先用MySQL😆，能自己选型后就拥抱了PgSQL。不过有些老程序员已经和MySQL形成了深度利益绑定，嚷嚷着MySQL多好多好，还要不忘来碰瓷喷一喷PgSQL（特指某人）。这个其实是可以理解的，触动利益比触动灵魂还难，看到自己擅长的技术日落西山那肯定是愤懑不平😠。毕竟一把年纪投在MySQL上，PostgreSQL🐘再好，让我抛弃我心爱的小海豚🐬，做不到啊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-great/pg-is-great-8.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过，刚入行的年轻人还是有机会去选择一条更光明的道路的。时间是最公平的裁判，而新生代的选择则是最有代表性的标杆。据我个人观察，在新兴的极有活力的Golang开发者群体中，PostgreSQL的流行程度要显著高于MySQL，不少创业型、创新型的公司现在都选择Go+Pg作为自己的技术栈，例如Instagram，TanTan，Apple都是Go+PG。&lt;/p&gt;
&lt;p&gt;我认为这一现象的主要原因就是新生代开发者的崛起，Go之于Java，就像PgSQL之于MySQL。长江后浪推前浪，这其实就是演化的核心机制 —— 新陈代谢。Go和PgSQL慢慢拍扁Java和MySQL，但Go和PgSQL当然也有可能在以后被诸如Rust和某些真正革命性的NewSQL数据库拍扁。但说到底，搞技术还是要搞那些前景光明的，不要去搞那些日暮西山的。（当然下海太早当烈士也不合适）。要去看新生代开发者在用什么，有活力的创业公司、新项目、新团队在用什么，弄这些是没有错的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pg的问题&#34;&gt;PG的问题&lt;/h2&gt;
&lt;p&gt;当然PgSQL有没有自己的问题？当然也有  —— &lt;strong&gt;流行度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;流行度关乎着着用户规模，信任水平，成熟案例数量，有效需求反馈量，开发者数量等等。尽管按目前的流行度发展趋势，PG将在几年后超过MySQL，所以从长期来看，我觉得这并不是问题。但作为PostgreSQL社区的一员，我觉得很有必要去进一步做一些事情，Secure this success，并加快这一进度。而要想让一样技术更加流行，效果最好的方式就是：&lt;strong&gt;降低门槛&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，我做了一个开源软件Pigsty，要把PostgreSQL部署、监控、管理、使用的门槛从天花板砸到地板，它有三个核心目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做最顶尖最专业的开源PostgreSQL 监控系统（类tidashboard）&lt;/li&gt;
&lt;li&gt;做门槛最低最好用的开源PostgreSQL管控方案（类tiup）&lt;/li&gt;
&lt;li&gt;做开箱即用的与数据分析&amp;amp;可视化集成开发环境（类minikube）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然这里细节限于篇幅就不展开了，详情留待下篇分说。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PostgreSQL好处都有啥</title>
      <link>/zh/blog/pg/pg-is-good/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pg-is-good/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pg-is-good/featured_hua173252495d0af931377b8def4c1c3f6_365945_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;PostgreSQL的Slogan是“&lt;strong&gt;世界上最先进的开源关系型数据库&lt;/strong&gt;”，但我觉得这口号不够响亮，而且一看就是在怼MySQL那个“&lt;strong&gt;世界上最流行的开源关系型数据库&lt;/strong&gt;”的口号，有碰瓷之嫌。要我说最能生动体现PG特色的口号应该是：&lt;strong&gt;一专多长的全栈数据库&lt;/strong&gt;，一招鲜吃遍天嘛。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pggood&#34; src=&#34;/zh/blog/pg/pg-is-good/pg-is-good-1.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;全栈数据库&#34;&gt;全栈数据库&lt;/h3&gt;
&lt;p&gt;成熟的应用可能会用到许许多多的数据组件（功能）：缓存，OLTP，OLAP/批处理/数据仓库，流处理/消息队列，搜索索引，NoSQL/文档数据库，地理数据库，空间数据库，时序数据库，图数据库。传统的架构选型呢，可能会组合使用多种组件，典型的如：Redis + MySQL + Greenplum/Hadoop + Kafuka/Flink + ElasticSearch，一套组合拳基本能应付大多数需求了。不过比较令人头大的就是异构系统集成了：大量的代码都是重复繁琐的胶水代码，干着把数据从A组件搬运到B组件的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pg-is-good/pg-is-good-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，MySQL就只能扮演OLTP关系型数据库的角色，但如果是PostgreSQL，就可以身兼多职，One handle them all，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt;：事务处理是PostgreSQL的本行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OLAP&lt;/strong&gt;：citus分布式插件，ANSI SQL兼容，窗口函数，CTE，CUBE等高级分析功能，任意语言写UDF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流处理&lt;/strong&gt;：PipelineDB扩展，Notify-Listen，物化视图，规则系统，灵活的存储过程与函数编写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时序数据&lt;/strong&gt;：timescaledb时序数据库插件，分区表，BRIN索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空间数据&lt;/strong&gt;：PostGIS扩展（杀手锏），内建的几何类型支持，GiST索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;搜索索引&lt;/strong&gt;：全文搜索索引足以应对简单场景；丰富的索引类型，支持函数索引，条件索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NoSQL&lt;/strong&gt;：JSON，JSONB，XML，HStore原生支持，至NoSQL数据库的外部数据包装器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据仓库&lt;/strong&gt;：能平滑迁移至同属Pg生态的GreenPlum，DeepGreen，HAWK等，使用FDW进行ETL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图数据&lt;/strong&gt;：递归查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;：物化视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;ext&#34; src=&#34;/zh/blog/pg/pg-is-good/pg-is-good-3.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以Extension作六器，礼天地四方。&lt;/p&gt;
&lt;p&gt;以Greenplum礼天，&lt;/p&gt;
&lt;p&gt;以Postgres-XL礼地，&lt;/p&gt;
&lt;p&gt;以Citus礼东方，&lt;/p&gt;
&lt;p&gt;以TimescaleDB礼南方，&lt;/p&gt;
&lt;p&gt;以PipelineDB礼西方，&lt;/p&gt;
&lt;p&gt;以PostGIS礼北方。&lt;/p&gt;
&lt;p&gt;—— 《周礼.PG》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在探探的旧版架构中，整个系统就是围绕PostgreSQL设计的。几百万日活，几百万全局DB-TPS，几百TB数据的规模下，数据组件只用了PostgreSQL。独立的数仓，消息队列和缓存都是后来才引入的。而且这只是验证过的规模量级，进一步压榨PG是完全可行的。&lt;/p&gt;
&lt;p&gt;因此，在一个很可观的规模内，PostgreSQL都可以扮演多面手的角色，一个组件当多种组件使。&lt;strong&gt;虽然在某些领域它可能比不上专用组件&lt;/strong&gt;，至少都做的都还不赖。&lt;strong&gt;而单一数据组件选型可以极大地削减项目额外复杂度，这意味着能节省很多成本。它让十个人才能搞定的事，变成一个人就能搞定的事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了不需要的规模而设计是白费功夫，实际上这属于过早优化的一种形式。只有当没有单个软件能满足你的所有需求时，才会存在&lt;strong&gt;分拆&lt;/strong&gt;与&lt;strong&gt;集成&lt;/strong&gt;的利弊权衡。集成多种异构技术是相当棘手的工作，如果真有那么一样技术可以满足你所有的需求，那么使用该技术就是最佳选择，而不是试图用多个组件来重新实现它。&lt;/p&gt;
&lt;p&gt;当业务规模增长到一定量级时，可能不得不使用基于微服务/总线的架构，将数据库的功能分拆为多个组件。但PostgreSQL的存在极大地推后了这个权衡到来的阈值，而且分拆之后依然能继续发挥重要作用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;运维友好&#34;&gt;运维友好&lt;/h2&gt;
&lt;p&gt;当然除了功能强大之外，Pg的另外一个重要的优势就是&lt;strong&gt;运维友好&lt;/strong&gt;。有很多非常实用的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDL能放入事务中，删表，TRUNCATE，创建函数，索引，都可以放在事务里原子生效，或者回滚。&lt;/p&gt;
&lt;p&gt;这就能进行很多骚操作，比如在一个事务里通过RENAME，完成两张表的王车易位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能够并发地创建、删除索引，添加非空字段，重整索引与表（不锁表）。&lt;/p&gt;
&lt;p&gt;这意味着可以随时在线上不停机进行重大的模式变更，按需对索引进行优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制方式多样：段复制，流复制，触发器复制，逻辑复制，插件复制等等。&lt;/p&gt;
&lt;p&gt;这使得不停服务迁移数据变得相当容易：复制，改读，改写三步走，线上迁移稳如狗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交方式多样：异步提交，同步提交，法定人数同步提交。&lt;/p&gt;
&lt;p&gt;这意味着Pg允许在C和A之间做出权衡与选择，例如交易库使用同步提交，普通库使用异步提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统视图非常完备，做监控系统相当简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FDW的存在让ETL变得无比简单，一行SQL就能解决。&lt;/p&gt;
&lt;p&gt;FDW可以方便地让一个实例访问其他实例的数据或元数据。在跨分区操作，数据库监控指标收集，数据迁移等场景中妙用无穷。同时还可以对接很多异构数据系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生态健康&#34;&gt;生态健康&lt;/h2&gt;
&lt;p&gt;PostgreSQL的生态也很健康，社区相当活跃。&lt;/p&gt;
&lt;p&gt;相比MySQL，PostgreSQL的一个巨大的优势就是协议友好。PG采用类似BSD/MIT的PostgreSQL协议，差不多理解为只要别打着Pg的旗号出去招摇撞骗，随便你怎么搞，换皮出去卖都行。君不见多少国产数据库，或者不少“自研数据库”实际都是Pg的换皮或二次开发产品。&lt;/p&gt;
&lt;p&gt;当然，也有很多衍生产品会回馈主干，比如&lt;code&gt;timescaledb&lt;/code&gt;, &lt;code&gt;pipelinedb&lt;/code&gt;, &lt;code&gt;citus&lt;/code&gt; 这些基于PG的“数据库”，最后都变成了原生PG的插件。很多时候你想实现个什么功能，一搜就能找到对应的插件或实现。开源嘛，还是要讲一些情怀的。&lt;/p&gt;
&lt;p&gt;PG的代码质量相当之高，注释写的非常清晰。C的代码读起来有种Go的感觉，代码都可以当文档看了。能从中学到很多东西。相比之下，其他数据库，比如MongoDB，看一眼我就放弃了读下去的兴趣。&lt;/p&gt;
&lt;p&gt;而MySQL呢，社区版采用的是GPL协议，这其实挺蛋疼的。要不是GPL传染，怎么会有这么多基于MySQL改的数据库开源出来呢？而且MySQL还在乌龟壳的手里，让自己的蛋蛋攥在别人手中可不是什么明智的选择，更何况是业界毒瘤呢？Facebook修改React协议的风波就算是一个前车之鉴了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;当然，要说有什么缺点或者遗憾，那还是有几个的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为使用了MVCC，数据库需要定期VACUUM，需要定期维护表和索引避免性能下降。&lt;/li&gt;
&lt;li&gt;没有很好的开源&lt;strong&gt;集群&lt;/strong&gt;监控方案（或者太丑！），需要自己做。&lt;/li&gt;
&lt;li&gt;慢查询日志和普通日志是混在一起的，需要自己解析处理。&lt;/li&gt;
&lt;li&gt;官方Pg没有很好用的列存储，对数据分析而言算一个小遗憾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然都是些无关痛痒的小毛小病，不过真正的问题可能和技术无关……&lt;/p&gt;
&lt;p&gt;说到底，MySQL确实是&lt;strong&gt;最流行&lt;/strong&gt;的开源关系型数据库，没办法，写Java的，写PHP的，很多人最开始用的都是MySQL…，所以Pg招人相对困难是一个事实，很多时候只能自己培养。不过看DB Engines上的流行度趋势，未来还是很光明的。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dbrank&#34; src=&#34;/zh/blog/pg/pg-is-good/pg-is-good-4.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;学PostgreSQL是一件很有趣的事，它让我意识到数据库的功能远远不止增删改查。我学着SQL Server与MySQL迈进数据库的大门。但却是PostgreSQL真正向我展示了数据库的奇妙世界。&lt;/p&gt;
&lt;p&gt;之所以写本文，是因为在知乎上的老坟又被挖了出来，让笔者回想起当年邂逅PostgreSQL时的青葱岁月。（https://www.zhihu.com/question/20010554/answer/94999834 ）当然，现在我干了专职的PG DBA，忍不住再给这老坟补几铲。“王婆卖瓜，自卖自夸”，夸一夸PG也是应该的。嘿嘿嘿……&lt;/p&gt;
&lt;p&gt;全栈工程师就该用全栈数据库嘛。&lt;/p&gt;
&lt;p&gt;我自己比较选型过MySQL和PostgreSQL，难得地在阿里这种MySQL的世界中有过选择的自由。我认为单从技术因素上来讲，PG是完爆MySQL的。尽管阻力很大，最后还是把PostgreSQL用了起来，推了起来。我用它做过很多项目，解决了很多需求（小到算统计报表，大到给公司创收个小目标）。大多数需求PG单挑就搞定了，少部分也会再用些MQ和NoSQL（Redis，MongoDB，Cassandra/HBase）。Pg实在是让人爱不释手。&lt;/p&gt;
&lt;p&gt;最后实在是对Pg爱不释手，以至于专职去研究PG了。&lt;/p&gt;
&lt;p&gt;在我的第一份工作中就深刻尝到了甜头，使用PostgreSQL，一个人的开发效率能顶一个小团队：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;后端懒得写怎么办，&lt;a href=&#34;https://github.com/graphile/postgraphile&#34;&gt;PostGraphQL&lt;/a&gt;直接从数据库模式定义生成GraphQL API，自动监听DDL变更，生成相应的CRUD方法与存储过程包装，对于后台开发再方便不过，类似的工具还有PostgREST与pgrest。对于中小数据量的应用都还堪用，省了一大半后端开发的活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要用到Redis的功能，直接上Pg，模拟普通功能不在话下，缓存也省了。Pub/Sub使用Notify/Listen/Trigger实现，用来广播配置变更，做一些控制非常方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要做分析，窗口函数，复杂JOIN，CUBE，GROUPING，自定义聚合，自定义语言，爽到飞起。如果觉得规模大了想scale out可以上&lt;a href=&#34;https://www.citusdata.com/&#34;&gt;citus&lt;/a&gt;扩展（或者换greenplum）；比起数仓可能少个列存比较遗憾，但其他该有的都有了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用到地理相关的功能，PostGIS堪称神器，千行代码才能实现的复杂地理需求，&lt;a href=&#34;https://github.com/Vonng/pg/blob/master/app/knn-optimize.md&#34;&gt;一行SQL轻松高效解决&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储时序数据，&lt;a href=&#34;https://www.timescale.com/&#34;&gt;timescaledb&lt;/a&gt;扩展虽然比不上专用时序数据库，但百万记录每秒的入库速率还是有的。用它解决过硬件传感器日志存储，监控系统Metrics存储的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一些流计算的相关功能，可以用&lt;a href=&#34;http://docs.pipelinedb.com/introduction.html&#34;&gt;PipelineDB&lt;/a&gt;直接定义流式视图实现：UV，PV，用户画像实时呈现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL的&lt;a href=&#34;https://wiki.postgresql.org/wiki/Foreign_data_wrappers&#34;&gt;FDW&lt;/a&gt;是一种强大的机制，允许接入各种各样的数据源，以统一的SQL接口访问。它妙用无穷：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_fdw&lt;/code&gt;这种自带的扩展，可以将任意程序的输出接入数据表。最简单的应用就是&lt;a href=&#34;https://github.com/Vonng/pg/blob/master/fdw/file_fdw-intro.md&#34;&gt;监控系统信息&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;管理多个PostgreSQL实例时，可以在一个元数据库中用自带的&lt;code&gt;postgres_fdw&lt;/code&gt;导入所有远程数据库的数据字典。统一访问所有数据库实例的元数据，一行SQL拉取所有数据库的实时指标，监控系统做起来不要太爽。&lt;/li&gt;
&lt;li&gt;之前做过的一件事就是用&lt;a href=&#34;https://github.com/Vonng/hbase_fdw&#34;&gt;hbase_fdw&lt;/a&gt;和MongoFDW，将HBase中的历史批量数据，MongoDB中的当日实时数据包装为PostgreSQL数据表，一个视图就简简单单地实现了融合批处理与流处理的Lambda架构。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;redis_fdw&lt;/code&gt;进行缓存更新推送；使用&lt;code&gt;mongo_fdw&lt;/code&gt;完成从mongo到pg的数据迁移；使用&lt;code&gt;mysql_fdw&lt;/code&gt;读取MySQL数据并存入数仓；实现跨数据库，甚至跨数据组件的JOIN；使用一行SQL就能完成原本多少行代码才能实现的复杂ETL，这是一件多么美妙的事情。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各种丰富的类型与方法支持：例如&lt;a href=&#34;http://www.postgres.cn/docs/9.6/datatype-json.html&#34;&gt;JSON&lt;/a&gt;，从数据库直接生成前端所需的JSON响应，轻松而惬意。范围类型，优雅地解决很多原本需要程序处理的边角情况。其他的例如数组，多维数组，自定义类型，枚举，网络地址，UUID，ISBN。很多开箱即用的数据结构让程序员省去了多少造轮子的功夫。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;丰富的索引类型：通用的Btree索引；大幅优化顺序访问的Brin索引；等值查询的Hash索引；GIN倒排索引；GIST通用搜索树，高效支持地理查询，KNN查询；Bitmap同时利用多个独立索引；Bloom高效过滤索引；能大幅减小索引大小的&lt;strong&gt;条件索引&lt;/strong&gt;；能优雅替代冗余字段的&lt;strong&gt;函数索引&lt;/strong&gt;。而MySQL就只有那么可怜的几种索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稳定可靠，正确高效。MVCC轻松实现快照隔离，MySQL的RR隔离等级实现&lt;a href=&#34;https://github.com/ept/hermitage&#34;&gt;不完善&lt;/a&gt;，无法避免PMP与G-single异常。而且基于锁与回滚段的实现会有各种坑；PostgreSQL通过SSI能实现高性能的可序列化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制强大：WAL段复制，流复制（v9出现，同步、半同步、异步），逻辑复制（v10出现：订阅/发布），触发器复制，第三方复制，各种复制一应俱全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运维友好：可以将DDL放在事务中执行（可回滚），创建索引不锁表，添加新列（不带默认值）不锁表，清理/备份不锁表。各种系统视图，监控功能都很完善。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展众多、功能丰富、可定制程度极强。在PostgreSQL中可以使用任意的语言编写函数：Python，Go，Javascript，Java，Shell等等。与其说Pg是数据库，不如说它是一个开发平台。我就试过很多没什么卵用但很好玩的东西：&lt;strong&gt;数据库里（in-db）&lt;/strong&gt; 的爬虫/ &lt;a href=&#34;https://github.com/Vonng/pg/blob/master/app/recsys-itemcf.md&#34;&gt;推荐系统&lt;/a&gt; / 神经网络 / Web服务器等等。有着各种功能强悍或脑洞清奇的第三方插件：[https://pgxn.org/)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL的License友好，BSD随便玩，君不见多少数据库都是PG的换皮产品。MySQL有GPL传染，还要被Oracle捏着蛋蛋。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
