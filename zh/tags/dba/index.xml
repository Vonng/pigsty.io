<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – DBA</title>
    <link>/zh/tags/dba/</link>
    <description>Recent content in DBA on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 01 Mar 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/dba/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: 驳《再论为什么你不应该招DBA》</title>
      <link>/zh/blog/cloud/no-dba-bullshit/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/no-dba-bullshit/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/no-dba-bullshit/featured_hu153a1c3af7df4b579cf23128ba8cc4b8_139490_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;郭德纲有一段相声：比如我和火箭专家说，你那火箭不行，燃料不好，我认为得烧柴，最好是烧煤，煤还得精选煤，水洗煤不行。如果那科学家拿正眼看我一眼，那他就输了。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但不管怎么说，马工也还是一位体面的瑞典研发工程师。没有做过DBA就敢大放厥词，开地图炮拉仇恨，实在勇气可嘉。之前在《&lt;a href=&#34;https://mp.weixin.qq.com/s/PqCD80H927s0yJrBr4QQqw&#34;&gt;你怎么还在招聘DBA&lt;/a&gt;》，以及回应文《&lt;a href=&#34;/zh/blog/cloud/rds&#34;&gt;云数据库是不是智商税&lt;/a&gt;》中，我们便已交锋过。&lt;/p&gt;
&lt;p&gt;当别人把屎盆子扣在这个行业所有人头上时，还是需要人来站出来说几句的。因此今天特此撰文以驳斥马工的谬论：《&lt;a href=&#34;https://mp.weixin.qq.com/s/CMRrqI2yBWlNbACHpNgL1g&#34;&gt;再论为什么你不应该招DBA&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/CMRrqI2yBWlNbACHpNgL1g&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/no-dba-bullshit/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;马工的论点有三：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DBA妨碍了研发交付新特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBA威胁了企业数据安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人工DBA需要被基于代码的软件所取代&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;我的看法是：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一点属于无效输出，DBA本来就是在稳定性侧制衡研发的存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二点则是完全扯淡，DBA本来就是类似于财务的关健岗位，需要信任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三点属于部分事实，但严重高估了短期变化，且云数据库并非唯一的路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;且听我一一道来：&lt;/p&gt;
&lt;h3 id=&#34;dba-对稳定性负责&#34;&gt;DBA 对稳定性负责&lt;/h3&gt;
&lt;p&gt;关于信息系统的一个基本原理是：&lt;strong&gt;安全性与活性相互抵触&lt;/strong&gt;，过于强调安全稳定，则活性受损；过于强调活性，则难以稳定。任何组织都要在两者中间找到一个&lt;strong&gt;平衡&lt;/strong&gt;点。而研发与运维，就是两者的职能化身。&lt;/p&gt;
&lt;p&gt;研发对新功负责，而 SRE/DBA 对稳定性负责，一个开创，一个守成，两者相互协作，但也是相互制衡。马工作为研发，特别还是创业公司的研发，主张功能活性很重要，从立场上来说是无可厚非的。但在更广大的组织中，&lt;strong&gt;稳定性的地位往往是高于新功能的&lt;/strong&gt;，成熟的组织如银行，大型互联网平台，从来都是&lt;strong&gt;稳定性压倒一切&lt;/strong&gt;。毕竟，新功能的收益是不确定的，而大故障的损失是肉眼可见的。每天发10个新版本不见得能带来多少增长，但一次大故障也许就能让几个月的努力付之东流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“在高速上开两百迈的阻碍从来都不是车的性能，而是司机的胆量”&lt;/strong&gt;。站在更高位的管理者角度来说，马工强调的 &lt;em&gt;“开掉DBA得到更快的DB交付速度”&lt;/em&gt;，纯粹属于研发者的一厢情愿：用云把运维职能外包出去， 无人制衡，我想怎样就怎样。&lt;strong&gt;这样的想法如果落地，最终必将在某个时刻以惨痛的教训收场。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者曾是 DBA，但也没少干  Dev。关于研发和 DBA 的心态，都有亲身的体会。我在刚入行当研发的时候，在“PostgreSQL数据库里”跑神经网络，推荐系统，Web服务器和爬虫，用FDW接了 MongoDB 和 HBase以及一堆外部系统，什么稳定性？跑的不是挺好吗？直到没有运维与DBA愿意接手维护，我不得不亲自干起了 DBA 的活自己狗食背起锅来，才能设身处地的对DBA / 运维有同理心，谨慎选择有所为有所不为。&lt;/p&gt;
&lt;h3 id=&#34;交付速度谁在乎&#34;&gt;交付速度谁在乎？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;评价一款数据库需要从许多维度出发：稳定性，可靠性，安全性，简单性，可伸缩性，可扩展性，可观测性，可维护性，成本性价比&lt;/strong&gt;，等等等等。&lt;strong&gt;交付速度&lt;/strong&gt;这件事勉强属于“可伸缩性”里一个比较次要的附属维度，在数据库系统需要关注的属性中，&lt;strong&gt;压根排不上号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;更重要的是，&lt;strong&gt;性价比才是第一产品力&lt;/strong&gt;，&lt;strong&gt;对比方案却对成本闭而不提，是一种耍流氓的行为&lt;/strong&gt;。笔者对研发人员的这种心理非常了解：&lt;strong&gt;花的是公司的钱，省的是自己事儿，自然没有几个人会有动机为公司去省钱&lt;/strong&gt;。你的数据库花半个小时交付，还是花三四天交付，老板与领导不会 Care 这些。但是，你的老板会很在乎你花30分钟拉起了一个数据库，然后每个月账单多出来几十万元。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;meme.png&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-meme.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 AWS 上 64核256GB的 &lt;code&gt;db.m5.16xlarge&lt;/code&gt; RDS 为例，用一个月价格 $25,817 / 月，折合约 18 万元人民币，一个月的租金，够你把两台性能比这还要好的多得多的服务器直接买下来了，任何理智的企业用户都看得明白这里面的道理：&lt;strong&gt;如果采购这种服务不是为了短期的，临时性的需求，那么绝对算得上是&lt;strong&gt;&lt;strong&gt;重大的财务失当行为&lt;/strong&gt;&lt;/strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;比交付速度也不怵&#34;&gt;比交付速度也不怵&lt;/h3&gt;
&lt;p&gt;但即使我们退一万步讲，交付速度真的重要，马工的论证用例也是破绽百出。&lt;/p&gt;
&lt;p&gt;马工假想了一个数据库上线的案例：PG新版本，两地三中心，同城HA，异地灾备，数据加密，自动备份，自带监控，App与DB独立网段，DBA也无法删库。然后得意洋洋的宣称：”使用 Terraform，我只要28分钟就可以完成满足需要的配置！比拉DBA搭建数据库快几个数量级！“&lt;/p&gt;
&lt;p&gt;实际上只要你的机器就绪，网络打通，规划完毕：使用 Pigsty 部署一套满足这些需求的数据库系统，执行耗时也就是十几分钟。自建机房且不提，Pigsty 完全可以使用同样的逻辑：基于Terraform 一键拉起EC2、存储、网络，然后在这个基础上额外执行一条命令&lt;a href=&#34;https://github.com/Vonng/pigsty/blob/master/terraform/spec/aws-cn.tf&#34;&gt;部署数据库&lt;/a&gt;，耗费的时间说不定比 Terraform 还短一点，更重要的是，&lt;strong&gt;还能省掉百分之八九十的天价 RDS &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485292&amp;idx=1&amp;sn=4f650c3f5c3fb5207c55ff67e44d7d8a&amp;chksm=fe4b32b7c93cbba190e60d477061d19a165e1f9b074beb00b132ae1369a9fd2c7d10ed77a013&amp;scene=21#wechat_redirect&#34;&gt;智商税&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;price.jpeg&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-price.jpeg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能想出这种定价的云数据库产品经理脑袋一定被门夹了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;分库分表的稻草人靶子&#34;&gt;分库分表的稻草人靶子&lt;/h3&gt;
&lt;p&gt;马工提出，分库分表是DBA自抬身价的一种工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在今天，数据库的能力已经得到了极大的发展，给应用开发者带来巨大管理成本的分库分表已经没必要了。凡是在用分库分表的系统， 都可以用分布式数据库或者NoSQL数据库替换掉。几乎可以说，分库分表不过是DBA自抬身价的一种工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时至今日，&lt;strong&gt;硬件存储技术的发展已经让很多老同志跟不上新形势了&lt;/strong&gt;。家用 PCI-E NVME SSD 2TB的价格已经进入了三位数，常用的企业级 3.2TB MLC NVME SSD也不过六七千，最大几十TB的单卡容量，已经完爆了很多中大型企业的所有 TB 数据量，七位数的IOPS让几千/几万IOPS还卖天价的 云 EBS 恨不得找个地缝钻进去。&lt;/p&gt;
&lt;p&gt;软件方面，以 PostgreSQL 为例，使用堆表存储的单表容量十几TB千亿量级数据一点儿不成问题，还有 Citus 插件可以原地改造为分布式数据库。各种分布式数据库的卖点也是 “不用分库分表”。这都已经是老黄历问题了。除了极个别场景，恐怕也只有原教旨 MySQL 用户还守着 “单表不能超过 2000w 记录” 去玩分表了。&lt;/p&gt;
&lt;p&gt;当然，分布式数据库对于 DBA 的水平要求&lt;strong&gt;不会更低只会更高&lt;/strong&gt;；所以这里马工主要想说的还是 NoSQL ，更具体的讲，就是 DynamoDB 这种所谓“不需要” DBA运维的数据库直接干翻 DBA。不过，一个平均延迟在 10ms 的数据库，一个抽象程度只是等同于文件系统的扁平 KV 存储的数据库，光是杀猪程度要比 RDS 还要狠毒的 RCU / WCU 计费方式，就足够用户喝上一壶，有何德何能敢标榜自己能替掉 DBA ？&lt;/p&gt;
&lt;h2 id=&#34;指望用nosql替代dba是做梦&#34;&gt;指望用NoSQL替代DBA是做梦&lt;/h2&gt;
&lt;p&gt;互联网应用大多属于&lt;strong&gt;数据密集型应用&lt;/strong&gt;，对于真实世界的数据密集型应用而言，除非你准备从基础组件的轮子造起，不然根本没那么多机会去摆弄花哨的数据结构和算法。实际生产中，&lt;strong&gt;数据表就是数据结构，索引与查询就是算法&lt;/strong&gt;。而应用研发写的代码往往扮演的是&lt;strong&gt;胶水&lt;/strong&gt;的角色，处理IO与业务逻辑，其他大部分工作都是&lt;strong&gt;在数据系统之间搬运数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在最宽泛的意义上，&lt;strong&gt;有状态的地方就有数据库&lt;/strong&gt;。它无所不在，网站的背后、应用的内部，单机软件，区块链里。有。&lt;strong&gt;关系型数据库只是数据系统的冰山一角&lt;/strong&gt;（或者说冰山之巅），实际上存在着各种各样的数据系统组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：存储数据，以便自己或其他应用程序之后能再次找到（PostgreSQL，MySQL，Oracle）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：记住开销昂贵操作的结果，加快读取速度（Redis，Memcached）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;搜索索引&lt;/strong&gt;：允许用户按关键字搜索数据，或以各种方式对数据进行过滤（ElasticSearch）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流处理&lt;/strong&gt;：向其他进程发送消息，进行异步处理（Kafka，Flink，Storm）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批处理&lt;/strong&gt;：定期处理累积的大批量数据（Hadoop）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态管理是信息系统的永恒问题，马工以为的 DBA 是抱着祖传 Oracle 手册的打字员，实际上互联网公司的 DBA 已经是十八班武艺样样精通的 &lt;strong&gt;数据架构师&lt;/strong&gt; 了。&lt;strong&gt;架构师最重要的能力之一，就是了解这些组件的性能特点与应用场景，能够灵活地权衡取舍、集成拼接这些数据系统。&lt;/strong&gt; 他们上要 Push 业务落地最佳实践指导模式设计，下要深入操作系统与硬件排查问题优化性能，中间要掌握无数种数据组件的使用方式。君子不器，关系型数据库的知识，只是其中最为核心重要的一种。&lt;/p&gt;
&lt;p&gt;正如我在《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483673&amp;idx=1&amp;sn=2a895a6f6e4b3e882395203757ec4e60&amp;chksm=fe4b34c2c93cbdd49686c79ba27327b0dd16f266a82ab7de6e9985b8808207646fa1c7796da4&amp;scene=21#wechat_redirect&#34;&gt;为什么要学习数据库原理和设计&lt;/a&gt;》所说， 只会写代码的是码农；&lt;strong&gt;学好数据库，基本能混口饭吃&lt;/strong&gt;；在此基础上再学好&lt;strong&gt;操作系统和计算机网络&lt;/strong&gt;，就能当一个不错的程序员。可惜的是，数据建模和SQL几乎快成为一门失传的艺术：这类基础知识逐渐为&lt;strong&gt;新一代工程师&lt;/strong&gt;遗忘，他们设计出离谱的模式，不懂得正确地创建索引，然后草率得出结论：关系型数据库和SQL都是垃圾，我们必须使用糙猛快的NoSQL来省时间。然而人们总是需要可靠的系统来处理关键业务数据：在许多企业中，核心数据仍然是一个常规关系型数据库作为&lt;strong&gt;Source of Truth&lt;/strong&gt;，NoSQL数据库仅用于非关键数据。某个研发跳出来说 DynamoDB / Redis / MongoDB / HBase 太牛逼了，我所有的状态都能放在这里，而且再也不需要 DBA 了，毫无疑问是滑稽可笑的。&lt;/p&gt;
&lt;h3 id=&#34;dba-是企业数据库的守护者&#34;&gt;DBA 是企业数据库的守护者&lt;/h3&gt;
&lt;p&gt;马工的最后一炮，直指 DBA 的职业道德 ：DBA想删库，谁也拦不住。&lt;/p&gt;
&lt;p&gt;这话倒是没有错，DBA和财务一样，都属于能对企业造成致命杀伤的关键岗位：用人不疑，疑人不用。但这句话同样也绕开了一个重要事实：没有DBA守门，人人都能删库。在马工举的微盟和百度删库跑路的两个例子中，主犯都是普通的研发与运维人员，正是因为没有称职的 DBA 把关，才有删库跑路的可趁之机。&lt;/p&gt;
&lt;p&gt;合格的 DBA 可以有效减少有能力对企业进行致命一击的人群范围，从所有的研发与运维收敛到DBA本身。至于 DBA 本身如何制衡，要么是两个 DBA 互为备份，要么是由运维/安全团队管理冷备份的删除权限。马工举的，腾讯云不让手工删例行备份的例子，实属对业内实践少见多怪。&lt;/p&gt;
&lt;p&gt;对于给 DBA 群体泼脏水的行为，本人表示鄙视愤慨 😄。按照这个逻辑，我也完全可以认为马工喜爱的公有云厂商，才是对数据安全最大的威胁：用云不过是把运维和DBA外包给了云厂商，&lt;strong&gt;而你完全阻碍不了某个云厂商中有权限的研发/运维/DBA，在心血来潮的情况下来你的库里里逛逛。或者干脆脱个备份裤子赏玩一下，你压根不可能追索，不可能取证，当然核心原因是你压根没有能力知道这一点&lt;/strong&gt;。而这样的人许许多多，一个运维的脚本出岔子就会爆破一大片，你能指望的赔偿也只有不痛不痒的时长代金券。&lt;/p&gt;
&lt;p&gt;参考阅读：《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485093&amp;idx=1&amp;sn=5815f71f1d832101d35a75f5aa4acd3c&amp;chksm=fe4b337ec93cba68fbf30eb0ed50d052c6e8972d42cf506051b5016668f4555edaa0756688dc&amp;scene=21#wechat_redirect&#34;&gt;云RDS：从删库到跑路&lt;/a&gt;》&lt;/p&gt;
&lt;h3 id=&#34;dba要退出历史舞台&#34;&gt;DBA要退出历史舞台？&lt;/h3&gt;
&lt;p&gt;作为一个整体行业， DBA 确实在走下坡路， 但人们总是会过高估短期影响而低估长期趋势。许多大型组织都雇用DBA，DBA类似于 Cobol 程序员，那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，大量使用了关系型数据库。在可预见的未来，DBA在某个地方找工作是不会有什么问题的。&lt;/p&gt;
&lt;p&gt;但大的趋势是，数据库本身会越来越智能，易用性越来越好，而各式各样的工具、SaaS、PaaS不断涌出，也会进一步压低数据库的使用门槛。公有云/私有云DBasS的出现更是让数据库的管理门槛进一步下降。数据库的专业技术门槛降低，将导致DBA的不可替代性降低：安装一套软件收费十几万，做一次数据恢复上百万的好日子肯定是一去不复返了。但在另一种意义上讲，这也将 DBA 从运维性的琐事中解放出来，他们可以把更多时间投身于更有价值的性能优化，隐患排查，制度建设工作之中。&lt;/p&gt;
&lt;p&gt;无论是公有云厂商，还是以Kubernetes为代表的云原生/私有云，其核心价值都在于&lt;strong&gt;尽可能多地使用软件，而不是人来应对系统复杂度&lt;/strong&gt;。但是不要指望这些能完全替代 DBA：云并不是什么都不用管的运维外包魔法。根据复杂度守恒定律，无论是系统管理员还是数据库管理员，管理员这个岗位消失的唯一方式是，它们被重命名为“DevOps Engineer”或SRE/DRE。好的云软件可以帮你屏蔽运维杂活，解决70%的日常高频问题，然而总是会有那么一些复杂问题只有人才能处理。你可能需要更少的人手来打理这些云软件，但总归还是需要人来管理。毕竟：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你也需要懂行的人来协调处理，才不至于被云厂商嘎嘎割韭菜当傻逼。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题外话：有那么一些研发，总想着通过云这种运维外包外援，用云数据库，云XX砸掉 DBA 的饭碗。我们做了一个开箱即用的 云数据库 RDS PostgreSQL 本地开源替代 &lt;strong&gt;Pigsty&lt;/strong&gt; ，最近刚发布了 2.0，监控/数据库开箱即用 HA/PITR/IaC一应俱全。允许您在缺乏数据库专家的情况下，用接近硬件的成本运行企业级数据库服务，省掉50%～90%上贡给RDS的“无专家税”，让 RDS 除了它引以为傲的弹性，在各个方面都像是一个大笑话。对于广大 DBA 来说，这就是一件怼回去的武器。咱们明人不说暗话，就是要砸了云数据库的饭碗，并断了研发的这种痴念。https://pigsty.cc/zh/docs/feature&lt;/p&gt;
&lt;p&gt;最后，让我们用某个 Notion AI 生成的无版权提词小笑话结束今天的主题。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;joke.png&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-joke.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: DBA还是一份好工作吗？</title>
      <link>/zh/blog/cloud/is-dba-good-job/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/is-dba-good-job/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/is-dba-good-job/featured_hu49e9d8b8e70b67678815b427faee2280_103960_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;蚂蚁金服有过一个自嘲的段子：能干翻支付宝的，除了监管就是&lt;strong&gt;DBA&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;数字时代，数据是很多企业的核心资产，对于互联网/软件服务类企业更是如此。而负责保管这些数据资产的人，就是&lt;strong&gt;DBA（数据库管理员）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;想象一下所有账户余额和联系人全部丢失的场景，尽管发生概率微乎其微，即使是支付宝与微信，如果出现无法恢复的核心库删库事件，恐怕也只能吃不了兜着走了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;缘从何起&#34;&gt;缘从何起？&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;fish.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/fish.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件吃世界，开源吃软件，云吞噬开源，谁来吞噬云？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久很久以前，开发软件/信息服务需要使用非常昂贵的商业数据库软件：例如Oracle与SQL Server：单花在软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。如果公司已经砸了成百上千万的钱在数据库软硬件上，那么再花一些钱雇佣一些专职专家来照顾这些昂贵且复杂的数据库，就是一件很自然的事情，这些专家就是DBA。&lt;/p&gt;
&lt;p&gt;接下来事情出现了有趣的变化：随着PostgreSQL/MySQL这些开源数据库的兴起，公司们有了一个新选择：不用软件授权费用即可使用数据库软件，而它们也开始（不理性地）停止为数据库专家付费：维护数据库的工作被隐含在了研发与运维的附属职责中，而这两类人通常：既不擅长、也不喜欢、更不在乎照顾数据库的事情。直到公司的规模足够大，或者吃到足够的苦头之后，一些Dev/Ops才会培养出相应的能力来，不过这是相当罕见的事情。&lt;/p&gt;
&lt;p&gt;接下来，云出现了。云实际上是一种运维外包，将DBA工作中属于运维部分，最具像化的部分给自动化了：高可用，备份/恢复，配置，置备。DBA仍然剩下很多事情，但普通麻瓜难以理解此类工作的价值，这部分职责依然静悄悄地落在了研发与运维工程师的身上。“不要钱” 的开源数据库可以让我们自由随意地使用数据库软件，因此随着微服务哲学兴起，用户开始给每个小服务弄一个单独的数据库，而不是很多应用共享一个巨大的中央共享数据库。在这种情况下，数据库被视作每个服务的一部分，可以更方便的把DBA的活推给研发了。&lt;/p&gt;
&lt;p&gt;那么，云之后是什么？DBA还会是一份好的工作吗？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;核心价值&#34;&gt;核心价值&lt;/h2&gt;
&lt;p&gt;很多地方都需要DBA：糟糕的模式设计，奇烂的查询性能，鬼知道有没有用的备份；等等等等。可惜的是，从事软件工作的人中，很少有人了解什么是DBA。成为DBA，意味着与研发人员创造的熵进行永无休止的战斗。&lt;/p&gt;
&lt;p&gt;DBA，Database Administrator，数据库管理员，以前也叫做数据库协调员、数据库程序员。DBA是一个横跨于研发团队与运维团队的广博角色，涉及DA、SA、Dev、Ops、以及SRE的多种职责，负责各种与数据与数据库有关的问题：设置管理策略与运维标准，规划软硬件架构，协调管理数据库，验证表模式设计，优化SQL查询，分析执行计划，乃至于处理紧急故障以及抢救数据。&lt;/p&gt;
&lt;p&gt;DBA的第一点价值在于&lt;strong&gt;安全兜底&lt;/strong&gt;：他是企业核心数据资产的守护者，也是可以轻易对企业造成致命伤害的人。在蚂蚁金服有个段子，能搞死支付宝的，除了监管就是DBA了。高管们通常也很难意识到 DBA 对于公司的重要性，直到出了数据库事故，一堆CXO紧张地站在DBA背后观看救火修复过程时…。&lt;/p&gt;
&lt;p&gt;DBA的第二点价值在于&lt;strong&gt;性能优化&lt;/strong&gt;。许多公司并不在乎他们的查询是纯狗屎，他们只是觉得“硬件很便宜”，砸钱买硬件就好了。然而问题在于，一个调整不当的查询/SQL或设计不当的数据模型与表结构，可以对性能产生&lt;strong&gt;几个数量级&lt;/strong&gt;的影响。总会在某一个规模，堆硬件的成本相比雇佣一个靠谱DBA的成本高得令人望而却步。实话说，我认为大多数公司在IT软硬件开销中花费最大的是：&lt;strong&gt;开发人员没有正确使用数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;优秀的DBA还会负责&lt;strong&gt;数据模型设计与优化&lt;/strong&gt;。数据建模和SQL几乎已成为一门失传的艺术，这类基础知识逐渐为新一代工程师遗忘，他们设计出离谱的模式，不懂得正确地创建索引，然后草率得出结论：关系型数据库和SQL都是垃圾，我们必须使用糙猛快的NoSQL来省时间。然而人们总是需要可靠的系统来处理关键业务数据：在许多企业中，核心数据仍然是一个常规关系型数据库作为&lt;strong&gt;Source of Truth&lt;/strong&gt;，NoSQL数据库仅用于非关键数据。&lt;/p&gt;
&lt;p&gt;对于尚未进入PMF的初创企业，雇佣一个全职DBA是奢侈的行为。然而在一个大型组织中，一个好的DBA是至关重要的。不过好的DBA相当稀有，以至于这个角色在大多数组织中只能外包：包给专业的数据库服务公司，包给云数据库RDS服务团队，或者&lt;strong&gt;内包&lt;/strong&gt;给自己的研发/运维人员。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba的未来&#34;&gt;DBA的未来&lt;/h2&gt;
&lt;p&gt;许多公司都雇用DBA，DBA类似于Cobol程序员，除了科技公司/初创企业外：那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，也大量使用了这些关系型数据库。在可预见的未来，DBA在某个地方找工作是不会有什么问题的。&lt;/p&gt;
&lt;p&gt;尽管数据库专家对于大型组织与大型数据库而言非常重要，不幸的是，DBA作为一份职业前景可能是晦涩暗淡的。大趋势是数据库本身会越来越智能，易用性越来越好，而各式各样的工具、SaaS、PaaS不断涌出，也会进一步压低数据库的使用门槛。公有云/私有云DBasS的出现更是让数据库的门槛进一步下降，只要掏钱就可以迅速达到优秀DBA的廉价七成正确水准。&lt;/p&gt;
&lt;p&gt;数据库的专业技术门槛降低，将导致DBA的不可替代性降低：安装一套软件收费十几万，做一次数据恢复上百万的好日子肯定是一去不复返了。但对于开源数据库软件社区生态来说，却是一件好事：将会有更多的开发者有能力来使用它，并或多或少扮演着DBA的角色。&lt;/p&gt;
&lt;h3 id=&#34;云会革了运维与dba的命吗&#34;&gt;&lt;strong&gt;云会革了运维与DBA的命吗？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;无论是公有云厂商，还是以Kubernetes为代表的云原生/私有云，其核心价值都在于&lt;strong&gt;使用软件，而不是人来应对系统复杂度&lt;/strong&gt;。那么，云软件会革了运维与DBA的命吗？&lt;/p&gt;
&lt;p&gt;从长期来看，这类云软件代表着先进生产力的发展方向。对于云原生环境中成长起来的新一代开发者，对于他们来说K8S才是操作系统，底下的Linux、网络、存储都属于魔法巫术，成为极少数人才会关心的“底层细节”。大概就像现在我们作为应用研发人员，看待汇编语言指令集，摆弄内存扣字节差不多。但就像人工智能的三起三落一样：&lt;strong&gt;过早追逐潮流的人不一定是先驱，而有大概率成为先烈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无论是系统管理员还是数据库管理员，管理员这个岗位消失的唯一方式是，它们被重命名为“DevOps Engineer”或SRE。云并不会消灭管理员，你可能需要更少的人手来打理这些云软件，但总归还是需要人来管理的：从整个行业的视角看，云软件的推广会让100个初中级运维（传统系统管理员）的工作岗位变成10个中高级运维岗位（DevOps/SRE），同样的事也有可能发生在DBA身上。例如，现在也出现了与SRE相对应的 &lt;strong&gt;DRE&lt;/strong&gt;：&lt;strong&gt;Database Reliability Enginee&lt;/strong&gt;r。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&lt;img alt=\&#34;img\&#34; src=\&#34;https://mmbiz.qpic.cn/mmbiz_png/Wkpr3rA9wF3tOia3iaRAvic4V4zEatQO3wLxHQsF1Ag4mibeOiccL2KxWv0ngWGKlQ4aB9WseuqnEB1fJjBB8ZxOcqQ/0?wx_fmt=png&amp;from=appmsg\&#34;&gt;&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/dre.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Database Reliability&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从另一方面来说，云RDS提供的性能与可靠性属于廉价七成正确的大锅饭，比起优秀专职DBA所精心照顾的本地数据库表现仍然相距甚远。云数据库就像IT中的每一轮炒作一样：东西很受欢迎，每个人都为玩具Demo着迷，直到将其投入生产。然后他们终于发现了时尚潮流的垃圾箱火灾是什么样的，并回头开始研究久经考验的真实技术。总是一样的，人工智能便是前车之鉴。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;cost-sec.webp&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/cost-sec.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公有云RDS的两大核心问题：成本/自主可控&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管DBA听上去是一个有着光辉历史与暗淡前景的行当，但未来仍未可知。天知道在几次恐怖的重大云数据库事故后，DBA会不会重新成为潮流呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;做点什么&#34;&gt;做点什么？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;开源免费&lt;/strong&gt;的数据库发行版解决方案，也能让大批量研发/运维工程师成为合格的兼职DBA。而这就是我正在做的事情：&lt;strong&gt;Pigsty —— 开箱即用的开源数据库发行版&lt;/strong&gt;， 上手即用，量产DBA。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-arch.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-arch.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 架构简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-mon.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-mon.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty监控界面概览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是一个PostgreSQL DBA，但也是软件架构师与全栈应用开发者。Pigsty是我用软件来完成自己作为DBA的工作的一次尝试：它成功的完成了我大部分的日常工作：无可比拟的监控系统能为性能优化与故障排查预警提供扎实的数据支持，自动切换的高可用集群能让我在故障时游刃有余甚至睡醒了觉再慢慢处理，一键安装部署扩缩容备份恢复则将日常管理事务变为了零星几条命令的事。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-desc.webp&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-desc.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is Pigsty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您想要使用PostgreSQL / Redis / Greenplum 等数据库，比起聘请昂贵稀缺的专职DBA，或使用费用高昂无法自主可控的云数据库，也许这是一个不错的替代选择。扫码加公众号与微信交流群了解更多。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 云RDS：从删库到跑路</title>
      <link>/zh/blog/cloud/drop-rds/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/drop-rds/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/drop-rds/featured_hud41464d74e16635b9792e52579298075_154559_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;上一篇文章《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485064&amp;idx=1&amp;sn=6225a044d8f145cdb07a21a1e0c54ad8&amp;chksm=fe4b3353c93cba4582576b4de151ac48247052a1494adcc820dc64a32dafb0b99e33085c7bbb&amp;scene=21#wechat_redirect&#34;&gt;DBA还是份好工作吗&lt;/a&gt;》中提到：尽管DBA作为一份职业在没落，但谁也保不准DBA会不会在几次恐怖的大规模云数据库故障后，重新成为潮流。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/AGEW1iHQkQy4NQyYC2GonQ&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/drop-rds/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这不，最近就目睹了一场云数据库删库跑路现场情景剧。本文就来聊一聊在生产环境使用PostgreSQL，如何应对误删数据的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-dropdb.gif&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-mysql-dropdb.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rmrf.gif&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-rmrf.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wm-dropdb.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-wm-dropdb.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;故障现场&#34;&gt;故障现场&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;case-1.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-case-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;case-2.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-case-2.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;看完了故事，我们不禁要问，我都已经花钱买了‘&lt;strong&gt;开箱即用&lt;/strong&gt;’的云数据库了，为啥连PITR恢复这么基本的兜底都没有呢？&lt;/p&gt;
&lt;p&gt;说到底，云数据库也是数据库，云数据库并不是啥都不用管的运维外包魔法，不当配置使用，一样会有数据丢失的风险。没有开启WAL归档就无法使用PITR，甚至无法登陆服务器获取现存WAL来恢复误删的数据。&lt;/p&gt;
&lt;p&gt;当然，这也得怪云厂商抠门心机，WAL日志归档PITR这些PG的基础高可用功能被云阉割掉了，放进所谓的“高可用”版本。WAL归档对于本地部署的实例来说，无非是加块磁盘配置条命令的事情。对象存储1GB一个月几分钱，最是廉价不过，但乞丐版云数据库还是要应省尽省，不然怎么卖“高可用”版的数据库呢？&lt;/p&gt;
&lt;p&gt;在Pigsty中，所有PG数据库集群都默认启用了WAL归档并每日进行全量备份：保留最近一日的基础&lt;strong&gt;冷备份&lt;/strong&gt;与WAL，允许用户回溯至当日任意时刻的状态。更是提供了开箱即用的&lt;strong&gt;延迟从库&lt;/strong&gt;搭建工具，防误删快人一步！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何应对删库&#34;&gt;如何应对删库？&lt;/h2&gt;
&lt;p&gt;传统的“高可用”数据库集群通常指的是基于主从物理复制的数据库集群。&lt;/p&gt;
&lt;p&gt;故障大体可以分为两类**：硬件故障/资源不足**（坏盘/宕机），&lt;strong&gt;软件缺陷/人为错误&lt;/strong&gt;（删库/删表）。&lt;strong&gt;基于主从复制的物理复制用于应对前者，延迟从库与冷备份通常用于应对后者&lt;/strong&gt;。因为误删数据的操作会立刻被复制到从库上执行，所以热备份与温备份都无法解决诸如 DROP DATABASE，DROP TABLE这样的错误，需要使用&lt;strong&gt;冷备份&lt;/strong&gt;或&lt;strong&gt;延迟从库&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;冷备份&#34;&gt;冷备份&lt;/h3&gt;
&lt;p&gt;在Pigsty中，可以通过为集群中的数据库实例指定角色（ &lt;code&gt;pg_role&lt;/code&gt; ），即可以创建物理复制备份，用于从机器与硬件故障中恢复。例如以下配置声明了一个一主两从的高可用数据库集群，带有一个热备一个温备，并自动制作每日冷备。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-backup.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pg-backup.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pg-backup&lt;/code&gt; 是一个Pigsty内置的开箱即用备份剧本，可自动制作基础备份。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pigsty.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Pigsty 所有的配置文件模板中，都配置有以下归档命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wal_dir=/pg/arcwal;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/mkdir -p ${wal_dir}/$(date +%Y%m%d) &amp;amp;&amp;amp; /usr/bin/lz4 -q -z %p &amp;gt; ${wal_dir}/$(date +%Y%m%d)/%f.lz4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认在集群主库上，所有WAL文件会自动压缩并按天归档，需要使用时，配合基础备份，即可将集群恢复至任意时间点。&lt;/p&gt;
&lt;p&gt;当然，您也可以使用 Pigsty 带有的 &lt;strong&gt;pg_probackup&lt;/strong&gt;, &lt;strong&gt;pg_backrest&lt;/strong&gt; 等工具来自动管理备份与归档。将冷备份与归档丢到云存储或专用备份中心，轻松实现&lt;strong&gt;异地跨机房容灾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;冷备份是经典的兜底备份机制，如果只有冷备份本身，那么系统将只能恢复到备份时刻到状态。如果加之以WAL日志，就可以通过在基础冷备份上重放WAL日志，&lt;strong&gt;将集群恢复到任意时间点&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;延迟从库&#34;&gt;延迟从库&lt;/h3&gt;
&lt;p&gt;冷备份虽然很重要，但对于核心业务来说，下载冷备份，解开压缩包，推进WAL重放需要很长一段时间，时间不等人。为了最小化RTO，可以使用另一种称为 &lt;strong&gt;延****迟从库&lt;/strong&gt;的技术来应对误删故障。&lt;/p&gt;
&lt;p&gt;延迟从库可以从主库接受实时的WAL变更，但延迟特定的时间再应用。从用户的视角来看，延迟从库就像主库在特定时间前的一份历史快照。例如，您可以设置一个延迟1天的从库，当出现误删数据时，您可以将该实例快进至误删前的时刻，然后立刻从延迟从库中查询出数据，恢复至原始主库中。下面的Pigsty配置文件声明了两个集群：一个标准的高可用一主一从集群 &lt;strong&gt;&lt;code&gt;pg-test&lt;/code&gt;&lt;/strong&gt;，以及一个该集群的延迟从库：&lt;strong&gt;&lt;code&gt;pg-testdelay&lt;/code&gt;&lt;/strong&gt;，为方便起见，配置1分钟的复制延迟：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pg-test 是原始集群&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.11&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;primary }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-test }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pg-testdelay 是 pg-test 的延迟集群&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-testdelay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.12&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role: primary , pg_upstream: 10.10.10.11, pg_delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1d }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.13&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 2, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replica }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-test2 }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;monitor.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-monitor.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在PGSQL REPLICATION监控面板中，&lt;code&gt;pg-test&lt;/code&gt;集群的复制指标如上图所示，启用复制延迟配置后，延迟从库&lt;code&gt;pg-testdelay-1&lt;/code&gt;有了稳定的1分钟“应用延迟”（Apply Delay），在LSN进度图表中，主库的LSN进度与延迟从库的LSN进度在水平时间轴上相差了正好1分钟。&lt;/p&gt;
&lt;p&gt;您也可以创建一个普通的备份集群，然后使用 **&lt;code&gt;pg edit-config pg-testdelay &lt;/code&gt;**的方式，来手工修改延迟的时长配置。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;edit-config.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-edit-config.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;修改延迟为1小时并应用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty提供了完善的备份支持，无需配置即可使用开箱即用的主从物理复制，绝大多数物理故障均可自愈。同时，还提供了延迟备库与冷备份支持，用于应对软件故障与人为误操作。您只需要准备几台物理机/虚拟机/或者云服务器，即可一键创建并拥有真正的高可用数据库集群！&lt;/p&gt;
&lt;p&gt;Pigsty，让您的数据库坚若磐石，除了高可用，还自带监控系统，完全开源免费！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：您依然可以使用&lt;/strong&gt; &lt;code&gt;pgsql-rm.yml&lt;/code&gt; **一键删光所有数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;又注：此行为受 &lt;code&gt;pg_safeguard&lt;/code&gt; ，&lt;code&gt;pg_clean&lt;/code&gt; 等一系列安全保险参数控制，以避免胖手指误删。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pigsty.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: DBA会被云淘汰吗？</title>
      <link>/zh/blog/cloud/dba-vs-rds/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/dba-vs-rds/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/dba-vs-rds/featured_hu02aa61ae1d9de35cbe238d2676170cb9_174858_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;前天开源漫谈第九期主题《&lt;a href=&#34;https://mp.weixin.qq.com/s/T4waTPvcSRdCv8pCl4MdOw&#34;&gt;DBA会被云淘汰吗？&lt;/a&gt;》，我作为主持人全程克制着自己亲自下场的冲动，因此特此写了这篇文章来聊聊这个问题 ： DBA 会被云淘汰吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/W1hwbl3qmjC4Dcmadc8uSg&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/dba-vs-rds/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba帮助用户用好数据库&#34;&gt;DBA帮助用户用好数据库&lt;/h2&gt;
&lt;p&gt;很多地方都需要DBA：糟糕的模式设计，奇烂的查询性能，鬼知道有没有用的备份；等等等等。可惜的是，从事软件工作的人中，很少有人了解什么是DBA。成为DBA，意味着与研发人员创造的熵进行永无休止的战斗。&lt;/p&gt;
&lt;p&gt;DBA，Database Administrator，数据库管理员，以前也叫做数据库协调员、数据库程序员。DBA是一个横跨于研发团队与运维团队的广博角色，涉及DA、SA、Dev、Ops、以及SRE的多种职责，负责各种与数据与数据库有关的问题：设置管理策略与运维标准，规划软硬件架构，协调管理数据库，验证表模式设计，优化SQL查询，分析执行计划，乃至于处理紧急故障以及抢救数据。&lt;/p&gt;
&lt;p&gt;许多公司都会雇用DBA，传统的 DBA 类似 Cobol 程序员，除了科技公司/初创企业外：那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，也大量使用了这些关系型数据库。单花在这些商业数据库软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。如果公司已经砸了成百上千万的钱在数据库软硬件上，那么再花一些钱雇佣一些专职专家来照顾这些昂贵且复杂的数据库，就是一件很自然的事情，这些专家就是传统的 DBA。&lt;/p&gt;
&lt;p&gt;接下来随着 PostgreSQL / MySQL 这些开源数据库的兴起，这些公司们有了一个新选择：不用软件授权费用即可使用数据库软件，而它们也开始（不理性地）停止为数据库专家付费：维护数据库的工作被隐含在了研发与运维的附属职责中，而这两类人通常：既不擅长、也不喜欢、更不在乎照顾数据库的事情。直到公司的规模足够大，或者吃到足够的苦头之后，一些Dev/Ops才会培养出相应的能力来，成为DBA —— 不过这是相当罕见的事情，而这也是今天我们讨论的主角 —— 开源数据库的 DBA。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;用好数据库的能力很稀缺&#34;&gt;用好数据库的能力很稀缺&lt;/h2&gt;
&lt;p&gt;培养开源数据库 DBA 的核心要素是&lt;strong&gt;场景&lt;/strong&gt;，而有足够复杂度和规模的场景是极其稀缺的，往往只有头部的大甲方才有。就好比国内 MySQL 的 DBA 主要产自重度使用 MySQL 的淘宝等互联网头部公司。而优秀 PostgreSQL DBA 基本上都出自去哪儿网、平安银行、探探这几个大规模使用 PG 的公司。顶级的开源数据库 DBA 的来源极其有限，基本是在顶级甲方用户中精通数据库的运维/研发，靠着真金白银的大故障与复杂场景的建设经验，才能零星砸出来几个。&lt;/p&gt;
&lt;p&gt;以中国的 PostgreSQL DBA 为例，根据圈内纯技术文传播阅览量，圈子规模大概在千人左右；但能建设架构超过 RDS 水准的数据库系统的 DBA 就收敛到几十个了；能自己打造更好的 RDS ，甚至做到对外复制输出最佳实践的更是凤毛麟角，一只手就能数过来。&lt;/p&gt;
&lt;p&gt;所以，当下数据库领域的主要矛盾，不是缺少更好更强大的新内核，而是&lt;strong&gt;极度匮乏用好管好现有数据库内核的能力&lt;/strong&gt; —— &lt;strong&gt;数据库太多，而司机太少！&lt;/strong&gt; 数据库内核已经发展了几十年，在内核上的小修小补边际收益已经很小了。而像 PostgreSQL 这样成熟开源数据库内核引擎出现，让卖商业数据库成为一门糟糕的生意 —— 开源数据库不需要高昂的软件授权费用，那么能用好这些免费的&lt;strong&gt;开源数据库&lt;/strong&gt;的老司机 —— DBA，就成为了最大的瓶颈与成本。&lt;/p&gt;
&lt;p&gt;在这个阶段，高级的经验都“垄断”在少数头部专家手中。实际上，这正好是开源真正的“商业模式” —— 创造高薪的技术专家岗位。然而这也出现了一个新的机会 —— 商业数据库产品因为开源替代的出现已经很难形成垄断了，但能用好开源数据库的DBA专家是屈指可数的，而垄断少数几个专家的难度比起干翻开源数据库要简单太多了。垄断不了数据库产品，就垄断用好它的能力！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;阶段&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;“商业模式”&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;阶段1&lt;/td&gt;
&lt;td&gt;商业数据库&lt;/td&gt;
&lt;td&gt;商业数据库软件垄断了数据库产品供给。&lt;/td&gt;
&lt;td&gt;天价软件授权&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段2&lt;/td&gt;
&lt;td&gt;开源数据库&lt;/td&gt;
&lt;td&gt;开源打破了商业数据库垄断，&lt;br /&gt;但技术垄断在少量头部开源专家手中。&lt;/td&gt;
&lt;td&gt;高薪专家岗位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段3&lt;/td&gt;
&lt;td&gt;云数据库&lt;/td&gt;
&lt;td&gt;云打破了开源专家技术垄断&lt;br /&gt;但在用好数据库的能力上形成垄断&lt;/td&gt;
&lt;td&gt;管控软件租赁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段4&lt;/td&gt;
&lt;td&gt;“云原生？”&lt;/td&gt;
&lt;td&gt;开源管控软件打破了云管控软件垄断&lt;br /&gt;用好数据库的能力普及到千家万户&lt;/td&gt;
&lt;td&gt;咨询保险兜底&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以，尽可能招揽能用好开源数据库的专家，打造一个共享专家池让稀缺的高级 DBA 得以时分复用，并和 DBA 经验沉淀而成的管控软件一起打包成服务出租，就是一种非常有利可图的商业模式 —— 而云数据库RDS 正是这样做的，并赚的钵满盆翻。&lt;/p&gt;
&lt;p&gt;云数据库使用的内核本身是开源免费的，所以云数据库提供的核心能力，正是和 DBA 一样的，&lt;strong&gt;帮助用户用好数据库的能力&lt;/strong&gt;！ 它真正的竞品不是其他商业数据库内核，或者开源数据库内核，而是 DBA —— 特别是处于中下游位置的 DBA。这就跟出租车公司要取代的不是汽车厂，而是全职司机一样。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba的工作与自动化管控&#34;&gt;DBA的工作与自动化管控&lt;/h2&gt;
&lt;p&gt;除了 DBA 人力，还有什么办法可以获得用好数据库的能力？那我们就需要先来看一看 DBA 的工作模式。&lt;/p&gt;
&lt;p&gt;DBA的工作在时间上主要分为&lt;strong&gt;建设&lt;/strong&gt;与&lt;strong&gt;维护&lt;/strong&gt;两个阶段。在最初几个月的密集建设阶段会比较幸苦，需要负责搭建成熟的技术架构与管理体系；而当自动化建设完成，进入了维护阶段后 —— DBA的工作就要轻松很多了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;建设阶段&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;维护阶段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;管理层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库选型，制度建设&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库建模，查询设计，人员培训，SOP积累，开发规约&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;架构设计，服务接入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SQL审核 / SQL变更 / SQL优化 / 分库分表 / 数据恢复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;数据库层&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Infra建设，数据库部署&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备份恢复 / 监控告警 / 安全合规 / 版本升级 / 参数调优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作系统层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OS调优，内核调参&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储空间管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;硬件层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;测试选型，驱动适配&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;（更换备件）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;体系建设并不是一蹴而就的一锤子买卖，而是一个水平随时间对数增长的演化过程。有兴趣研究折腾的DBA会持续致力于更高水平的自动化建设，将建设过程浓缩为可复制的经验、文档、流程、脚本、工具、方案、平台、&lt;strong&gt;管控软件&lt;/strong&gt;。管控软件也许是目前 DBA 经验沉淀的终极形态 —— 用软件代替自己干 DBA 的活儿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管控系统&lt;/strong&gt;的自动化水平越高，维护阶段所需的维护人力就越少。但是对于 DBA 水平的要求也就越高，所需的建设投入与时间周期也就越长。所以在某一个平衡点上，或者是自动化程度撞上了 DBA 水平的天花板，或者是高到了威胁DBA 的职业安全，建设演进就会告一段落，DBA 进入“喝茶看报”的持续维护状态。&lt;/p&gt;
&lt;p&gt;维护状态的系统，所需的&lt;a href=&#34;https://mp.weixin.qq.com/s/FIOB_Oqefx1oez1iu7AGGg&#34;&gt;智力带宽会显著下降&lt;/a&gt;。在建设完毕的良好系统架构中，如果只是日常性、规范性的工作，水平更低一些的 DBA 也足以维持，对高级 DBA 的时间需求也会戏剧性下降 —— 进入  “养兵千日，用兵一时” 的 “闲置” 状态，只有当出现紧急的故障与疑难杂症时，这些数据库专家老司机才能再次体现出自己的价值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;能力构成&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;普通用户-建设起步&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;100%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;普通用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;30%&lt;/strong&gt; 管控 + &lt;strong&gt;70%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顶级用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;90%&lt;/strong&gt; 管控 + &lt;strong&gt;9%&lt;/strong&gt; 运维人力 + &lt;strong&gt;1%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以 DBA 以前其实是一个非常不错的岗位，经过创业打江山的建设阶段之后，就可以躺在功劳簿上，享受建设成果带来的效率红利。 比如顶级甲方中的 DBA 经过长期建设，也许 90% 的工作内容都高度自动化了 —— 比如连硬件故障都靠高可用管控自愈了。DBA 只需要 10% 的救火/优化/指导/管理时间，那么剩下 90% 的时间就可以自由支配：继续改善管控软件实现利滚利，或者学习内核源码翻译书籍，或者单纯就是像 DBA 的先辈 —— ‘图书管理员“ 那样在图书馆里喝茶看报，好不惬意。&lt;/p&gt;
&lt;p&gt;然而 DBA 的这种舒适的生活被云数据库的模式打破了。首先，云厂商拿着已经建设好的管控软件批量复制分发，消灭了数据库建设阶段的重复性工作。其次，如果没有建设阶段，只有维护阶段，而维护工作只需要 DBA 10% 的时间，那么与其用 &lt;strong&gt;90%&lt;/strong&gt; 的时间摸鱼，总会有卷王选择当时间管理大师同时去打 10 份工。云厂商的数据库专家通过管控和共享 DBA，让这个IT领域难得的清闲岗位也卷翻了起来。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;云数据库的模式与新挑战&#34;&gt;云数据库的模式与新挑战&lt;/h2&gt;
&lt;p&gt;云数据库为什么会对 DBA 构成威胁？要解释这个问题，我们就需要先来聊一聊云数据库 RDS 的用户价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云数据库的核心价值是 “敏捷” 与 “兜底”&lt;/strong&gt;。至于什么 “便宜”，“简单”，“弹性”，“安全“，”可靠” 其实都不是核心，甚至也都不一定真的成立。所谓 “&lt;strong&gt;敏捷&lt;/strong&gt;” —— 翻译过来就是为用户省掉几个月的建设阶段工作，一步到位进入维护阶段 。所谓 “&lt;strong&gt;兜底&lt;/strong&gt;”，就是指用户真正出现疑难杂症，真正需要顶级 DBA 的高智力带宽时，云厂商为用户通过工单的方式提供保障 —— 至少你确实能摇到人来管一管。&lt;/p&gt;
&lt;p&gt;云数据库在技术上的核心壁垒，是&lt;strong&gt;沉淀了高级DBA经验的管控软件&lt;/strong&gt;。大部分DBA，包括不少顶级 DBA  —— 尽管其本身是数据库管理领域的专家，但却并没有研发能力 —— 可以自己将自己的领域知识与经验沉淀为可复制软件产品的能力。因此通常需要一个研发团队的辅助，来将高级DBA的领域知识转变为业务软件。&lt;/p&gt;
&lt;p&gt;这些沉淀了 DBA 经验的管控软件，就成为了云数据库的核心生产资料与&lt;a href=&#34;https://mp.weixin.qq.com/s/LefEAXTcBH-KBJNhXNoc7A&#34;&gt;摇钱树&lt;/a&gt;。核·月单位成本20块钱的硬件资源，套上管控软件，就能卖出 300～400（Aliyun），甚至 800～1300（AWS）这样几十倍的天价来。不过也正是RDS这样线性绑定硬件资源的定价策略，让一部分中级 DBA 现在还能有喘息空间 —— 当 RDS 规模达到 100核以上，招聘一个 DBA 自建维护就会达到 ROI 的转折点了。&lt;/p&gt;
&lt;p&gt;管控软件替代 DBA 工作的另一个好处是， DBA 可以加杠杆了！举个例子，如果你的管控软件可以自动化掉 DBA 90% 的工作，那么 同样的活就只需要一个DBA 10% 的时间，可以把一个 DBA 当十个用，所以 DBA 乘数就是10。如果你的管控软件简单易用，门槛很低，让普通运维/开发也能玩 DBA Cosplay，自助完成这 10% 工作中的 9%，那么就只需要专家 1% 的时间了，1个DBA可以当100个用！当然如果未来出现个 DBA 大模型，再把这 1% 的剩余工作替代 0.9% ，DBA 乘数就可以放大到 1000 倍了！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;管控软件&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DBA乘数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;普通用户-建设起步阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;100%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;普通用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30%管控 + &lt;strong&gt;70%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;云数据库&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;60% 管控 + 38% 人力 + &lt;strong&gt;2%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶级用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;90% 管控 + 9% 人力 + &lt;strong&gt;1%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;未来状态想象&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;95% 管控 + 4% 大模型 + 0.9% 人力 + &lt;strong&gt;0.1%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以，云厂商的模式和 银行很像。有所谓的 “存款准备金率” 和 “DBA乘数”，可以十个坛子甚至上百个坛子一个盖。充分释(ya)放(zha) DBA 老司机的空闲时间与剩余价值，用较低的人力成本，为更多的客户提供“兜底”服务。解决了 “用好数据库能力” 非常稀缺的问题，并赚的钵满盆翻。&lt;/p&gt;
&lt;p&gt;如果让我来实事求是的评价云数据库服务的质量水平，用百分制打分的话。那么顶级DBA的自建水准可以到 95～100 分，优秀 DBA 自建能达到八十分上下；云数据库的水平大约就在 70 分。可是中级 DBA 土法自建也就大概五六十分，初级DBA土法自建也就三四十分，运维兼职的土法自建可能也就十几分。头部的甲方确实看不上云数据库这种大锅饭，但这对于腰部的用户来说这简直太香了 —— 他们要的就是大锅饭，而比起采购天价的商业数据库与聘请稀缺的数据库老司机，RDS确实配得上一句“物美价廉”。&lt;/p&gt;
&lt;p&gt;第一：云数据库是预制菜，直接就能吃，不需要建设阶段；第二：云数据库是廉价七成正确的合格品，而相当一部分初中级DBA土法自建几个月，也都达不到 RDS 这样的水平；第三：云数据库是标准件，降低了DBA天马行空自由发挥带来的不确定性与不可替代性；第四：云数据库提供了共享专家，“兜底”了其余一些对 DBA 的需求，也解决了出问题摇不到人或者遇人不淑的担忧。所以对于那些规模偏小，水平一般的甲方用户来说，云数据库比起招聘培养一个初中级 DBA 自建很有吸引力。&lt;/p&gt;
&lt;p&gt;云数据库服务对 DBA 的冲击是结构性的。极度稀缺的顶尖 DBA 不受影响，一直会是云厂商争相笼络招安拉拢的香饽饽。而胸部以下的 DBA ，或者说自建水平达不到 70 分的 DBA ，就会直接面临云数据库服务的生态位竞争。对于 DBA 这个行业来说，这不是一件好事 —— 因为高级 DBA 都是从初级，中级DBA 成长起来的。如果诞生培育这些初中级DBA的土壤 —— 中小公司的数据库应用场景都被云厂商垄断截胡，那么这个行业金字塔就会被腰斩掉，顶级DBA的增量被断掉，存量被蚕食，最终也会成为无根之木。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;打破云数据库的核心壁垒&#34;&gt;打破云数据库的核心壁垒&lt;/h2&gt;
&lt;p&gt;云数据库会是未来吗？云数据库会像 “汽车替代马车” 那样革掉 DBA 的命吗？我不这么想，因为有力就会有反作用力。与时俱进的 DBA 们会用工具武装自己，重新回到舞台中央与 RDS 同台竞技。&lt;/p&gt;
&lt;p&gt;DBA 们想要与云数据库竞争，采用路德分子抵制技术进步的方式是没有用的。而应当用 “你强我更强” 的方式提高自己相对于云数据库的竞争力。而要做到这一点，DBA 需要用更低的成本，提供比RDS更高的价值。要做到这一点，质量、安全、可靠的部分我都不用担心 DBA 的专业能力，核心在于 “敏捷” 与 “兜底” 这两个问题：&lt;/p&gt;
&lt;p&gt;首先，把几个月的建设周期缩短到几天甚至几小时，做到“&lt;strong&gt;敏捷&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;其次，真的出现疑难杂症问题时，能够摇到顶级DBA来“&lt;strong&gt;兜底&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;解决前者要靠 &lt;strong&gt;管控软件&lt;/strong&gt;，解决后者，要靠DBA老司机。而前者的紧迫性要远远高于后者 —— 建设良好的系统也许跑个几年都不会遇到需要 ”兜底“ 的问题，让普通 DBA 人人都成为老司机也不现实。而如何敏捷、低成本的拉起一套 70 分以上的数据库服务体系，是 DBA 应对 RDS 挑战的核心问题。&lt;/p&gt;
&lt;p&gt;而这，正是我发起 &lt;a href=&#34;https://mp.weixin.qq.com/s/-E_-HZ7LvOze5lmzy3QbQA&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt; 这个开源项目的初衷 —— 提供一个完全开源免费，且质量更好的 RDS PG 替代品。让普通的DBA/研发/运维人员都能以同样的敏捷的方式迅速建设交付 80分+ 的本地 RDS 服务！彻底解决掉第一个问题。而我自己的商业模式是咨询与服务，为这些疑难杂症提供商业支持与最后兜底，解决第二个问题。&lt;/p&gt;
&lt;p&gt;一个开源且足够好的数据库管控软件，会直接颠覆云数据库的商业模式。举个最简单的例子，你完全可以拿同样具有弹性的云服务器 ECS  和云盘 ESSD，使用开源管控来自建 RDS 服务。在不损失云所鼓吹的“弹性”与“敏捷”以及各种RDS好处的前提下，在不需要额外的人手的情况下，立竿见影的省掉 60% ～ 90% 不等的 “纯RDS溢价”。如果在使用自有服务器纯自建的情况下，能带来的&lt;a href=&#34;https://mp.weixin.qq.com/s/1OSRcBfd58s0tgZTUZHB9g&#34;&gt;降本增效水平&lt;/a&gt;恐怕会超出绝大多数用户的认知。&lt;/p&gt;
&lt;p&gt;Pigsty 会重新设置云数据库服务的基线水平，所有质量不及它的PG管控软件价值都会逐渐萎缩归零，这是数据库管理领域的核武器扩散，是站在道德高地上的开源倾销。和当年开源数据库掀翻商业数据库的桌子是一模一样的，只不过这一次发生在了另一个维度 —— 管控软件 上。Pigsty 为所有 PG DBA 立即装备上了瞬间完成高水平数据库服务建设与交付的魔法棒，也让更多的研发/运维可以扮演 PG DBA 的角色，瞬间量产出大量的初级 DBA 来。&lt;/p&gt;
&lt;p&gt;当然作为开源的管控软件，Pigsty 确实和云数据库管控一样，替代了很大一部分的 DBA 工作内容，特别是运维性的部分。但和云数据库不一样的是，它掌握在 DBA 自己的手中，由DBA所拥有，控制，使用，而不是只能向云计算领主去租赁并”替代“DBA。更强生产力带来的闲暇时间红利与DBA乘数杠杆，会直接普及到每一个从业者手中。而这，就是我作为一个顶尖DBA对于 RDS 挑战的回复。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何面对云数据库的冲击&#34;&gt;如何面对云数据库的冲击&lt;/h2&gt;
&lt;p&gt;对于广大初中级 DBA 来说，我认为应对云数据库挑战的最佳办法就是立即放弃周期长，效果良莠不齐的土法自建尝试，直接拥抱成熟的开源管控软件，快速放大自己相对于云数据库的竞争力 —— 这一部分是完全开源免费，掌握在你自己手中的生产资料与能力。如果需要疑难杂症兜底，我非常乐意以一个相比于云数据库极有竞争力的价格提供支持、咨询与答疑。&lt;/p&gt;
&lt;p&gt;请不要再来问我：PostgreSQL 高可用如何做？PITR 备份恢复怎么搞？可观测性与监控系统如何搭建？如何用配置IaC管理几百套数据库集群？连接池如何配置管理？负载均衡与服务接入怎么做？上百个扩展插件如何编译分发打包？主机参数怎么调优？上线/下线/扩容/缩容/滚动升级/数据迁移这些怎么做？这些你真正会遇到的问题，也是我曾经遇到的问题，而我已经在 Pigsty 中我都给出了工具化的最佳实践与版本答案，并配有 DBA SOP 手册，让小白也能快速上手玩起 DBA Cosplay。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对于顶级DBA与同侪们，我倡议合力打造开源共有的管控软件，并基于此提供专业数据库服务。与其你搞一套云管，我搞一套云管，投入大量的研发人力搞低水平、重复性的建设，倒不如凝聚起来打造公有的开源管控，打造中国社区里真正有世界影响力的开源项目品牌。Pigsty 是一个很不错的候选开源项目 —— 在当下，它已经成为&lt;a href=&#34;https://mp.weixin.qq.com/s/79_PnX-a5iSfDMgz_VUx5A&#34;&gt;中国人主导的 PostgreSQL 生态开源项目中排名最前的项目了&lt;/a&gt;。它也许有机会成为 PostgreSQL 世界中的 Debian 与 Ubuntu，但这取决于所有每一个贡献者与每一个用户。&lt;/p&gt;
&lt;p&gt;我也不靠 Pigsty 来赚钱，和许多数据库服务公司一样，靠的也是提供专业的咨询与服务。这也许不是资本市场喜欢听的那种 “Scale to the Moon” 的故事，但确实可以解决用户的痛点需求。我一个人即使再牛逼，能打 200 份 PG DBA 的工吗？不能！但 Pigsty 这个管控工具可以让每一个 PG DBA 老司机都加上这样的杠杆，去为社会提供真正有价值的咨询与服务，从而卷翻云数据库！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;例如提供 MySQL 专家服务的 Percona ，负责 PostgreSQL 部门的头 Umair Shahid 就很敏锐地看到了这个趋势。他从 Percona 出来，成立了自己的创业公司 Stormatics 来提供专业 PostgreSQL 服务。他没有自己再 “研发” 一套什么 PG云数据库管控平台之类的东西，而是直接使用 Pigsty 进行系统交付。同样也有一些意大利，美国，国内的数据库公司在使用 Pigsty 交付 PostgreSQL 服务。我对此表示热烈欢迎、并愿意提供支持与帮助。&lt;/p&gt;
&lt;p&gt;数据库产品的模式正在消亡，而数据库咨询与专家服务的模式方兴未已。用好数据库是一个门槛很高的领域，即使强如&lt;a href=&#34;https://mp.weixin.qq.com/s/CicctyvV1xk5B-AsKfzPjw&#34;&gt;下云先锋 DHH&lt;/a&gt;，抠门大王也依然会有一笔采购 Percona MySQL 专家服务的开销来请专业的人解决专业的问题。比起出卖尊严去包装换皮套壳吹牛撒谎打造使用价值微乎其微的（Minor PG fork） “新数据库内核产品” ，倒不如堂堂正正地去为用户提供真正有价值的数据库专家咨询与服务 。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在当下，服务器硬件资源非常便宜，数据库内核软件开源免费且足够牛逼，现在，如果管控软件不再被云厂商垄断，那么提供完整数据库服务的核心要素，就只剩下了用于兜底的&lt;strong&gt;专家能力&lt;/strong&gt;！AI 与 GPT 的出现更是让单个数据库专家的杠杆乘数放大到一个惊人的地步。&lt;/p&gt;
&lt;p&gt;所以，有很多云厂商内部的数据库老司机都敏锐地洞察到了这个趋势，选择脱离云厂商自己出来单干！比如从阿里云出来的就有，唐成老师的乘数科技，曹伟老师的Kubeblocks，叶正盛老师的 NineData，等等等等。所以即使是云数据库厂商内部的团队，也不是铁板一块。团队也在剧烈变动，凋零失血，人心思变中。&lt;/p&gt;
&lt;p&gt;我相信未来的世界，不会是一个云数据库垄断的世界。各家 RDS 管控的质量水平长期止步不前，已经达到了场景土壤所容许的能力天花板。而顶尖 DBA 的经验沉淀下来的生产力工具则更进一步，让许多腰部 DBA 面对 RDS 都能重新有一战之力。与时俱进的 DBA 们会用工具武装自己，与 RDS 同台竞技。而我愿意替天行道，扛起下云与自建替代的大旗，开发这些管控软件与工具并普及到每一个DBA手中，帮助 DBA 打赢反抗云数据库的战斗！&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
