<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – RDS</title>
    <link>/zh/tags/rds/</link>
    <description>Recent content in RDS on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 06 Oct 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/rds/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: 云数据库：用米其林的价格，吃预制菜大锅饭</title>
      <link>/zh/blog/cloud/rds-scam/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/rds-scam/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/rds-scam/featured_hu9e82e781e1729570a61befcbcaefe3a6_496580_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="366"/>]]>
        
        &lt;p&gt;云数据库是不是天价大锅饭&lt;/p&gt;
&lt;p&gt;RDS带来的数据库范式转变&lt;/p&gt;
&lt;p&gt;质量安全效率成本剖析核算，&lt;/p&gt;
&lt;p&gt;下云数据库自建，如何实战！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;太长不看&#34;&gt;太长；不看&lt;/h2&gt;
&lt;p&gt;从商业软件到开源软件再到云软件，软件行业的范式出现了嬗变，数据库自然也不例外：云厂商拿着开源数据库内核，干翻了传统企业级数据库公司。&lt;/p&gt;
&lt;p&gt;云数据库是一门非常有利可图的生意：可以将成本不到 20¥/核·月的硬件算力卖出十倍到几十倍的溢价，轻松实现 50% - 70% 甚至更高的毛利率。&lt;/p&gt;
&lt;p&gt;然而，随着硬件遵循摩尔定律发展，云管控软件出现开源平替，这个生意面临着严峻的挑战：云数据库服务丧失了性价比，而下云自建开始成为趋势。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;云数据库是天价预制菜，如何理解？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你在家用微波炉加热黄焖鸡米饭料理包花费10元，餐馆老板替你用微波炉加热装碗上桌收费30元，你不会计较什么，房租水电人工服务也都是要钱的。
但如果现在老板端出同样一碗饭跟你收费 1000 元并说：我们提供的不是黄焖鸡米饭，&lt;strong&gt;而是可靠质保的弹性餐饮服务&lt;/strong&gt;，反正十年前就这个价，
你会不会有削一顿这个老板的冲动？ 这样的事情就发生在云数据库，以及其他各种云服务上。&lt;/p&gt;
&lt;p&gt;对于规模以上的大型算力与大型存储来说，云服务的价格只能用离谱来形容：云数据库的溢价倍率可以达到十几倍到几十倍。
而作为一门生意，云数据库的毛利率可以轻松达到 50% - 70%，与苦哈哈卖资源的 IaaS (10% - 15%) 形成鲜明对比。
不幸地是，云服务并没有提供与高昂价格相对应的优质服务：云数据库服务的质量，安全，性能表现也并不尽人意。&lt;/p&gt;
&lt;p&gt;更严峻的问题在于：随着硬件遵循摩尔定律发展，以及云管控软件出现开源平替，云数据库的模式正面临着严峻的挑战：
云数据库服务丧失了性价比，而下云自建开始成为趋势。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;云数据库是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云数据库，就是云上的数据库服务，这是一种软件交付的新兴范式：用户不是“拥有软件“，而是“租赁服务”。&lt;/p&gt;
&lt;p&gt;与云数据库概念对应的是传统商业数据库（如 Oracle，DB2，SQL Server）与开源数据库（如 PostgreSQL，MySQL）。
这两种交付范式的共同特点是，软件是一种“产品”（数据库内核），用户“拥有”软件的副本，买回来/免费下载下来运行在自己的硬件上；&lt;/p&gt;
&lt;p&gt;而云数据库服务（AWS/阿里云/…… RDS）通常会将软硬件资源打成包，把跑在云服务器上的开源数据库内核包装成“服务”：
用户通过云平台提供的数据库 URL 访问并使用数据库服务，并通过云厂商自研的管控软件（平台/PaaS）管理数据库。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;数据库软件交付有哪几种范式？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最初，软件吞噬世界&lt;/strong&gt;，以 Oracle 为代表的商业数据库，用软件取代了人工簿记，用于数据分析与事务处理，极大地提高了效率。不过 Oracle 这样的商业数据库非常昂贵，一核·一月光是软件授权费用就能破万，不是大型机构都不一定用得起，即使像壕如淘宝，上了量后也不得不”去O“。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接着，开源吞噬软件&lt;/strong&gt;，像 PostgreSQL 和 MySQL 这样”&lt;strong&gt;开源&lt;/strong&gt;免费“的数据库应运而生。软件开源本身是免费的，每核每月只需要几十块钱的硬件成本。大多数场景下，如果能找到一两个数据库专家帮企业用好开源数据库，那可是要比傻乎乎地给 Oracle 送钱要实惠太多了。&lt;/p&gt;
&lt;p&gt;开源软件带来了巨大的行业变革，可以说，&lt;strong&gt;互联网的历史就是开源软件的历史&lt;/strong&gt;。尽管如此，开源软件免费，但 &lt;strong&gt;专家稀缺昂贵&lt;/strong&gt;。能帮助企业 &lt;strong&gt;用好/管好&lt;/strong&gt; 开源数据库的专家非常稀缺，甚至有价无市。某种意义上来说，这就是”开源“这种模式的商业逻辑：&lt;strong&gt;免费的开源软件吸引用户，用户需求产生开源专家岗位，开源专家产出更好的开源软件&lt;/strong&gt;。但是，专家的稀缺也阻碍了开源数据库的进一步普及。于是，“云软件”出现了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后，云吞噬开源&lt;/strong&gt;。公有云软件，是互联网大厂将专家使用开源软件的能力产品化对外输出的结果。公有云厂商把开源数据库内核套上壳，包上管控软件跑在托管硬件上，并雇佣共享 DBA 专家提供支持，便成了&lt;strong&gt;云数据库服务&lt;/strong&gt; （RDS） 。&lt;strong&gt;云诚然是有价值的服务，也为很多软件变现提供了新的途径。但云厂商的搭便车行径，无疑对开源软件社区是一种剥削与攫取&lt;/strong&gt;，而云计算罗宾汉们，也开始集结并组织反击。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;经典商业数据库 Oracle，DB2， SQL Server 都卖得很贵，云数据库为什么不能卖高价？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;商业软件时代，可以称为软件 1.0 时代，数据库中以 Oracle，SQL Server，IBM 为代表，价格其实非常高昂。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：你觉得卖的贵，我要 Argue 一下，这不是正常的商业逻辑吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;卖的贵不是大问题 —— 有只要最好的东西，根本不看价格的客户。然而问题在于云数据库不够好，第一：内核是开源 PG / MySQL，实际上自己做的就是个管控。而且在其营销却宣传中，好像是包治百病的万灵药，存算分离，Serverless，HTAP，云原生，超融合…，RDS 是先进的汽车，而老的数据库是马车……，blah&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：如果不是马车和汽车，那应该是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区别最多算油车和电车，阐述数据库行业与汽车行业的类比。数据库：汽车；DBA：司机；商业数据库：品牌汽车；开源数据库：组装车；云数据库：出租车+出租司机，嘀嘀打车；这种模式是有其适用光谱的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库的适用光谱？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;起步阶段，流量极小的简单应用 / 2 毫无规律可循，大起大落的负载 / 3 全球化出海合规场景 ，租售比。小微企业别折腾，上云（但上什么云值得商榷），大企业毫无疑问，下云。更务实的做法是买基线，租尖峰，混合云 —— 主体下云，弹性上云。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：这么看来，云计算其实是有它的价值与生态位的。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;《科技封建主义》，垄断巨头对生态造成的伤害。 / 2. 云营销，吹牛是要上税的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抛开宏大叙事不谈，但云数据库的费用可不便宜。…… （弹性/百公里加速），引出成本问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;为什么有此一说？为什么会觉得贵？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我们用几个具体的例子来说明。&lt;/p&gt;
&lt;p&gt;例如在探探时，我们曾经评估过上云后的成本。我们用的服务器整体 TCO 在&lt;/p&gt;
&lt;p&gt;，一台是……5年7.5万，每年TCO 1.5w。两台组个高可用，就是每年3万块钱，阿里云华东1默认可用区，独享的64核256GB实例：pg.x4m.8xlarge.2c，并加装一块3.2TB的ESSD PL3云盘。每年的费用在25万（3年）到75万（按需）不等。 AWS 总体在每年160 ～ 217万元不等。&lt;/p&gt;
&lt;p&gt;不只是我们，Ruby on Rails 的作者 DHH 在 2023 年分享了他们 37 Signal 公司从云上下来的完整历程。&lt;/p&gt;
&lt;p&gt;介绍 &lt;a href=&#34;https://pigsty.io/zh/blog/cloud/odyssey/&#34;&gt;DHH 下云的例子&lt;/a&gt;，每年 300w 美元年消费。一次性投入&lt;strong&gt;60万美元&lt;/strong&gt;买了服务器自己托管后，年支出降到了 100 万美元，原来的1/3 。五年能省下 700 万美金。下云花了半年时间，也没有使用更多的人手来运营。&lt;/p&gt;
&lt;p&gt;特别是考虑到开源替代的出现
——&lt;/p&gt;
&lt;p&gt;德不配位，必有灾殃，&lt;/p&gt;
&lt;p&gt;字面意思：用云数据库，实际上是用五星级酒店米其林餐厅的价格，吃大食堂大锅饭预制菜料理包。&lt;/p&gt;
&lt;p&gt;例如在 AWS 上，如果你想购买一套高规格的 PostgreSQL 云数据库实例，通常需要你要掏出对应云服务器十倍以上的价钱，考虑到云服务器本身有 5 倍左右的溢价，云服务相比规模自建&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;rds带来的数据库范式转变&#34;&gt;RDS带来的数据库范式转变&lt;/h2&gt;
&lt;p&gt;上期云计算泥石流，我们聊到了老罗在交个朋友淘宝直播间“卖云”：先卖着扫地机器人，然后姗姗来迟的老罗照本宣科念台词卖了四十分钟”云“，随即画风一转，马不停蹄地卖起了 &lt;strong&gt;高露洁无水酵素牙膏&lt;/strong&gt;。这很明显是一场失败的直播尝试：超过千家企业在直播间下单了云服务器，100 ～ 200 块的云服务器客单价加上每家限购一台，也就是撑死了二十万的营收，说不定还没有罗老师出场费高。&lt;/p&gt;
&lt;p&gt;我写了一篇文章《&lt;a href=&#34;https://mp.weixin.qq.com/s/s_MCdaCByDBuocXkY1tvKw&#34;&gt;罗永浩救不了牙膏云&lt;/a&gt;》揶揄直播卖虚拟机的阿里云是个牙膏云，然后我的朋友瑞典马工马上写了一篇《&lt;a href=&#34;https://mp.weixin.qq.com/s/ffrwbLiGxTLO1jVh8mHiBA&#34;&gt;牙膏云？您可别吹捧云厂商了&lt;/a&gt;》驳斥说：“任何一家本土云厂商都不配牙膏云这个称号。从利润率，到社会价值，到品牌管理，质量管理和市场教育，公有云厂商们都被牙膏厂全方面吊打”。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;云数据库是什么，是一种软件范式转移吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最初，软件吞噬世界&lt;/strong&gt;，以 Oracle 为代表的商业数据库，用软件取代了人工簿记，用于数据分析与事务处理，极大地提高了效率。不过 Oracle 这样的商业数据库非常昂贵，一核·一月光是软件授权费用就能破万，不是大型机构都不一定用得起，即使像壕如淘宝，上了量后也不得不”去O“。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接着，开源吞噬软件&lt;/strong&gt;，像 PostgreSQL 和 MySQL 这样”&lt;strong&gt;开源&lt;/strong&gt;免费“的数据库应运而生。软件开源本身是免费的，每核每月只需要几十块钱的硬件成本。大多数场景下，如果能找到一两个数据库专家帮企业用好开源数据库，那可是要比傻乎乎地给 Oracle 送钱要实惠太多了。&lt;/p&gt;
&lt;p&gt;开源软件带来了巨大的行业变革，可以说，&lt;strong&gt;互联网的历史就是开源软件的历史&lt;/strong&gt;。尽管如此，开源软件免费，但 &lt;strong&gt;专家稀缺昂贵&lt;/strong&gt;。能帮助企业 &lt;strong&gt;用好/管好&lt;/strong&gt; 开源数据库的专家非常稀缺，甚至有价无市。某种意义上来说，这就是”开源“这种模式的商业逻辑：&lt;strong&gt;免费的开源软件吸引用户，用户需求产生开源专家岗位，开源专家产出更好的开源软件&lt;/strong&gt;。但是，专家的稀缺也阻碍了开源数据库的进一步普及。于是，“云软件”出现了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后，云吞噬开源&lt;/strong&gt;。公有云软件，是互联网大厂将自己使用开源软件的能力产品化对外输出的结果。公有云厂商把开源数据库内核套上壳，包上管控软件跑在托管硬件上，并雇佣共享 DBA 专家提供支持，便成了&lt;strong&gt;云数据库服务&lt;/strong&gt; （RDS） 。&lt;strong&gt;这诚然是有价值的服务，也为很多软件变现提供了新的途径。但云厂商的搭便车行径，无疑对开源软件社区是一种剥削与攫取&lt;/strong&gt;，而捍卫计算自由的开源组织与开发者自然也会展开反击。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;云数据库是不是天价大锅饭&#34;&gt;云数据库是不是天价大锅饭&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问：我们先来聊聊第一个问题，成本，成本不是云数据库所宣称的一项优势吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看和谁比，和传统商业数据库 Oracle 比可以，和开源数据库比就不行了 —— 特别是小规模可以（DBA），有点规模就不行了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云是不是可以省下DBA/数据库专家的成本？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，好DBA稀缺难找。但用云数据库不代表你就不需要DBA了，你只是省去了系统建设的工作与日常运维性的工作，还有省不掉的部分。第二，我们可以具体算一笔账，在什么规模下，雇佣一个 DBA 相比云数据库是合算的。（聊一聊几种价格的模型）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：RDS 和DBA 是什么关系？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDS 和 DBA 提供的核心价值不是数据库产品，而是用好开源数据库内核的能力。…… 只不过一个主要靠DBA老司机，一个主要靠管控软件。一个是雇佣，一个是租赁。我觉得生态里还缺一种模式 —— 拥有管控软件，所以我做的东西就是开源的数据库管控软件。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：所以云数据库成本上不占优势？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;极小规模有优势，标准尺寸或者大规模数据库没有任何成本优势。&lt;/p&gt;
&lt;p&gt;比较成本你要看怎么比。云数据库的计费项：计算+存储，当然还有流量费，数据库代理费，监控费用，备份费用。&lt;/p&gt;
&lt;p&gt;大头是计算与存储，计算的单位是……，存储的单位是……（一些关键数字）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：实例部分的钱怎么算？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阿里 RDS: 7x-11x，PolarDB: 6x~10x，AWS: 14x ~ 22x&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;双实例高可用版价格&lt;/th&gt;
&lt;th&gt;4x 核月单价&lt;/th&gt;
&lt;th&gt;8x 核月单价&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;高可用RDS系列核月均价&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥339&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥432&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS RDS 高可用参考价&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥1,160&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥1,582&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 PolarDB 参考价&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥250&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥400&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DHH探探自建1C算力（不含存储）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;¥40&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;云服务器，云上按量，包月，包年，预付五年的单价分别为 &lt;strong&gt;187¥，125¥，81¥，37¥&lt;/strong&gt;，相比自建的 &lt;strong&gt;20¥&lt;/strong&gt; 分别溢价了 &lt;strong&gt;8x, 5x, 3x, 1x&lt;/strong&gt;。在配置常用比例的块存储后（1核:64GB, ESSD PL3），单价分别为：&lt;strong&gt;571¥，381¥，298¥，165¥&lt;/strong&gt;，相比自建的 &lt;strong&gt;22.4¥&lt;/strong&gt; 溢价了 &lt;strong&gt;24x, 16x, 12x, 6x&lt;/strong&gt; 。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：存储部分的钱怎么算？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来看零售单价，GB·月单价 ，两分钱，阿里云 ESSD 上分了几个不同的档次，从 1- 4块钱。&lt;/p&gt;
&lt;p&gt;1TB 存储·月价格（满折扣）：自己买 16 ，AWS 1900，阿里云 3200&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：上面聊了很多成本的问题，但你怎么能盯着成本呢？成本到底有多重要？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你技术与产品有领先优势的情况下，成本没那么重要。但当技术与产品拉不开差距的时候，即 —— 你卖的是没有不可替代性的大路货标准品，成本就非常重要了。在十年前，云数据库也许是属于产品/技术主导的状态，可以心安理得的吃高毛利。但是在十年后的今天。云不是高科技了，云已经烂大街了。市场已经从价值定价转向了成本定价，成本至关重要。&lt;/p&gt;
&lt;p&gt;阿里的主营业务电商，被“廉价”的拼多多打的稀里哗啦，拼多多靠的是什么？就是一个朴实无华的便宜。你淘宝天猫能卖的，我能卖一样还更便宜，这就是核心竞争力。你又不是爱马仕，劳力士，买个包买个表都要配几倍货才卖给你的奢侈品逻辑，在老罗直播间里夹在牙膏和吸尘器中间的大路货云服务器能拼什么，还不是一个便宜？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：那么什么时候成本不重要呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二个点是经济上行繁荣期，创业公司拼速度的发展期，扣成本可能为时过早。但现在很明显，是经济下行萧条期……。再比如说，如果你的东西足够好，那么用户也可以不在意成本。就好比你去五星级酒店，米其林餐厅吃饭，不会在意他们用的食材是多少成本；对吧，OpenAI ChatGPT 别无分号，仅此一家，爱买不买。但是，去菜市场买菜，那是是会看成本的。云数据库，云服务器，云盘，都是“食材”，而不是菜品，是要核算成本，比价的。（黄焖鸡米饭的故事）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;质量安全效率成本剖析核算&#34;&gt;质量安全效率成本剖析核算&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问：性价比里的价格成本聊透了，那我们来聊聊质量、安全、效率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云数据库很贵，所以在卖的时候都有一些话术。虽然我们贵，但是我们好呀！&lt;em&gt;&lt;strong&gt;数据库是基础软件里的皇冠明珠，凝聚着无数无形知识产权BlahBlah&lt;/strong&gt;&lt;/em&gt;。因此软件的价格远超硬件非常合理…… 但是，云数据库真的好吗？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：在功能上，云数据库怎么样？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只能 OLTP 的 MySQL 咱就不说了，但是 RDS PostgreSQL 还是可以聊一聊的。尽管 PostgreSQL 是世界上最先进的开源关系型数据库，但其独一无二的特点在于其&lt;strong&gt;极致可扩展性，与繁荣的扩展生态&lt;/strong&gt;！不幸地是，&lt;strong&gt;《&lt;a href=&#34;https://mp.weixin.qq.com/s/EH7RPB6ImfMHXhOMU7P5Qg&#34;&gt;云 RDS 阉割掉了 PostgreSQL 的灵魂&lt;/a&gt;&lt;/strong&gt;》 —— 用户无法在 RDS 上自由加装扩展，而一些强力扩展也注定不会出现在 &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng&amp;mid=2247485745&amp;idx=5&amp;sn=a7d610ea37c3f3fa78ee4ba0ee705962&amp;chksm=fe4b3ceac93cb5fc6f1975f94be04424e7b3690eedd1658951deb8d016f5f19ade8806d86417&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;RDS&lt;/strong&gt;&lt;/a&gt; 中。使用 RDS 无法发挥出 PostgreSQL 真正的实力，而这是一个对云厂商来说&lt;strong&gt;无法解决的缺陷&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：在功能扩展上，云上的 PostgreSQL 数据库有什么缺陷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Contrib 模块作为 PostgreSQL 本体的一部分，已经包含了 73 个扩展插件，在 PG 自带的 73 个扩展中，阿里云保留了23个阉割了49个；AWS 保留了 49 个，阉割了 24 个。PostgreSQL 官方仓库 PGDG 收录的约 100 个扩展，Pigsty 作为PG发行版自身维护打包了20个强力扩展插件，在 EL/Deb 平台上总共可用的扩展已经达到了 234 个 —— AWS RDS 只提供了 94 个扩展，阿里云 RDS 提供了 104 个扩展。&lt;/p&gt;
&lt;p&gt;在重要的扩展中，情况更严重。AWS与阿里云缺失的扩展有：（时序 TimescaleDB，分布式 Citus，列存 Hydra，全文检索 BM25，OLAP PG Analytics，消息队列 pgq，甚至一些基本的重要组件都没有提供，比如做 CDC 的 WAL2JSON），版本跟进跟进速度也不理想。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库为什么不能提供这些扩展？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云厂商的口径是：安全性，稳定性，但这根本说不通。云上的扩展都是从 PostgreSQL 官方仓库 PGDG 下载打好包，测试好的 rpm / deb 包来用的。需要云厂商测试什么东西？但我认为更重要的一个问题是开源协议的问题，AGPLv3 带来的挑战。开源社区面对云厂商白嫖的挑战，已经开始集体转向了，越来越多的开源软件使用更为严格，歧视云厂商的软件许可证。比如 XXX 都用 AGPL 发布，云厂商就不可能提供，否则就要把自己的摇钱树 —— 管控软件开源。&lt;/p&gt;
&lt;p&gt;这个我们后面可以单独开一期来聊这个事情。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：上面提到了安全性的问题，那么云数据库真的安全吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、多租户安全挑战（恶意的邻居，Kubecon 案例）；2. 公网的更大攻击面（SSH爆破，SHGA）；&lt;/p&gt;
&lt;p&gt;3、糟糕的工程实践（AK/SK，Replicator密码，HBA修改）； 4 没有保密性、完整性兜底。&lt;/p&gt;
&lt;p&gt;5、缺乏可观测性，因此难以发现安全问题，更难取证，就更别提追索了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库的可观测性一团稀烂，怎么说？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;信息、数据、情报对于管理来说什么至关重要。但是云上提供的这个监控系统吧，质量只能说一言难进。早在 2017 年的时候我就调研过世面上所有 PostgreSQL 数据库监控系统 …… 指标数量，图表数量，信息含量。可观测性理念，都一塌糊涂。监控的颗粒度也很低（分钟级），想要5秒级别的？不好意思请加钱。&lt;/p&gt;
&lt;p&gt;AustinDatabase 号主今天刚发了一篇《&lt;a href=&#34;https://mp.weixin.qq.com/s/IMgJBZ9uqU5x738p9mED4w&#34;&gt;上云后给我一个 不裁 DBA的理由&lt;/a&gt;》聊到这个问题：在阿里云上想开 Ticket 找人分析问题，客服会疯狂给你推荐 DAS（数据库自动驾驶服务），请加钱，每月每实例 6K 的天价。&lt;/p&gt;
&lt;p&gt;没有足够好的监控系统，你怎么定责，怎么追索？（比如硬件问题，超卖，IO抢占导致的性能雪崩，主从切换，给客户造成了损失）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：除了安全和可观测性的问题，相当一部分用户更在意的是质量可靠性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云数据库并不提供对可靠性兜底，没有SLA 条款兜底这个。&lt;/p&gt;
&lt;p&gt;只有可用性的 SLA ，还是很逊色的 SLA，赔付比例跟玩一样。 营销混淆：将 SLA 混淆为真实可靠性战绩。&lt;/p&gt;
&lt;p&gt;乞丐版的标准版数据库甚至连 WAL 归档与 PITR 都没有，就单纯给你回滚到特定备份，用户也没有能力自助解决问题。&lt;/p&gt;
&lt;p&gt;著名的双十一大故障，草台班子理论，降本增笑。中亭团伙……可观测性团队的草台班子，都是刚毕业的在维护。&lt;/p&gt;
&lt;p&gt;业务连续性上的战绩并不理想：RTO，RPO ，嘴上说的都是 =0 =0，实际…… 。腾讯云硬盘故障导致初创公司数据丢失的案例。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库真的好吗？（性能维度）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们先来聊一聊性能吧。刚才聊了云盘的价格，没说云盘的性能，EBS 块存储的典型性能，IOPS，延迟，本地盘。更重要的是这个高等级的云盘还&lt;a href=&#34;https://pigsty.io/zh/blog/cloud/ecs/#%E4%BA%91%E5%AD%98%E5%82%A8%E5%AF%B9%E5%8D%95%E4%BB%B7%E7%9A%84%E5%BD%B1%E5%93%8D&#34;&gt;不是你想用就给你用的&lt;/a&gt;。如果你买的量低于1.2TB，他们是不卖给你 ESSD PL3 的。而次一档的 ESSD PL2 的 IOPS 吞吐量就只有 ESSD PL3 的 1/10 。&lt;/p&gt;
&lt;p&gt;第二个问题是资源利用率。RDS 管控 2GB 的管控……，什么都不干内存吃一半。Java管控，日志Agent。&lt;/p&gt;
&lt;p&gt;高可用版的云数据库，有个备库，但是不给你读。吃你一倍的资源对不对，你想要只读实例要额外单独申请。&lt;/p&gt;
&lt;p&gt;最后，资源利用率提高的是云厂商白赚，好处让云厂商赚走了，代价让用户承担了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：其他的点呢？比如可维护性？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个操作要发验证码短信，100套 PostgreSQL 集群怎么办？ClickOps小农经济，企业用户和开发者真正的正道是 IaC，但是在这一点上比较拉垮。K8S Pigsty 都做的很好，原生内置了 IaC。RPA 机器人流程自动化。糟糕的API 设计，举个例子，几种不同风格的&lt;a href=&#34;https://help.aliyun.com/zh/rds/developer-reference/api-rds-2014-08-15-errorcodes?spm=a2c4g.11186623.0.0.604b1fbaxZLPDN&#34;&gt;错误代码&lt;/a&gt;，&lt;a href=&#34;https://help.aliyun.com/zh/rds/developer-reference/instance-state-table?spm=a2c4g.11186623.0.0.437f5df9BftH2v&#34;&gt;实例状态表&lt;/a&gt;，（驼峰法，蛇形法，全大写，两段式）体现出了低劣的软件工程质量水平。&lt;/p&gt;
&lt;p&gt;业务连续性，RTO RPO，比如做 PITR 是通过创建一个新的按量付费的实例来实现的。那原来的实例怎么办？怎么回滚？怎么保障恢复的时长？这种合格DBA都应该知道的东西，云RDS 为什么不知道？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;云数据库有没有啥出彩之处&#34;&gt;云数据库有没有啥出彩之处？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库就没有一些做的出色的地方吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有，弹性，公有云的弹性就是针对其商业模式设计的：启动成本极低，维持成本极高。低启动成本吸引用户上云，而且良好的弹性可以随时适配业务增长，可是业务稳定后形成供应商锁定，尾大不掉，极高的维持成本就会让用户痛不欲生了。这种模式有一个俗称 —— &lt;strong&gt;杀猪盘&lt;/strong&gt;。这个模式发展到极致就是 Serverless。 云厂商的假 Serverless。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：还有一个与弹性经常一起说的，叫敏捷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;敏捷，以前算是云数据库的独门优势，但现在也没有了。第一，真正的 Serverless ，Neon，Supabase，Vercel 免费套餐，赛博菩萨。第二，Pigsty 管控，上线一套新数据库也是5分钟。云厂商的极致弹性，秒级扩容其实骗人的，几百秒也是秒……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：聊聊 Serverless，这会是未来吗？为什么说这是榨钱术？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云厂商的 RDS Serverles，本质上是一种弹性计费模式，而不是什么技术创新。真正技术创新的  Serverless RDS，可以参考 Neon：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scale to Zero，&lt;/li&gt;
&lt;li&gt;无需事先配置，直接连上去自动创建实例并使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RDS Serverless 是一种营销宣传骗术。只是计费模式的区别，是一个恶劣的笑话。按照云厂商的营销策略，我拿个共享的 PG 集群，来一个租户就新建一个 Database 给他，不做资源隔离随便用，然后按实际的 Query 数量或者 Query Time 收费，这也可以叫 Serverless。&lt;/p&gt;
&lt;p&gt;然后按照这个定义，云厂商的各种产品一下子就全部都变成 Serverless 了。然后 Serverless 这个词的实质意思就被篡夺了，变成平庸无聊的计费技术。真正做的好的 Serverless ，应该去看看赛博菩萨 Cloudflare。&lt;/p&gt;
&lt;p&gt;这里我还提一点，Serverless 说是要解决极致弹性的问题，但弹性本身其实没有多重要&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：为什么弹性不重要，传统企业如何应对弹性问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;弹性峰值能到平时的几十上百倍，我觉得弹性有价值。否则以现在物理资源的价格，直接超配十倍也没多少钱……云厂商的弹性溢价差不多就是十几倍。大甲方的思路很清晰，有这个钱租赁，我干嘛不超配10倍。小用户用 serverless 可以理解。弹性转折点，40 QPS 。唯一场景就是那些 MicroSaaS。但那些 MicroSaas 可以直接用免费套餐的 Vercel，Neon，Supabase，Cloudflare……&lt;/p&gt;
&lt;p&gt;传统企业如何解决？我们有 15 % 的 机器 Buffer 池，如果不够用，把低利用率的从库摘几台就够了，机器到位，PG 5分钟上线。服务器到上架IDC大概两周左右，现在 IDC 上架已经到 半天 / 一天了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：所以云数据库整体来看，到底怎么样？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚才，我们已经从质量、效率、安全、成本剖析了云数据库的方方面面。基本上除了弹性，表现都很一般，而唯一能称得上出彩的弹性，其实也没他们说的那么重要。我对云数据库的总体评价就是 —— 预制菜，能不能吃？能吃，也吃不死人，但你也不要指望这种大锅饭能好吃到哪里去。&lt;/p&gt;
&lt;p&gt;草台班子，也没有什么品牌形象。例如 IBM DeveloperWorks。 《&lt;a href=&#34;https://mp.weixin.qq.com/s/Fc5oALMo1OJGIRK_Tf5VVA&#34;&gt;破防了，谁懂啊家人们：记一次mysql问题排查&lt;/a&gt;》&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;下云数据库自建如何实战&#34;&gt;下云数据库自建，如何实战！&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问：什么时候应该用云数据库，什么时候不应该。或者说，什么规模应该上云，什么规模应该下云？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;光谱的两端，DBaaS 替代，开源自建。经典阈值，团队水平。&lt;/p&gt;
&lt;p&gt;平均水准的技术团队：100 ～ 300 万年消费，云上 KA。没有任何懂的人，服务器厂商给出的估算规模是1000万。&lt;/p&gt;
&lt;p&gt;优秀的技术团队：一台物理机 ～ 一个机柜的量，下云，年消费几万到几十万。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：小企业用数据库有什么其他选择？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Neon，Supabase，Vercel，或者在赛博佛祖 Cloudflare 上直接托管。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：你给云数据库旷旷一顿批判，那是你站在头部甲方，顶级DBA的视角去看的。一般企业没有这个条件，怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;做好三件事：管控软件的开源替代怎么解决，硬件资源的置备供给怎么解决，人怎么解决？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：开源管控软件，怎么说？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，管理服务器的开源管控软件， KVM / Proxmox / OpenStack，新一代的就是 Kubernetes。对象存储的开源平替 MinIO，或者物美价廉的 Cloudflare R2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：硬件资源如何置备管理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IDC：Deft，Equinix，世纪互联。IDC 也可以按月付费，人家很清楚，一点儿都不贪心，30% 的毛利明明白白。&lt;/p&gt;
&lt;p&gt;服务器 + 30% 毛利，按月付费，机柜成本：4000 ～ 6000 ¥/月（42U  10A/20A），可放十几台服务器。网络带宽：独享带宽（通用） 100 块 / MB·月 ；专用带宽可达  20 ¥ / MB·月&lt;/p&gt;
&lt;p&gt;你也可以考虑长租公有云厂商的云服务器，租五年的话，比 IDC 贵一倍。请选择那些带有本地 NVMe 存储的实例自建，不要使用EBS云盘。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：还有个问题，在线的问题如何解决？云上的网络/可用区不是一般 IDC 可以解决的吧？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloudflare 解决问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：人怎么解决，DBA ？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当下的经济形势与就业率背景，用合理的价格想要找到能用的人并不难。初级的运维与DBA遍地都是，高级的专家找咨询公司，比如我就提供这样的服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：专业的人做专业的事情，从云上集中管理到云下自建，是不是一种开倒车的行为？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云厂商是不是最专业的人在做这件事，我相当怀疑。1. 云厂商摊子铺得太大，每个具体领域投入的人并不多；2. 云厂商的精英员工流失严重，自己出来创业的很不少。3. 自建绝不是开是历史倒车，而是历史前进的一个过程。历史发展本来就是钟摆式往复，螺旋式发展上升的一个过程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：云数据库的问题解决了，但是想要从云上下来，需要解决的问题不止数据库，其他的东西怎么办？对象存储，虚拟化，容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;留待下一期来讨论！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 草台班子唱大戏，阿里云PG翻车记</title>
      <link>/zh/blog/cloud/rds-failure/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/rds-failure/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/rds-failure/featured_hu02aa61ae1d9de35cbe238d2676170cb9_583332_640x0_resize_q75_catmullrom.jpg" width="640" height="366"/>]]>
        
        &lt;p&gt;在《&lt;a href=&#34;/zh/blog/cloud/rds&#34;&gt;云数据库是不是智商税&lt;/a&gt;》中，我对云数据库 RDS 的评价是：“&lt;strong&gt;用五星酒店价格卖给用户天价预制菜&lt;/strong&gt;”—— 但正规的预制菜大锅饭也是能吃的 也一般吃不死人，不过最近一次发生在阿里云上的的故障让我改变了看法。&lt;/p&gt;
&lt;p&gt;我有一位客户L，这两天跟我吐槽了一个在云数据库上遇到的离谱连环故障：一套高可用 PG RDS 集群，因为扩容个内存，主库从库都挂了，给他们折腾到凌晨。期间建议昏招迭出，给出的复盘也相当敷衍。经过客户L同意后，我将这个案例分享出来，也供大家借鉴参考品评。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#事故经过匪夷所思&#34;&gt;事故经过：匪夷所思&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#内存扩容无事生非&#34;&gt;内存扩容：无事生非&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#从库宕机素养堪忧&#34;&gt;从库宕机：素养堪忧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#主库宕机令人窒息&#34;&gt;主库宕机：令人窒息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#wal堆积专家缺位&#34;&gt;WAL堆积：专家缺位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#扩容磁盘创收有术&#34;&gt;扩容磁盘：创收有术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#协议赔偿封口药丸&#34;&gt;协议赔偿：封口药丸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#解决方案下云自建&#34;&gt;解决方案：下云自建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/zh/blog/cloud/rds-failure/#广告时间专家咨询&#34;&gt;广告时间：专家咨询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;事故经过匪夷所思&#34;&gt;事故经过：匪夷所思&lt;/h2&gt;
&lt;p&gt;客户L的数据库场景比较扎实，大几TB的数据，TPS两万不到，写入吞吐8000行/每秒，读取吞吐7万行/s。用的是 ESSD PL1 ，16c 32g 的实例，一主一备高可用版本，独享型规格族，年消费六位数。&lt;/p&gt;
&lt;p&gt;整个事故经过大致如下：客户L收到 &lt;strong&gt;内存告警&lt;/strong&gt;，提工单，接待的售后工程师诊断：数据量太大，大量行扫描导致内存不足，建议扩容内存。客户同意了，然后工程师扩容内存，扩内存花了三个小时，&lt;strong&gt;期间主库和从库挂了&lt;/strong&gt;，吭哧吭哧手工一顿修。&lt;/p&gt;
&lt;p&gt;然后扩容完了之后又遇到 &lt;strong&gt;WAL日志堆积&lt;/strong&gt; 的问题，堆了 800 GB 的WAL日志要把磁盘打满了，又折腾了两个小时到十一点多。售后说是 WAL 日志归档上传失败导致的堆积，失败是因为磁盘IO吞吐被占满，建议扩容 ESSD PL2。&lt;/p&gt;
&lt;p&gt;吃过了内存扩容翻车的教训，这次扩容磁盘的建议客户没立即买单，而是找我咨询了下，我看了一下这个故障现场，感觉到匪夷所思：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你这负载也挺稳定的，没事扩容内存干啥？&lt;/li&gt;
&lt;li&gt;RDS 不是号称弹性秒级扩容么，怎么升个内存花三个小时？&lt;/li&gt;
&lt;li&gt;花三个小时就算了，扩个容怎么还把主库从库都搞挂了呢？&lt;/li&gt;
&lt;li&gt;从库挂了据说是参数没配对，那就算了，那主库是怎么挂了的？&lt;/li&gt;
&lt;li&gt;主库挂了高可用切换生效了吗？怎么 WAL 又怎么开始堆积了？&lt;/li&gt;
&lt;li&gt;WAL 堆积是有地方卡住了，建议你升级云盘等级/IOPS有什么用？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事后也有一些来自乙方的解释，听到后我感觉更加匪夷所思了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从库挂是因为参数配错拉不起来了&lt;/li&gt;
&lt;li&gt;主库挂是因为 “为了避免数据损坏做了特殊处理”&lt;/li&gt;
&lt;li&gt;WAL堆积是因为卡BUG了，还是客户侧发现，推断并推动解决的&lt;/li&gt;
&lt;li&gt;卡 BUG “据称” 是因为云盘吞吐打满了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的朋友瑞典马工一贯主张，“&lt;a href=&#34;https://mp.weixin.qq.com/s/PqCD80H927s0yJrBr4QQqw&#34;&gt;用云数据库可以替代DBA&lt;/a&gt;”。
我认为在理论上有一定可行性 —— 由云厂商组建一个专家池，提供&lt;a href=&#34;/zh/blog/cloud/dba-vs-rds&#34;&gt;DBA时分共享服务&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但现状很可能是：&lt;strong&gt;云厂商没有合格的 DBA，不专业的工程师甚至会给你出馊主意，把跑得好好的数据库搞坏，最后赖到资源不足上，再建议你扩容升配好多赚一笔。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在听闻这个案例之后，马工也只能无奈强辩：“&lt;strong&gt;辣鸡RDS不是真RDS&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wechat-magong.png&#34; src=&#34;/zh/blog/cloud/rds-failure/wechat-magong.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;内存扩容无事生非&#34;&gt;内存扩容：无事生非&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;资源不足是一种常见的故障原因，但也正因如此，有时会被滥用作为推卸责任，甩锅，或者要资源，卖硬件的万金油理由。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存告警 OOM 也许对其他数据库是一个问题，但对于 PostgreSQL 来说非常离谱。我从业这么多年来，见识过各种各样的故障：数据量大撑爆磁盘我见过，查询多打满CPU我见过，内存比特位反转腐坏数据我见过，但因为独占PG因为读查询多导致内存告警，我没见过。&lt;/p&gt;
&lt;p&gt;PostgreSQL 使用双缓冲，OLTP实例在使用内存时，页面都放在一个尺寸固定的 SharedBuffer 中。作为一个 &lt;strong&gt;众所周知的最佳实践&lt;/strong&gt;，PG SharedBuffer 配置通常为物理内存的 1/4 左右，剩下的内存由文件系统 Cache 使用。也就是说通常有六七成的内存是由操作系统来灵活调配的，不够用逐出一些 Cache 就好了。如果说因为读查询多导致内存告警，我个人认为是匪夷所思的。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;memory.png&#34; src=&#34;/zh/blog/cloud/rds-failure/memory.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以，因为一个本来不一定是问题的问题（假告警？），RDS 售后工程师给出的建议是：&lt;em&gt;内存不够啦，请扩容内存&lt;/em&gt;。客户相信了这个建议，选择将内存翻倍。&lt;/p&gt;
&lt;p&gt;按道理，云数据库宣传自己的极致弹性，灵活伸缩，还是用 &lt;a href=&#34;/zh/blog/db/pg-in-docker/&#34;&gt;Docker&lt;/a&gt; 管理的。难道不应该是原地改一下 MemLimit 和 PG SharedBuffer 参数，重启一下就生效的吗？几秒还差不多。结果这次扩容却折腾了三个小时才完成，并引发了一系列次生故障。&lt;/p&gt;
&lt;p&gt;内存不足，两台32G扩64G，按照《&lt;a href=&#34;/zh/blog/cloud/ecs/#%E5%AE%9E%E4%BE%8B%E6%97%8F%E5%AF%B9%E4%BB%B7%E6%A0%BC%E7%9A%84%E5%BD%B1%E5%93%8D&#34;&gt;剖析阿里云服务器算力成本&lt;/a&gt;》我们精算过的定价模型，一项内存扩容操作每年带来的额外收入就能有万把块。如果能解决问题那还好说，但事实上这次内存扩容不但没有解决问题，还引发了更大的问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;从库宕机素养堪忧&#34;&gt;从库宕机：素养堪忧&lt;/h2&gt;
&lt;p&gt;第一个因为内存扩容而发生的次生故障是这样的，备库炸了，为什么炸了，因为PG参数没配置正确：&lt;code&gt;max_prepared_transaction&lt;/code&gt;，这个参数为什么会炸？因为在一套 PG 集群中，这个参数必须在主库和从库上保持一致，否则从库就会拒绝启动。&lt;/p&gt;
&lt;p&gt;为什么这里出现了主从参数不一致的问题？&lt;strong&gt;我推测&lt;/strong&gt; 是因为 RDS 的设计中，该参数的值是与实例内存成正比设置的，所以内存扩容翻倍后这个参数也跟着翻倍。主从不一致，然后从库重启的时候就拉不起来了。&lt;/p&gt;
&lt;p&gt;不管怎样，因为这个参数翻车是一个非常离谱的错误，属于 PG DBA 101 问题，PG文档明确强调了这一点。但凡做过滚动升降配这种基操的 DBA，要么已经在读文档的时候了解过这个问题，要么就在这里翻过车再去看文档。&lt;/p&gt;
&lt;p&gt;如果你用 &lt;code&gt;pg_basebackup&lt;/code&gt; 手搓从库，你不会遇到这个问题，因为从库的参数默认和主库一致。如果你用成熟的高可用组件，也不会遇到这个问题：开源PG高可用组件 Patroni 就会强制控制这几个参数并在文档中&lt;a href=&#34;https://patroni.readthedocs.io/en/latest/patroni_configuration.html#important-rules&#34;&gt;显眼地告诉用户&lt;/a&gt;：这几个参数主从必须一致，我们来管理不要瞎改。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;patroni.png&#34; src=&#34;/zh/blog/cloud/rds-failure/patroni.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在一种情况下你会遇到这种问题：考虑不周的家酿高可用服务组件，或未经充分测试的自动化脚本，&lt;strong&gt;自以为是地替你“优化”了这个参数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;主库宕机令人窒息&#34;&gt;主库宕机：令人窒息&lt;/h2&gt;
&lt;p&gt;如果说从库挂了，影响一部分只读流量那也就算了。主库挂了，对于客户L这种全网实时数据上报的业务可就要血命了。关于主库宕机，工程师给出的说法是：在扩容过程中，因为事务繁忙，主从复制延迟一直追不上，“&lt;strong&gt;为了避免数据损坏做了特殊处理&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这里的说法语焉不详，但按字面与上下文理解的意思应当为：扩容时需要做主从切换，但因为有不小的主从复制延迟，直接切换会丢掉一部分尚未复制到从库上的数据，所以RDS替你把主库流量水龙头关掉了，追平复制延迟后再进行主从切换。&lt;/p&gt;
&lt;p&gt;老实说，我觉得这个操作让人窒息。主库 Fencing 确实是高可用中的核心问题，但一套正规的生产 PG 高可用集群在处理这个问题时，标准SOP是首先将集群临时切换到同步提交模式，然后执行 Switchover，自然一条数据也不会丢，切换也只会影响在这一刻瞬间执行的查询，亚秒级闪断。&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;为了避免数据损坏做了特殊处理&lt;/strong&gt;” 这句话确实很有艺术性 —— 没错，把主库直接关掉可以实现 Fencing ，也确实不会在高可用切换时因为复制延迟丢数据，&lt;strong&gt;但客户数据写不进去了啊&lt;/strong&gt;！这丢的数据可比那点延迟多多了。这种操作，很难不让人想起那个著名的《&lt;a href=&#34;https://www.gushiwen.cn/shiwenv_ddbe67aad03d.aspx&#34;&gt;善治伛者&lt;/a&gt;》笑话：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tuobei.png&#34; src=&#34;/zh/blog/cloud/rds-failure/tuobei.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wal堆积专家缺位&#34;&gt;WAL堆积：专家缺位&lt;/h2&gt;
&lt;p&gt;主从宕机的问题修复后，又折腾一个半小时，总算是把主库内存扩容完成了。然而一波未平一波又起，WAL日志又开始堆积起来，在几个小时内就堆积到了近 800 GB，如果不及时发现并处理，撑爆磁盘导致整库不可用是早晚的事。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wal-jam.jpg&#34; src=&#34;/zh/blog/cloud/rds-failure/wal-jam.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以从监控上看到两个坑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RDS 工程师给出的诊断是，磁盘 IO 打满导致 WAL 堆积，建议升级磁盘，从 ESSD PL1 升级到 PL2。不过，这一次客户已经吃过一次内存扩容的教训了，没有立刻听信这一建议，而是找到了我咨询。&lt;/p&gt;
&lt;p&gt;我看了情况后感觉非常离谱，负载没有显著变化，IO打满也不是这种卡死不动的情形。那么 WAL 堆积的原因不外乎那几个：复制延迟落后100多GB，复制槽保留了不到1GB，那剩下的大头就是 &lt;strong&gt;WAL归档失败&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我让客户给 RDS 提工单处理找根因，最后 RDS 侧确实找到问题是WAL归档卡住了并手工解决了，但距离 WAL 堆积已经过去近六个小时了，并在整个过程中体现出非常业余的素养，给出了许多离谱的建议。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wal.png&#34; src=&#34;/zh/blog/cloud/rds-failure/wal.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另一个离谱建议：把流量打到复制延迟16分钟的从库上去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;阿里云数据库团队并非没有 PostgreSQL DBA 专家，在阿里云任职的 德哥 Digoal 绝对是 PostgreSQL DBA 大师。然而看起来在 RDS 的产品设计中，并没有沉淀下多少 DBA 大师的领域知识与经验；而 RDS 售后工程师表现出来的专业素养，也与一个合格的 PG DBA ，哪怕是 GPT4 机器人都相差甚远。&lt;/p&gt;
&lt;p&gt;我经常看到 RDS 的用户遇到了问题，通过官方工单没有得到解决，只能绕过工单，通过在 PG 社区中 &lt;a href=&#34;/zh/blog/cloud/drop-rds/&#34;&gt;直接求助德哥解决&lt;/a&gt; —— 而这确实是比较考验运气与关系的一件事。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;扩容磁盘创收有术&#34;&gt;扩容磁盘：创收有术&lt;/h2&gt;
&lt;p&gt;在解决了“内存告警”， “从库宕机”， “主库宕机”， “WAL 堆积” 等连环问题后，已经接近凌晨了。但 WAL 堆积的根因是什么仍然不清楚，工程师的回复是 “&lt;strong&gt;与磁盘吞吐被打满有关&lt;/strong&gt;”，再次建议升级 ESSD 云盘。&lt;/p&gt;
&lt;p&gt;在事后的复盘中，工程师提到了 WAL归档失败的原因是 “&lt;strong&gt;RDS上传组件BUG&lt;/strong&gt;”。所以回头看，如果客户真的听了建议升级云盘，也就就白花冤枉钱了。&lt;/p&gt;
&lt;p&gt;在 《&lt;a href=&#34;/zh/blog/cloud/ebs&#34;&gt;云盘是不是杀猪盘&lt;/a&gt;》中我们分析过，云上溢价最狠的基础资源就是 ESSD 云盘。按照 《&lt;a href=&#34;/zh/blog/cloud/ecs#%E6%9D%80%E7%8C%AA%E7%9B%98%E7%9A%84%E4%BB%B7%E6%A0%BC&#34;&gt;阿里云存算成本剖析&lt;/a&gt;》中给出的数字：客户 5TB 的 ESSD PL1 云盘包月价格 &lt;strong&gt;1 ¥/GB&lt;/strong&gt;，那么每年光是云盘费用就要 &lt;strong&gt;12万&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;单位价格：¥/GiB月&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;IOPS&lt;/th&gt;
&lt;th&gt;带宽&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;容量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;按需价格&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;包月价格&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;包年价格&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;预付三年+&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ESSD 云盘 PL0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10K&lt;/td&gt;
&lt;td&gt;180 MB/s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;40G-32T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.76&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.50&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.43&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ESSD 云盘 PL1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50K&lt;/td&gt;
&lt;td&gt;350 MB/s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20G-32T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.51&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.85&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ESSD 云盘 PL2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100K&lt;/td&gt;
&lt;td&gt;750 MB/s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;461G-32T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3.02&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.70&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ESSD 云盘 PL3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1M&lt;/td&gt;
&lt;td&gt;4 GB/s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.2T-32T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6.05&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3.40&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;本地 NVMe SSD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3M&lt;/td&gt;
&lt;td&gt;7 GB/s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;最大单卡64T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;0.02&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.02&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.02&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.02&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果听从建议 “升级”到 ESSD PL2，没错 IOPS 吞吐能翻一倍，但单价也翻了一倍。单这一项“升级”操作，&lt;strong&gt;就能给云厂商带来额外 12 万的收入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;即使是 ESSD PL1 乞丐盘，也带有 50K 的 IOPS，而客户L场景的 20K TPS，80K RowPS 换算成 随机4K 页面 IOPS ，就算退一万步讲不考虑 PG 与 OS 的缓冲区（比如 99% 缓存命中率对于这种业务场景是很正常的），想硬打满它也是一件相当不容易的事情。&lt;/p&gt;
&lt;p&gt;我不好判断遇到问题就建议 扩容内存 / 扩容磁盘 这样的做法，到底是出于专业素养不足导致的误诊，还是渴望利用信息不对称创收的邪念，抑或两者兼而有之 —— 但这种趁病要价的做法，确实让我联想起了曾经声名狼藉的莆田医院。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;协议赔偿封口药丸&#34;&gt;协议赔偿：封口药丸&lt;/h2&gt;
&lt;p&gt;在《&lt;a href=&#34;/zh/blog/cloud/sla&#34;&gt;云SLA是不是安慰剂&lt;/a&gt;》一文中，我已提醒过用户：云服务的 SLA 根本不是对服务质量的承诺，&lt;strong&gt;在最好的情况下它是提供情绪价值的安慰剂，而在最坏的情况下它是吃不了兜着走的哑巴亏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在这次故障中，客户L收到了 &lt;strong&gt;1000&lt;/strong&gt; 元代金券的补偿提议，对于他们的规模来说，这三瓜两枣差不多能让这套 RDS 多跑几天。在用户看来这基本上属于赤裸裸的羞辱了。&lt;/p&gt;
&lt;p&gt;有人说云提供了“&lt;strong&gt;背锅&lt;/strong&gt;”的价值，但那只对不负责的决策者与大头兵才有意义，对于直接背结果的 CXO 来说，整体性的得失才是最重要的，把业务连续性中断的锅甩给云厂商，换来一千块代金券没有任何意义。&lt;/p&gt;
&lt;p&gt;当然像这样的事情其实不止一次，两个月前客户L还遇到过另一次离谱的从库宕机故障 —— 从库宕机了，然后控制台上监控根本看不到，客户自己发现了这个问题，提了工单，发起申诉，还是 &lt;strong&gt;1000¥&lt;/strong&gt; SLA 安慰补偿。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;docker.jpg&#34; src=&#34;/zh/blog/cloud/rds-failure/docker.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然这还是因为客户L的技术团队水平在线，有能力自主发现问题并主动发出声索。如果是那种技术能力接近零的小白用户，也许就这么拖着瞒着 &lt;a href=&#34;https://mp.weixin.qq.com/s/mgkOybNeEH3LO0gRa1rQBQ&#34;&gt;糊弄过去了&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;还有那种 “SLA” 根本不管的问题 —— 例如也是客户L再之前的一个案例（原话引用）：“&lt;em&gt;为了折扣要迁移到另一个新的阿里云账号，新账号起了个同配置的 RDS 逻辑复制，复制了近1个月数据都没同步完，让我们直接放弃新账号迁移，导致浪费几万块钱。&lt;/em&gt;” —— 属实是花钱买罪受了，而且根本没地方说理去。&lt;/p&gt;
&lt;p&gt;经过几次故障带来的糟心体验，客户L终于在这次事故后难以忍受，拍板决定下云了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解决方案下云自建&#34;&gt;解决方案：下云自建&lt;/h2&gt;
&lt;p&gt;客户L在几年前就有下云的计划了，在 IDC 里弄了几台服务器，用 Pigsty 自建搭建了几套 PostgreSQL 集群，作为云上的副本双写，跑得非常不错。但要把云上 RDS 下掉，还是免不了要折腾一下，所以一直也就这样两套并行跑着。包括此次事故之前的多次糟心体验，最终让客户L做了下云的决断。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty.webp&#34; src=&#34;/zh/blog/cloud/rds-failure/pigsty.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户L直接下单加购了四台新服务器，以及 8块 Gen4 15TB NVMe SSD。特别是这里的 NVMe 磁盘，IOPS 性能是云上 ESSD PL1 乞丐盘的整整 &lt;strong&gt;20倍&lt;/strong&gt;（1M vs 50K），而 TB·月 单位价格则是云上的 &lt;strong&gt;1/166&lt;/strong&gt;  （1000¥ vs 6¥）。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;procurement.png&#34; src=&#34;/zh/blog/cloud/rds-failure/procurement.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话：6块钱TB月价，我只在黑五打折的 Amazon 上看到过。125 TB 才 44K ¥（全新总共再加 9.6K ¥），，果然是术业有专攻，经手了过亿采购的成本控制大师。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如在《&lt;a href=&#34;/zh/blog/cloud/odyssey#02-22-%E6%8C%87%E5%AF%BC%E4%B8%8B%E4%BA%91%E7%9A%84%E4%BA%94%E6%9D%A1%E4%BB%B7%E5%80%BC%E8%A7%82&#34;&gt;下云奥德赛：是时候放弃云计算了吗&lt;/a&gt;》 中 DHH 所说的那样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我们明智地花钱：在几个关键例子上，云的成本都极其高昂 —— 无论是&lt;strong&gt;大型物理机数据库、大型 NVMe 存储，或者只是最新最快的算&lt;/strong&gt;力。租生产队的驴所花的钱是如此高昂，以至于几个月的租金就能与直接购买它的价格持平。在这种情况下，你应该直接直接把这头驴买下来！我们将把我们的钱，花在我们自己的硬件和我们自己的人身上，其他的一切都会被压缩。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对客户L来说，下云带来的好处是立竿见影的：只需要 RDS 几个月费用的&lt;strong&gt;一次性投资&lt;/strong&gt;，就足够超配几倍到十几倍的硬件资源，重新拿回&lt;a href=&#34;/zh/blog/cloud/bonus&#34;&gt;硬件发展的红利&lt;/a&gt;，&lt;a href=&#34;/zh/blog/cloud/finops&#34;&gt;实现惊人的降本增效水平&lt;/a&gt; —— &lt;strong&gt;你不再需要对着账单抠抠搜搜，也不用再发愁什么资源不够&lt;/strong&gt;。这确实是一个值得思考的问题：如果云下资源单价变为十分之一甚至百分之几，那么云上鼓吹的弹性还剩多大意义？而阻止云上用户下云自建的原因又会是什么呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下云自建 RDS 服务最大的挑战其实是人与技能&lt;/strong&gt;，客户L已经有着一个技术扎实的团队，但确实缺少在 PostgreSQL 上的专业知识与经验。这也是客户L之所以愿意为 RDS 支付高溢价的一个核心原因。但 RDS 在几次事故中体现出来的专业素养，甚至还不如客户本身的技术团队强，这就让继续留在云上变得毫无意义。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;广告时间专家咨询&#34;&gt;广告时间：专家咨询&lt;/h2&gt;
&lt;p&gt;在下云这件事上， 我很高兴能为客户L提供帮助与支持。 &lt;a href=&#34;https://pigsty.cc/zh/&#34;&gt;Pigsty&lt;/a&gt; 是沉淀了我作为顶级 PG DBA 领域知识与经验的开源 RDS &lt;a href=&#34;/zh/blog/cloud/dba-vs-rds#dba%E7%9A%84%E5%B7%A5%E4%BD%9C%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E6%8E%A7&#34;&gt;自建工具&lt;/a&gt;，已经帮助无数世界各地的用户自建了自己的企业级 PostgreSQL 数据库服务。尽管它已经将开箱即用，扩展整合，监控系统，备份恢复，安全合规，IaC 这些运维侧的问题解决的很好了。但想要充分发挥 PostgreSQL 与 Pigsty 的完整实力，总归还是需要专家的帮助来落地。&lt;/p&gt;
&lt;p&gt;所以我提供了明码标价的 &lt;a href=&#34;/zh/docs/about/service&#34;&gt;&lt;strong&gt;专家咨询服务&lt;/strong&gt;&lt;/a&gt; —— 对于客户L这样有着成熟技术团队，只是缺乏领域知识的客户，我只收取固定的 &lt;strong&gt;5K ¥/月&lt;/strong&gt; 咨询费用，仅仅相当于半个初级运维的工资。但足以让客户放心使用比云上低一个数量级的硬件资源成本，自建更好的本地 PG RDS 服务 —— 而即使在云上继续运行 RDS，也不至于被“砖家”被嘎嘎割韭菜忽悠。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;subscription.png&#34; src=&#34;/zh/blog/cloud/rds-failure/subscription.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我认为&lt;strong&gt;咨询&lt;/strong&gt;是一种站着挣钱的体面模式：我没有任何动机去推销内存与云盘，或者说胡话兜售自己的产品（因为产品是开源免费的！）。所以我完全可以站在甲方立场上，给出对甲方利益最优的建议。甲乙双方都不用去干苦哈哈的数据库运维，因为这些工作已经被 Pigsty 这个我编写的开源工具完全自动化掉了。我只需要在零星的关键时刻提供专家意见与决策支持，并不会消耗多少精力与时间，却能帮助甲方实现原本全职雇佣顶级DBA专家才能实现的效果，最终实现双方共赢。&lt;/p&gt;
&lt;p&gt;但是我也必须强调，我提倡下云理念，从来都是针对那些&lt;strong&gt;有一定数据规模与技术实力&lt;/strong&gt;的客户，比如这里的客户L。如果您的场景落在云计算舒适光谱中（例如用 1C2G 折扣 MySQL 跑 OA ），也缺乏技术扎实或值得信赖的工程师，我会诚实地建议你不要折腾 —— 99 一年的 RDS 总比你自己的 yum install 强不少，还要啥自行车呢？当然针对这种用例，我确实建议你考虑一下 Neon，Supabase，Cloudflare 这些&lt;a href=&#34;/zh/blog/cloud/cloudflare&#34;&gt;赛博菩萨们&lt;/a&gt;的免费套餐，&lt;strong&gt;可能连一块钱都用不着&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而对于那些有一定规模，绑死在云数据库上被不断抽血的客户，你确实可以考虑另外一个选项：自建数据库服务绝非什么高深的火箭科学 —— &lt;strong&gt;你需要做的只是找到正确的工具与正确的人而已&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485745&amp;idx=4&amp;sn=93746ecea381afd8e2f9820447b09ec7&amp;chksm=fe4b3ceac93cb5fc44f33ffff226747bc317854acbb3882aeb0d9a7e196eeb5df002d0e77275&amp;scene=21#wechat_redirect&#34;&gt;云盘是不是杀猪盘？&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;云数据库是不是智商税httpmpweixinqqcoms__bizmzu5odayntm5ngmid2247485745idx5sna7d610ea37c3f3fa78ee4ba0ee705962chksmfe4b3ceac93cb5fc6f1975f94be04424e7b3690eedd1658951deb8d016f5f19ade8806d86417scene21wechat_redirect&#34;&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485745&amp;idx=5&amp;sn=a7d610ea37c3f3fa78ee4ba0ee705962&amp;chksm=fe4b3ceac93cb5fc6f1975f94be04424e7b3690eedd1658951deb8d016f5f19ade8806d86417&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;云数据库是不是智商税&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486688&amp;idx=1&amp;sn=bbdee063b65994cb5e15d3e3b7d87523&amp;chksm=fe4b393bc93cb02d76c48f0fbfe3d60c8821b8079b1cfc05f8ccc56c1351b4a7a76b5794019a&amp;scene=21#wechat_redirect&#34;&gt;扒皮云对象存储：从降本到杀猪&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487089&amp;idx=1&amp;sn=ca16c2e7e534380eadcb3a3870d8e3b4&amp;chksm=fe4b3baac93cb2bc8c4b68c468acf3e8ac5ee124080a3e738262fe99dd1765c3adf9c56ea650&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;剖析云算力成本，阿里云真的降价了吗？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486527&amp;idx=1&amp;sn=8e26f644f2b908fd21c83b81d329155d&amp;chksm=fe4b39e4c93cb0f22271127a154a6ac5c45947b2051b06b7667ee5c203d136b5d2e8f6577b10&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;从降本增笑到真的降本增效&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486468&amp;idx=1&amp;sn=7fead2b49f12bc2a2a94aae942403c22&amp;chksm=fe4b39dfc93cb0c92e5d4c67241de0519ae6a23ce6f07fe5411b95041accb69e5efb86a38150&amp;scene=21#wechat_redirect&#34;&gt;我们能从阿里云史诗级故障中学到什么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487926&amp;idx=1&amp;sn=2edbd59c845944dc9ba38021f42d1d63&amp;chksm=fe4b246dc93cad7b35b7517b489371eaa08244ec561359e0a610bc9f6f2aa11cf1e3c2b34fb3&amp;scene=21#wechat_redirect&#34;&gt;阿里云又挂了，这次是光缆被挖断了？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486590&amp;idx=1&amp;sn=d4d85de483fafb867487f024631a3e6c&amp;scene=21#wechat_redirect&#34;&gt;互联网故障背后的草台班子们&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486512&amp;idx=1&amp;sn=43d6340fce93bfbf5439cc2cd8e3b8dd&amp;chksm=fe4b39ebc93cb0fd192c69d9f589ccd36f1c1eb5d34fffc357cf0b8177c746c4b3445ea5f63a&amp;scene=21#wechat_redirect&#34;&gt;阿里云周爆：云数据库管控又挂了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486452&amp;idx=1&amp;sn=29cff4ee30b90483bd0a4f0963876f28&amp;chksm=fe4b3e2fc93cb739af6ce49cffa4fa3d010781190d99d3052b4dbfa87d28c0386f44667e4908&amp;scene=21#wechat_redirect&#34;&gt;【阿里】云计算史诗级大翻车来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487367&amp;idx=1&amp;sn=d6e4abd2b2249d27bd8b8146b591b026&amp;chksm=fe4b3a5cc93cb34a8e90e4b7f06803fa11ee8234014cd4f1aedff59e3bf3c846b3cb133090f2&amp;scene=21#wechat_redirect&#34;&gt;taobao.com证书过期&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487348&amp;idx=1&amp;sn=412cf2afcd93c3f0a83d65219c4a28e8&amp;chksm=fe4b3aafc93cb3b900cef33bd0510c7c86367d71877b0ee65d4847da0ae1298e2b1fd88d0b3f&amp;scene=21#wechat_redirect&#34;&gt;我们能从腾讯云故障复盘中学到什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487267&amp;idx=1&amp;sn=7d31d44e89560356b5c5a2e7a40bb1e1&amp;chksm=fe4b3af8c93cb3ee9b8000cd90a12a798395f67205d4ba5b0c77b8c5b6ce9ea448d9fc014921&amp;scene=21#wechat_redirect&#34;&gt;【腾讯】云计算史诗级二翻车来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487339&amp;idx=1&amp;sn=fce4c0d415d87026013169c737faeacb&amp;chksm=fe4b3ab0c93cb3a61bd2831fcad6dfb36419540e690420b1229053b1de2e3d3533a66f44fb4c&amp;scene=21#wechat_redirect&#34;&gt;云SLA是安慰剂还是厕纸合同？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487279&amp;idx=1&amp;sn=95231614887e129f298644ddc194909f&amp;chksm=fe4b3af4c93cb3e29078b4716d3b633246db8e2081acff8b821181c9ae058a0daf91e45a40b9&amp;scene=21#wechat_redirect&#34;&gt;腾讯云：颜面尽失的草台班子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485363&amp;idx=1&amp;sn=8622b25fd2309d4fc969d22964a04129&amp;scene=21#wechat_redirect&#34;&gt;垃圾腾讯云CDN：从入门到放弃&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247488183&amp;idx=1&amp;sn=955849e8698fadcea9211b2731456222&amp;chksm=fe4b276cc93cae7aeb43cc4128c9a18e7a5cb02721277cb61bba1e32b61a57ecdd18bd949277&amp;scene=21#wechat_redirect&#34;&gt;我们能从网易云音乐故障中学到什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247488151&amp;idx=1&amp;sn=556731d65228f07f443cfb27b5e7bd8b&amp;chksm=fe4b274cc93cae5ae1a32d423f2f7285eff3e184903d62182ad5f17c4772b4baf38b6a9c89c8&amp;scene=21#wechat_redirect&#34;&gt;GitHub全站故障，又是数据库上翻的车？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247488036&amp;idx=1&amp;sn=7bbcc3e8979a5f97a519a7a1684caa06&amp;chksm=fe4b27ffc93caee9701d4a94830417e281c5c08e345d12b007ebaca84dc79c3224b880d75f4c&amp;scene=21#wechat_redirect&#34;&gt;全球Windows蓝屏：甲乙双方都是草台班子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487552&amp;idx=1&amp;sn=799ae77dda3b80d2296070826142adea&amp;chksm=fe4b259bc93cac8da2cc20f864e5a8b62ecb6f5dd57e7435db1d3fb2f2864a5d991b3a016358&amp;scene=21#wechat_redirect&#34;&gt;删库：Google云爆破了大基金的整个云账户&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487536&amp;idx=1&amp;sn=0cd598f426de0b617c7f3318aed9bd95&amp;chksm=fe4b25ebc93cacfd2d96a9704a0ae4dc2d330aee7cd4579641df513edce307ccdd3a9f94736e&amp;scene=21#wechat_redirect&#34;&gt;云上黑暗森林：打爆AWS云账单，只需要S3桶名&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487617&amp;idx=1&amp;sn=090b10e96e7e64c0ab0c5deb0cbb46ed&amp;chksm=fe4b255ac93cac4cb270be6091ca6e1257afaa03d50c53316ce82a2be6150151f6077e07e9da&amp;scene=21#wechat_redirect&#34;&gt;Ahrefs不上云，省下四亿美元&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487400&amp;idx=1&amp;sn=cf5b94165d2791030e0e874dca8383c7&amp;chksm=fe4b3a73c93cb3652df4d53316e554e5bd0a0d659c7cad7214e10c4a9892d8d1a679e2187583&amp;scene=21#wechat_redirect&#34;&gt;赛博菩萨Cloudflare圆桌访谈与问答录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487184&amp;idx=1&amp;sn=afa93b16ae95dba95d99a87ef6ff7605&amp;chksm=fe4b3b0bc93cb21d07adb10713c1061a53b6438a5db0bd93a2e7a0f11ea365ba3d24ae02d13d&amp;scene=21#wechat_redirect&#34;&gt;Redis不开源是“开源”之耻，更是公有云之耻&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487240&amp;idx=1&amp;sn=ba535fd0c1026bc2482ea6ad1e1fb8bf&amp;chksm=fe4b3ad3c93cb3c50bfeaed64963cce25c49bee80364d3a8ca78b87d7c9f19fd4d79d3c62ddc&amp;scene=21#wechat_redirect&#34;&gt;吊打公有云的赛博佛祖 Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485760&amp;idx=1&amp;sn=97096da1077a4fbb4c43452a3c4983c7&amp;scene=21#wechat_redirect&#34;&gt;下云奥德赛&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485745&amp;idx=1&amp;sn=6109bb1be67f9e7e02124c4fc3b47ea3&amp;scene=21#wechat_redirect&#34;&gt;FinOps终点是下云&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485601&amp;idx=1&amp;sn=5521562d414b547a192b3dbc45ce720f&amp;scene=21#wechat_redirect&#34;&gt;云SLA是不是安慰剂？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485629&amp;idx=1&amp;sn=7ec768fac5905b0c7052e7b3a6825c4e&amp;scene=21#wechat_redirect&#34;&gt;云计算为啥还没挖沙子赚钱？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486489&amp;idx=1&amp;sn=f2be1be496de46ac5ca816ac39cfdf24&amp;scene=21#wechat_redirect&#34;&gt;重新拿回计算机硬件的红利&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485301&amp;idx=1&amp;sn=2fb038f8b9f26c095d97eb0d87e8b262&amp;scene=21#wechat_redirect&#34;&gt;范式转移：从云到本地优先&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486366&amp;idx=1&amp;sn=c28407399af8b1ddeadf93e902ed23cc&amp;scene=21#wechat_redirect&#34;&gt;是时候放弃云计算了吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247487111&amp;idx=1&amp;sn=f02c3a7fc8ba9cc0919518b3c5805675&amp;chksm=fe4b3b5cc93cb24a71d0847bcd7f1655f7466f7f7864457413d3ca80cd79df974b7b9279b9e9&amp;scene=21#wechat_redirect&#34;&gt;RDS阉掉了PostgreSQL的灵魂&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486903&amp;idx=1&amp;sn=01c57499f41e8f51045bb8dd52586595&amp;chksm=fe4b386cc93cb17a2d2fad903e809107162cc1e67e8ad7c8bfdd51de657c97f32f912cabe550&amp;scene=21#wechat_redirect&#34;&gt;DBA会被云淘汰吗？&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 驳《再论为什么你不应该招DBA》</title>
      <link>/zh/blog/cloud/no-dba-bullshit/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/no-dba-bullshit/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/no-dba-bullshit/featured_hu153a1c3af7df4b579cf23128ba8cc4b8_139490_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;郭德纲有一段相声：比如我和火箭专家说，你那火箭不行，燃料不好，我认为得烧柴，最好是烧煤，煤还得精选煤，水洗煤不行。如果那科学家拿正眼看我一眼，那他就输了。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但不管怎么说，马工也还是一位体面的瑞典研发工程师。没有做过DBA就敢大放厥词，开地图炮拉仇恨，实在勇气可嘉。之前在《&lt;a href=&#34;https://mp.weixin.qq.com/s/PqCD80H927s0yJrBr4QQqw&#34;&gt;你怎么还在招聘DBA&lt;/a&gt;》，以及回应文《&lt;a href=&#34;/zh/blog/cloud/rds&#34;&gt;云数据库是不是智商税&lt;/a&gt;》中，我们便已交锋过。&lt;/p&gt;
&lt;p&gt;当别人把屎盆子扣在这个行业所有人头上时，还是需要人来站出来说几句的。因此今天特此撰文以驳斥马工的谬论：《&lt;a href=&#34;https://mp.weixin.qq.com/s/CMRrqI2yBWlNbACHpNgL1g&#34;&gt;再论为什么你不应该招DBA&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/CMRrqI2yBWlNbACHpNgL1g&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/no-dba-bullshit/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;马工的论点有三：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DBA妨碍了研发交付新特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBA威胁了企业数据安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人工DBA需要被基于代码的软件所取代&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;我的看法是：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一点属于无效输出，DBA本来就是在稳定性侧制衡研发的存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二点则是完全扯淡，DBA本来就是类似于财务的关健岗位，需要信任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三点属于部分事实，但严重高估了短期变化，且云数据库并非唯一的路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;且听我一一道来：&lt;/p&gt;
&lt;h3 id=&#34;dba-对稳定性负责&#34;&gt;DBA 对稳定性负责&lt;/h3&gt;
&lt;p&gt;关于信息系统的一个基本原理是：&lt;strong&gt;安全性与活性相互抵触&lt;/strong&gt;，过于强调安全稳定，则活性受损；过于强调活性，则难以稳定。任何组织都要在两者中间找到一个&lt;strong&gt;平衡&lt;/strong&gt;点。而研发与运维，就是两者的职能化身。&lt;/p&gt;
&lt;p&gt;研发对新功负责，而 SRE/DBA 对稳定性负责，一个开创，一个守成，两者相互协作，但也是相互制衡。马工作为研发，特别还是创业公司的研发，主张功能活性很重要，从立场上来说是无可厚非的。但在更广大的组织中，&lt;strong&gt;稳定性的地位往往是高于新功能的&lt;/strong&gt;，成熟的组织如银行，大型互联网平台，从来都是&lt;strong&gt;稳定性压倒一切&lt;/strong&gt;。毕竟，新功能的收益是不确定的，而大故障的损失是肉眼可见的。每天发10个新版本不见得能带来多少增长，但一次大故障也许就能让几个月的努力付之东流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“在高速上开两百迈的阻碍从来都不是车的性能，而是司机的胆量”&lt;/strong&gt;。站在更高位的管理者角度来说，马工强调的 &lt;em&gt;“开掉DBA得到更快的DB交付速度”&lt;/em&gt;，纯粹属于研发者的一厢情愿：用云把运维职能外包出去， 无人制衡，我想怎样就怎样。&lt;strong&gt;这样的想法如果落地，最终必将在某个时刻以惨痛的教训收场。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者曾是 DBA，但也没少干  Dev。关于研发和 DBA 的心态，都有亲身的体会。我在刚入行当研发的时候，在“PostgreSQL数据库里”跑神经网络，推荐系统，Web服务器和爬虫，用FDW接了 MongoDB 和 HBase以及一堆外部系统，什么稳定性？跑的不是挺好吗？直到没有运维与DBA愿意接手维护，我不得不亲自干起了 DBA 的活自己狗食背起锅来，才能设身处地的对DBA / 运维有同理心，谨慎选择有所为有所不为。&lt;/p&gt;
&lt;h3 id=&#34;交付速度谁在乎&#34;&gt;交付速度谁在乎？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;评价一款数据库需要从许多维度出发：稳定性，可靠性，安全性，简单性，可伸缩性，可扩展性，可观测性，可维护性，成本性价比&lt;/strong&gt;，等等等等。&lt;strong&gt;交付速度&lt;/strong&gt;这件事勉强属于“可伸缩性”里一个比较次要的附属维度，在数据库系统需要关注的属性中，&lt;strong&gt;压根排不上号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;更重要的是，&lt;strong&gt;性价比才是第一产品力&lt;/strong&gt;，&lt;strong&gt;对比方案却对成本闭而不提，是一种耍流氓的行为&lt;/strong&gt;。笔者对研发人员的这种心理非常了解：&lt;strong&gt;花的是公司的钱，省的是自己事儿，自然没有几个人会有动机为公司去省钱&lt;/strong&gt;。你的数据库花半个小时交付，还是花三四天交付，老板与领导不会 Care 这些。但是，你的老板会很在乎你花30分钟拉起了一个数据库，然后每个月账单多出来几十万元。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;meme.png&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-meme.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 AWS 上 64核256GB的 &lt;code&gt;db.m5.16xlarge&lt;/code&gt; RDS 为例，用一个月价格 $25,817 / 月，折合约 18 万元人民币，一个月的租金，够你把两台性能比这还要好的多得多的服务器直接买下来了，任何理智的企业用户都看得明白这里面的道理：&lt;strong&gt;如果采购这种服务不是为了短期的，临时性的需求，那么绝对算得上是&lt;strong&gt;&lt;strong&gt;重大的财务失当行为&lt;/strong&gt;&lt;/strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;比交付速度也不怵&#34;&gt;比交付速度也不怵&lt;/h3&gt;
&lt;p&gt;但即使我们退一万步讲，交付速度真的重要，马工的论证用例也是破绽百出。&lt;/p&gt;
&lt;p&gt;马工假想了一个数据库上线的案例：PG新版本，两地三中心，同城HA，异地灾备，数据加密，自动备份，自带监控，App与DB独立网段，DBA也无法删库。然后得意洋洋的宣称：”使用 Terraform，我只要28分钟就可以完成满足需要的配置！比拉DBA搭建数据库快几个数量级！“&lt;/p&gt;
&lt;p&gt;实际上只要你的机器就绪，网络打通，规划完毕：使用 Pigsty 部署一套满足这些需求的数据库系统，执行耗时也就是十几分钟。自建机房且不提，Pigsty 完全可以使用同样的逻辑：基于Terraform 一键拉起EC2、存储、网络，然后在这个基础上额外执行一条命令&lt;a href=&#34;https://github.com/Vonng/pigsty/blob/master/terraform/spec/aws-cn.tf&#34;&gt;部署数据库&lt;/a&gt;，耗费的时间说不定比 Terraform 还短一点，更重要的是，&lt;strong&gt;还能省掉百分之八九十的天价 RDS &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485292&amp;idx=1&amp;sn=4f650c3f5c3fb5207c55ff67e44d7d8a&amp;chksm=fe4b32b7c93cbba190e60d477061d19a165e1f9b074beb00b132ae1369a9fd2c7d10ed77a013&amp;scene=21#wechat_redirect&#34;&gt;智商税&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;price.jpeg&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-price.jpeg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能想出这种定价的云数据库产品经理脑袋一定被门夹了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;分库分表的稻草人靶子&#34;&gt;分库分表的稻草人靶子&lt;/h3&gt;
&lt;p&gt;马工提出，分库分表是DBA自抬身价的一种工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在今天，数据库的能力已经得到了极大的发展，给应用开发者带来巨大管理成本的分库分表已经没必要了。凡是在用分库分表的系统， 都可以用分布式数据库或者NoSQL数据库替换掉。几乎可以说，分库分表不过是DBA自抬身价的一种工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时至今日，&lt;strong&gt;硬件存储技术的发展已经让很多老同志跟不上新形势了&lt;/strong&gt;。家用 PCI-E NVME SSD 2TB的价格已经进入了三位数，常用的企业级 3.2TB MLC NVME SSD也不过六七千，最大几十TB的单卡容量，已经完爆了很多中大型企业的所有 TB 数据量，七位数的IOPS让几千/几万IOPS还卖天价的 云 EBS 恨不得找个地缝钻进去。&lt;/p&gt;
&lt;p&gt;软件方面，以 PostgreSQL 为例，使用堆表存储的单表容量十几TB千亿量级数据一点儿不成问题，还有 Citus 插件可以原地改造为分布式数据库。各种分布式数据库的卖点也是 “不用分库分表”。这都已经是老黄历问题了。除了极个别场景，恐怕也只有原教旨 MySQL 用户还守着 “单表不能超过 2000w 记录” 去玩分表了。&lt;/p&gt;
&lt;p&gt;当然，分布式数据库对于 DBA 的水平要求&lt;strong&gt;不会更低只会更高&lt;/strong&gt;；所以这里马工主要想说的还是 NoSQL ，更具体的讲，就是 DynamoDB 这种所谓“不需要” DBA运维的数据库直接干翻 DBA。不过，一个平均延迟在 10ms 的数据库，一个抽象程度只是等同于文件系统的扁平 KV 存储的数据库，光是杀猪程度要比 RDS 还要狠毒的 RCU / WCU 计费方式，就足够用户喝上一壶，有何德何能敢标榜自己能替掉 DBA ？&lt;/p&gt;
&lt;h2 id=&#34;指望用nosql替代dba是做梦&#34;&gt;指望用NoSQL替代DBA是做梦&lt;/h2&gt;
&lt;p&gt;互联网应用大多属于&lt;strong&gt;数据密集型应用&lt;/strong&gt;，对于真实世界的数据密集型应用而言，除非你准备从基础组件的轮子造起，不然根本没那么多机会去摆弄花哨的数据结构和算法。实际生产中，&lt;strong&gt;数据表就是数据结构，索引与查询就是算法&lt;/strong&gt;。而应用研发写的代码往往扮演的是&lt;strong&gt;胶水&lt;/strong&gt;的角色，处理IO与业务逻辑，其他大部分工作都是&lt;strong&gt;在数据系统之间搬运数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在最宽泛的意义上，&lt;strong&gt;有状态的地方就有数据库&lt;/strong&gt;。它无所不在，网站的背后、应用的内部，单机软件，区块链里。有。&lt;strong&gt;关系型数据库只是数据系统的冰山一角&lt;/strong&gt;（或者说冰山之巅），实际上存在着各种各样的数据系统组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：存储数据，以便自己或其他应用程序之后能再次找到（PostgreSQL，MySQL，Oracle）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：记住开销昂贵操作的结果，加快读取速度（Redis，Memcached）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;搜索索引&lt;/strong&gt;：允许用户按关键字搜索数据，或以各种方式对数据进行过滤（ElasticSearch）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流处理&lt;/strong&gt;：向其他进程发送消息，进行异步处理（Kafka，Flink，Storm）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批处理&lt;/strong&gt;：定期处理累积的大批量数据（Hadoop）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态管理是信息系统的永恒问题，马工以为的 DBA 是抱着祖传 Oracle 手册的打字员，实际上互联网公司的 DBA 已经是十八班武艺样样精通的 &lt;strong&gt;数据架构师&lt;/strong&gt; 了。&lt;strong&gt;架构师最重要的能力之一，就是了解这些组件的性能特点与应用场景，能够灵活地权衡取舍、集成拼接这些数据系统。&lt;/strong&gt; 他们上要 Push 业务落地最佳实践指导模式设计，下要深入操作系统与硬件排查问题优化性能，中间要掌握无数种数据组件的使用方式。君子不器，关系型数据库的知识，只是其中最为核心重要的一种。&lt;/p&gt;
&lt;p&gt;正如我在《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247483673&amp;idx=1&amp;sn=2a895a6f6e4b3e882395203757ec4e60&amp;chksm=fe4b34c2c93cbdd49686c79ba27327b0dd16f266a82ab7de6e9985b8808207646fa1c7796da4&amp;scene=21#wechat_redirect&#34;&gt;为什么要学习数据库原理和设计&lt;/a&gt;》所说， 只会写代码的是码农；&lt;strong&gt;学好数据库，基本能混口饭吃&lt;/strong&gt;；在此基础上再学好&lt;strong&gt;操作系统和计算机网络&lt;/strong&gt;，就能当一个不错的程序员。可惜的是，数据建模和SQL几乎快成为一门失传的艺术：这类基础知识逐渐为&lt;strong&gt;新一代工程师&lt;/strong&gt;遗忘，他们设计出离谱的模式，不懂得正确地创建索引，然后草率得出结论：关系型数据库和SQL都是垃圾，我们必须使用糙猛快的NoSQL来省时间。然而人们总是需要可靠的系统来处理关键业务数据：在许多企业中，核心数据仍然是一个常规关系型数据库作为&lt;strong&gt;Source of Truth&lt;/strong&gt;，NoSQL数据库仅用于非关键数据。某个研发跳出来说 DynamoDB / Redis / MongoDB / HBase 太牛逼了，我所有的状态都能放在这里，而且再也不需要 DBA 了，毫无疑问是滑稽可笑的。&lt;/p&gt;
&lt;h3 id=&#34;dba-是企业数据库的守护者&#34;&gt;DBA 是企业数据库的守护者&lt;/h3&gt;
&lt;p&gt;马工的最后一炮，直指 DBA 的职业道德 ：DBA想删库，谁也拦不住。&lt;/p&gt;
&lt;p&gt;这话倒是没有错，DBA和财务一样，都属于能对企业造成致命杀伤的关键岗位：用人不疑，疑人不用。但这句话同样也绕开了一个重要事实：没有DBA守门，人人都能删库。在马工举的微盟和百度删库跑路的两个例子中，主犯都是普通的研发与运维人员，正是因为没有称职的 DBA 把关，才有删库跑路的可趁之机。&lt;/p&gt;
&lt;p&gt;合格的 DBA 可以有效减少有能力对企业进行致命一击的人群范围，从所有的研发与运维收敛到DBA本身。至于 DBA 本身如何制衡，要么是两个 DBA 互为备份，要么是由运维/安全团队管理冷备份的删除权限。马工举的，腾讯云不让手工删例行备份的例子，实属对业内实践少见多怪。&lt;/p&gt;
&lt;p&gt;对于给 DBA 群体泼脏水的行为，本人表示鄙视愤慨 😄。按照这个逻辑，我也完全可以认为马工喜爱的公有云厂商，才是对数据安全最大的威胁：用云不过是把运维和DBA外包给了云厂商，&lt;strong&gt;而你完全阻碍不了某个云厂商中有权限的研发/运维/DBA，在心血来潮的情况下来你的库里里逛逛。或者干脆脱个备份裤子赏玩一下，你压根不可能追索，不可能取证，当然核心原因是你压根没有能力知道这一点&lt;/strong&gt;。而这样的人许许多多，一个运维的脚本出岔子就会爆破一大片，你能指望的赔偿也只有不痛不痒的时长代金券。&lt;/p&gt;
&lt;p&gt;参考阅读：《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485093&amp;idx=1&amp;sn=5815f71f1d832101d35a75f5aa4acd3c&amp;chksm=fe4b337ec93cba68fbf30eb0ed50d052c6e8972d42cf506051b5016668f4555edaa0756688dc&amp;scene=21#wechat_redirect&#34;&gt;云RDS：从删库到跑路&lt;/a&gt;》&lt;/p&gt;
&lt;h3 id=&#34;dba要退出历史舞台&#34;&gt;DBA要退出历史舞台？&lt;/h3&gt;
&lt;p&gt;作为一个整体行业， DBA 确实在走下坡路， 但人们总是会过高估短期影响而低估长期趋势。许多大型组织都雇用DBA，DBA类似于 Cobol 程序员，那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，大量使用了关系型数据库。在可预见的未来，DBA在某个地方找工作是不会有什么问题的。&lt;/p&gt;
&lt;p&gt;但大的趋势是，数据库本身会越来越智能，易用性越来越好，而各式各样的工具、SaaS、PaaS不断涌出，也会进一步压低数据库的使用门槛。公有云/私有云DBasS的出现更是让数据库的管理门槛进一步下降。数据库的专业技术门槛降低，将导致DBA的不可替代性降低：安装一套软件收费十几万，做一次数据恢复上百万的好日子肯定是一去不复返了。但在另一种意义上讲，这也将 DBA 从运维性的琐事中解放出来，他们可以把更多时间投身于更有价值的性能优化，隐患排查，制度建设工作之中。&lt;/p&gt;
&lt;p&gt;无论是公有云厂商，还是以Kubernetes为代表的云原生/私有云，其核心价值都在于&lt;strong&gt;尽可能多地使用软件，而不是人来应对系统复杂度&lt;/strong&gt;。但是不要指望这些能完全替代 DBA：云并不是什么都不用管的运维外包魔法。根据复杂度守恒定律，无论是系统管理员还是数据库管理员，管理员这个岗位消失的唯一方式是，它们被重命名为“DevOps Engineer”或SRE/DRE。好的云软件可以帮你屏蔽运维杂活，解决70%的日常高频问题，然而总是会有那么一些复杂问题只有人才能处理。你可能需要更少的人手来打理这些云软件，但总归还是需要人来管理。毕竟：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你也需要懂行的人来协调处理，才不至于被云厂商嘎嘎割韭菜当傻逼。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题外话：有那么一些研发，总想着通过云这种运维外包外援，用云数据库，云XX砸掉 DBA 的饭碗。我们做了一个开箱即用的 云数据库 RDS PostgreSQL 本地开源替代 &lt;strong&gt;Pigsty&lt;/strong&gt; ，最近刚发布了 2.0，监控/数据库开箱即用 HA/PITR/IaC一应俱全。允许您在缺乏数据库专家的情况下，用接近硬件的成本运行企业级数据库服务，省掉50%～90%上贡给RDS的“无专家税”，让 RDS 除了它引以为傲的弹性，在各个方面都像是一个大笑话。对于广大 DBA 来说，这就是一件怼回去的武器。咱们明人不说暗话，就是要砸了云数据库的饭碗，并断了研发的这种痴念。https://pigsty.cc/zh/docs/feature&lt;/p&gt;
&lt;p&gt;最后，让我们用某个 Notion AI 生成的无版权提词小笑话结束今天的主题。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;joke.png&#34; src=&#34;/zh/blog/cloud/no-dba-bullshit/no-dba-bullshit-joke.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 云数据库是不是智商税</title>
      <link>/zh/blog/cloud/rds/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/rds/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/rds/featured_hu02aa61ae1d9de35cbe238d2676170cb9_178789_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;寒冬来袭，大厂纷纷开始裁员，进入降本增效模式，作为公有云杀猪刀一哥的云数据库，故事还能再讲下去吗？&lt;/p&gt;
&lt;p&gt;近日，Basecamp &amp;amp; HEY 联合创始人 DHH 的一篇文章【1,2】引起热议，主要内容可以概括为一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我们每年在云数据库（RDS/ES）上花50万美元，你知道50万美元可以买多少牛逼的服务器吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们要下云，拜拜了您呐！“&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以，50 万美元可以买多少牛逼的服务器 ？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/YKqH324Qtg0mj6WfSMb66w&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/rds/featured.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;荒谬定价&#34;&gt;荒谬定价&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;磨刀霍霍向猪羊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;我们可以换一种问法，服务器和RDS都卖多少钱？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以我们自己数据库大量使用的物理机型为例：Dell R730， 64核384GB内存，加装一块 3.2 TB MLC的NVME SSD。像这样的一台服务器部署标准的生产级 PostgreSQL，单机可以承载十几万的TPS，只读点查询可以干到四五十万。要多钱呢？算上电费网费IDC托管代维费用，按照5年报废均摊，整个生命周期成本七万五千上下，合每年一万五。当然，如果要在生产中使用，高可用是必须的，所以通常一组数据库集群需要两到三台物理机，也就是每年3万到4.5万。&lt;/p&gt;
&lt;p&gt;这里没有算入DBA费用：两三个人管几万核真没多少。&lt;/p&gt;
&lt;p&gt;如果您直接购买这样规格的云数据库，则费用几何呢？让我们看看国内阿里云的收费【3】。因为基础版（乞丐版）实在是没法生产实用（请参考：《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485093&amp;idx=1&amp;sn=5815f71f1d832101d35a75f5aa4acd3c&amp;chksm=fe4b337ec93cba68fbf30eb0ed50d052c6e8972d42cf506051b5016668f4555edaa0756688dc&amp;scene=21#wechat_redirect&#34;&gt;云数据库：删库到跑路&lt;/a&gt;》），我们选用高可用版，通常底下是两到三个实例。包年包月，引擎 PostgreSQL 15 on x86，华东1默认可用区，独享的64核256GB实例：pg.x4m.8xlarge.2c，并加装一块3.2TB的ESSD PL3云盘。每年的费用在25万（3年）到75万（按需）不等，其中存储费用约占1/3。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;让我们再来看看公有云一哥AWS【4】【5】。AWS上与此最接近的是 db.m5.16xlarge ，也是64核256GB多可用区部署，同理，我们加装一块最大8万IOPS，3.2TB的 io1 SSD磁盘，查询AWS全球与国区的报价，总体在每年160 ～ 217万元不等，存储费用约占一半，整体成本如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;付费模式&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;th&gt;折合每年（万¥）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IDC自建（单物理机）&lt;/td&gt;
&lt;td&gt;¥7.5w / 5年&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IDC自建（2～3台组HA）&lt;/td&gt;
&lt;td&gt;¥15w / 5年&lt;/td&gt;
&lt;td&gt;3.0 ~ 4.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 RDS 按需&lt;/td&gt;
&lt;td&gt;¥87.36/时&lt;/td&gt;
&lt;td&gt;76.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 RDS 月付（基准）&lt;/td&gt;
&lt;td&gt;¥4.2w / 月&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 RDS 年付（85折）&lt;/td&gt;
&lt;td&gt;¥425095 / 年&lt;/td&gt;
&lt;td&gt;42.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 RDS 3年付（5折）&lt;/td&gt;
&lt;td&gt;¥750168 / 3年&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 按需&lt;/td&gt;
&lt;td&gt;$25,817 / 月&lt;/td&gt;
&lt;td&gt;217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 1年不预付&lt;/td&gt;
&lt;td&gt;$22,827 / 月&lt;/td&gt;
&lt;td&gt;191.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 3年全预付&lt;/td&gt;
&lt;td&gt;12w$ + 17.5k$/月&lt;/td&gt;
&lt;td&gt;175&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 中国/宁夏按需&lt;/td&gt;
&lt;td&gt;¥197,489 / 月&lt;/td&gt;
&lt;td&gt;237&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 中国/宁夏1年不预付&lt;/td&gt;
&lt;td&gt;¥143,176 / 月&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS 中国/宁夏3年全预付&lt;/td&gt;
&lt;td&gt;¥647k + 116k/月&lt;/td&gt;
&lt;td&gt;160.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以对比一下自建与云数据库的成本差异：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;th&gt;折合每年（万元）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IDC托管服务器 64C / 384G / 3.2TB NVME SSD 660K IOPS (2～3台)&lt;/td&gt;
&lt;td&gt;3.0 ~ 4.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云 RDS PG 高可用版 pg.x4m.8xlarge.2c, 64C / 256GB / 3.2TB ESSD PL3&lt;/td&gt;
&lt;td&gt;25 ～ 50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS RDS PG 高可用版 db.m5.16xlarge, 64C / 256GB / 3.2TB io1 x 80k IOPS&lt;/td&gt;
&lt;td&gt;160 ～ 217&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以问题来了，&lt;strong&gt;如果你用云数据库1年的钱，就够你买几台甚至十几台性能更好的服务器，那么使用云数据库的意义到底在哪里&lt;/strong&gt;？当然，公有云的大客户通常可以有商务折扣，但再怎么打折，数量级上的差距也是没法弥补的吧？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用云数据库到底是不是在交智商税？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;没有银弹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据库是数据密集型应用的核心&lt;/strong&gt;，应用跟着数据库走，所以数据库选型需要非常审慎。而评价一款数据库需要从许多维度出发：可靠性，安全性，简单性，可伸缩性，可扩展性，可观测性，可维护性，成本性价比，等等等等。甲方真正在意的是这些属性，而不是虚头巴脑的技术炒作：存算分离，Serverless，HTAP，云原生，超融合……，这些必须翻译成工程的语言：&lt;strong&gt;牺牲了什么换来了什么&lt;/strong&gt;，才有实际意义。&lt;/p&gt;
&lt;p&gt;公有云的鼓吹者很喜欢往给它脸上贴金：节约成本，灵活弹性，安全可靠，是企业数字化转型的万灵药，是汽车对马车的革命，又好又快还便宜，诸如此类，可惜没几条是实事求是的。绕开这些虚头巴脑的东西，云数据库相比专业的数据库服务真正有优势的属性只有一条：&lt;strong&gt;弹性&lt;/strong&gt;。具体来说是两点：&lt;strong&gt;启用成本低，可伸缩性强&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启动成本低&lt;/strong&gt;，意味着用户不需要进行机房建设，人员招聘培训，服务器采购就可以开始用；&lt;strong&gt;可伸缩性强&lt;/strong&gt;，指的是各种配置升降配，扩缩容比较容易；因此公有云真正适用的场景核心就是这两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;起步阶段，流量极小的简单应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;毫无规律可循，大起大落的负载&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前者主要包括简单网站，个人博客，小程序小工具，演示/PoC，Demo，后者主要包括低频的的数据分析/模型训练，突发的秒杀抢票，明星并发出轨等特殊场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公有云的商业模型就是租赁&lt;/strong&gt;：租服务器，租带宽，租存储，租专家。它和租房，租车，租充电宝没有本质区别。当然，租服务器和运维外包实在是不怎么中听，所以有了云这个名字，听起来更有赛博地主的感觉。而租赁这种模式的特点，就是弹性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;租赁模型有租赁的好处&lt;/strong&gt;，出门在外，共享充电宝可以解决临时应急性的小规模充电需求。但对于大量日常从家到单位两点一线的人来说，每天用共享充电宝给手机电脑充电，毫无疑问是非常荒谬的，何况共享充电宝租一个小时4块钱，租几个小时的钱，就够你把它直接买下来了。租车可以很好的满足临时的、突发的、一次性用车需求：外地出差旅游，临时拉一批货。但如果你的出行需求是频繁的，本地性，那么购置一辆自动驾驶的车也许是最省事省钱的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题的关键还是在于租售比&lt;/strong&gt;，房子的租售比几十年，汽车的租售几年，而公有云服务器的租售比通常只有几个月。如果你的业务能够稳定活几个月以上，为什么要租，而不是直接买呢？&lt;/p&gt;
&lt;p&gt;所以，云厂商赚的钱，要么来自VC砸钱求爆发增长的科技创企，要么来自灰色寻租空间比云溢价还高的特殊单位，要么是人傻钱多的狗大户，要么是零零散散的站长/学生/VPN个人用户。聪明的高净值企业客户，谁会放着便宜舒适的大House不住，跑去挤着租住方舱医院人才公寓呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果您的业务符合公有云的适用光谱，那是最好不过；但为了不需要的灵活性与弹性支付几倍乃至十几倍溢价，那是纯交智商税&lt;/strong&gt;**。**&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;成本刺客&#34;&gt;成本刺客&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;任何信息不对称都可以构成盈利空间，但你无法永远欺骗所有人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公有云的弹性就是针对其商业模式设计的：&lt;strong&gt;启动成本极低，维持成本极高&lt;/strong&gt;。低启动成本吸引用户上云，而且良好的弹性可以随时适配业务增长，可是业务稳定后形成供应商锁定，尾大不掉，极高的维持成本就会让用户痛不欲生了。这种模式有一个俗称 —— &lt;strong&gt;杀猪盘&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-2.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;在我职业生涯的第一站中，就有这样一次杀猪经历让我记忆犹新。作为前几个被逼上A云的内部BU，A云直接出工程师加入手把手提供上云服务。用ODPS全家桶换掉了自建的大数据/数据库全家桶。应该说，服务确实不错，只不过，每年的存储计算开销从千万出头飙升到接近一亿，利润几乎都转移到A云了，堪称终极成本刺客。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-3.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;后来在下一站，情况则完全不同。我们管理着两万五千核规模，450W QPS的 PostgreSQL 与 Redis 数据库集群。像这种规格的数据库，如果按AWS RCU/WCU 计费，每年几个亿就出去了；即使全买长期包年包月再加个大商务折扣，至少五六千万是肯定是少不了的。而我们总共两三个DBA，几百台服务器，人力+资产均摊每年统共不到一千万。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-31.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里我们可以用一种简单的方式来核算单位成本：一核算力（含mem/disk）使用一个月的综合成本，简称&lt;strong&gt;核·月&lt;/strong&gt;。我们核算过自建各机型的成本，以及云厂商给出的报价，大致结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;硬件算力&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;单价&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDC自建机房（独占物理机 A1: 64C384G）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDC自建机房（独占物理机 B1: 40C64G）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDC自建机房（独占物理机 C2: 8C16G）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDC自建机房（容器，超卖200%）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDC自建机房（容器，超卖500%）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;UCloud 弹性虚拟机（8C16G，有超卖）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 弹性服务器 2x内存（独占无超卖）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;107&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 弹性服务器 4x内存（独占无超卖）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 弹性服务器 8x内存（独占无超卖）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS C5D.METAL 96C 200G (按月无预付)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS C5D.METAL 96C 200G(预付3年)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS RDS PostgreSQL db.T2 (4x)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS RDS PostgreSQL db.M5 (4x)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;611&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS RDS PostgreSQL db.R6G (8x)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;786&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS RDS PostgreSQL db.M5 24xlarge&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1328&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 RDS PG 2x内存（独占）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;260&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 RDS PG 4x内存（独占）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;阿里云 RDS PG 8x内存（独占）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;410&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ORACLE数据库授权&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以这里问题就来了，单价二十块的服务器硬件，为什么可以卖出上百块，而且装上云数据库软件还可以再翻几番？&lt;strong&gt;运维是金子做的，还是服务器是金子做的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用的回应话术是：&lt;em&gt;&lt;strong&gt;数据库是基础软件里的皇冠明珠，凝聚着无数无形知识产权BlahBlah&lt;/strong&gt;&lt;/em&gt;。因此软件的价格远超硬件非常合理。如果是 Oracle 这样的顶尖商业数据库，或者索尼任天堂的主机游戏，这么说也过得去。&lt;/p&gt;
&lt;p&gt;但公有云上的云数据库（RDS for PostgreSQL/MySQL/&amp;hellip;.），本质上是开源数据库内核换皮魔改封装，加上自己管控软件和共享DBA人头服务。那这种溢价率就非常荒谬了：数据库内核是免费的呀，&lt;strong&gt;你家管控软件是金子做的，还是DBA是金子做的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/gold-rds.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公有云的秘密就在这里：&lt;strong&gt;&lt;strong&gt;用廉价的存算资源获客，用云数据库杀猪&lt;/strong&gt;&lt;/strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管国内公有云 IaaS （存储、计算、网络）的收入占营收接近一半，但毛利率只有 15% ～ 20%，而公有云 PaaS 的营收虽然不如 IaaS，但 PaaS 的毛利率可以达到 50%，完爆卖资源吃饭的 IaaS 。&lt;strong&gt;而 PaaS 中最具代表性的，就是云数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;正常来说，如果不是把公有云单纯当作一个 IDC 2.0 或者 CDN供应商来用，最费钱的服务就是数据库。公有云上的存储、计算、网络资源贵吗？严格来说不算特别离谱。IDC托管物理机代维的核月成本大约为二三十块，而公有云上一核 CPU 算力用一个月的价格，大概在七八十块到一两百块，考虑到各种折扣与活动，以及弹性溢价，勉强处在可以接受的合理范围。&lt;/p&gt;
&lt;p&gt;但云数据库就非常离谱了，同样是一核算力用一个月，云数据库价格比起对应规格的硬件可以翻几倍乃至十几倍。便宜一些阿里云，核月单价两百到四百，贵一些的 AWS，核月单价可以七八百甚至上千。&lt;/p&gt;
&lt;p&gt;如果说您只有一两核的 RDS ，那也别折腾了，交点税就交点吧。但如果您的业务上了量还不赶紧从云上下来，那可真的是在交智商税了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;足够好吗&#34;&gt;足够好吗？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不要误会，云数据库只是及格品大锅饭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于云数据库/云服务器的成本，如果您能跟销售聊到这儿，话术就该变成：&lt;em&gt;&lt;strong&gt;虽然我们贵，但是我们好呀！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，云数据库真的好吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应该说，对于玩具应用，小微网站，个人托管，以及土法野路子自建数据库来，毫无技术认知的甲方来说，RDS也许足够好了。但在高净值客户与数据库专家看来，RDS不过是及格线上的大锅饭产品罢了。&lt;/p&gt;
&lt;p&gt;说到底，公有云源于大厂内部的运维能力外溢，大厂人自己厂里技术啥样门儿清，大可不必有啥莫名的崇拜。（Google也许算个例外）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 &lt;strong&gt;性能&lt;/strong&gt; 为例，性能的核心指标是 &lt;strong&gt;延迟 / 响应时间&lt;/strong&gt;，特别是长尾延迟，会直接影响用户体验：没有人愿意等着划一下屏幕转几秒圈圈。而在这一点上，&lt;strong&gt;磁盘&lt;/strong&gt;起到决定性作用。&lt;/p&gt;
&lt;p&gt;我们生产环境数据库中使用的是本地 NVME SSD，典型4K写延迟为15µs，读延迟94µs。因而，PostgreSQL简单查询的响应时间通常为 100 ~ 300µs，应用侧的查询响应时间通常为 200 ~ 600µs；对于简单查询，我们的 SLO 是命中1ms内，未命中10ms内，超过10ms算慢查询，要打回去优化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-41.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而 AWS 提供的EBS服务用fio实测性能极其拉垮【6】，默认的gp3读写延迟为 40ms，io1 读写延迟为10ms，整整差了近三个数量级，而且IOPS最大也只有八万。RDS使用的存储就是EBS，如果连一次磁盘访问都需要10ms，那这就根本没法整了。io2 倒是使用了自建同款 NVMe SSD，然而远程块存储相比本地磁盘延迟直接翻倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;确实，有时候云厂商会提供性能足够好的本地的NVME SSD，但都会非常鸡贼的设定各种限制条件，来避免用户来使用EC2来自建数据库。AWS的限制方式是只有NVME SSD Ephemeral Storage，这种盘一旦遇上EC2重启就自动抹干净了，根本没法用。阿里云的限制方式是给你卖天价，相比直接采购硬件，&lt;strong&gt;阿里云的 ESSD PL3 则高达 200 倍&lt;/strong&gt;。以 3.2TB 规格的企业级 PCI-E SSD 卡为参照基准，AWS 上售租比为 1个月，阿里云上为 9 天，租用此时长即可买下整块磁盘。若在阿里云以采购三年最大优惠五折计算，租用三年的时间可购买 123 块同款硬盘近 400TB 永久所有权。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再以&lt;/strong&gt; &lt;strong&gt;可观测性&lt;/strong&gt; &lt;strong&gt;为例，没有一家RDS的监控能称得上是“好”&lt;/strong&gt;。就以监控指标数量来说吧，虽然说知道服务死了还是活着只需要几个指标，但如果想进行故障根因分析，需要越多越好的监控指标来构建良好的Context。而大多数RDS都只是做了一些基本的监控指标，和简陋到可怜的监控面板。以阿里云RDS PG为例【7】，所谓的“增强监控”，里面只有这么点可怜的指标 ， AWS里和PG数据库相关的指标也差不多不到100个，而我们自己的监控系统里主机指标有800多类，PGSQL数据库指标610类，REDIS指标257类，整个大约三千类指标，在数量上完爆这些RDS。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/pigsty/dashboard.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公开 &lt;a href=&#34;https://demo.pigsty.cc&#34;&gt;Demo&lt;/a&gt;：https://demo.pigsty.cc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至于&lt;strong&gt;可靠性&lt;/strong&gt;，以前我对RDS的可靠性还抱有基本的信任，直到一个月前A云香港机房那场丑闻。租的机房，服务器喷水消防，OSS故障，大量RDS不可用也切不了；然后A云自己整个Region的管控服务竟然因为一个单AZ的故障自己挂点了，&lt;strong&gt;连自己的管控API都做不到异地容灾，那做云数据库异地容灾岂不是天大的笑话&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然，并不是说自建就不会出现这些问题，只是稍微靠谱点的IDC托管都不至于犯这么离谱的错误。安全性也不用多说，最近闹的出过的几次大笑话，比如著名的SHGA；一堆样例代码里硬编码AK/SK，云RDS更安全吗？别搞笑啦，经典架构起码还有VPN堡垒机扛着一层，而公网上暴露端口弱密码裸奔的数据库简直不要太多，攻击面肯定是更大了无疑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云数据库另一个广为人所诟病的是其可扩展性&lt;/strong&gt;。RDS是不给用户 dbsu 权限的，这也意味着用户是不能在数据库中安装扩展插件，而 PostgreSQL 的插件恰恰就是其醍醐味，没有扩展的PostgreSQL就像可乐不加冰，酸奶不加糖一样。更严重的问题是&lt;strong&gt;在一些故障出现时，用户甚至都丧失了自我救助的能力&lt;/strong&gt;，参见《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485093&amp;idx=1&amp;sn=5815f71f1d832101d35a75f5aa4acd3c&amp;chksm=fe4b337ec93cba68fbf30eb0ed50d052c6e8972d42cf506051b5016668f4555edaa0756688dc&amp;scene=21#wechat_redirect&#34;&gt;云数据库：从删库到跑路&lt;/a&gt;》中的真实案例：WAL归档与PITR这么基础性的功能，在RDS中竟然是一个付费的升级功能。至于可维护性，有些人说云数据库可以点点鼠标就创建销毁多方便呀，说这话的人肯定没经历过重启每个数据库都要收手机短信验证码的山炮场景。&lt;strong&gt;有 Database as Code 式的管理工具，真正的工程师绝对不会用这种“ClickOps”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不过任何事物存在都有其道理，云数据库也不是一无是处，在&lt;strong&gt;可伸缩性&lt;/strong&gt;上，云数据库确实卷出了新高度，比如各种 Serverless 的花活，但这也是给云厂商自己省钱超卖用的，对用户来说确实没有太大意义。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;淘汰dba&#34;&gt;淘汰DBA？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;被云厂商垄断，想招都找不到，还淘汰？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;云数据库的另一种鼓吹思路是，用了RDS，你就不用DBA啦！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如这篇知名点炮文《&lt;a href=&#34;https://mp.weixin.qq.com/s/DtRFnh8LgtfesCNMNl3eNw&#34;&gt;你怎么还在招聘DBA&lt;/a&gt;》【8】里说：我们有数据库自治服务！RDS和DAS能帮你解决这些数据库相关的问题，DBA都要下岗了，哈哈哈哈。我相信任何认真看过这些所谓“自治服务”，“AI4DB”官方文档【9】【10】的人都不会相信这种鬼话：&lt;strong&gt;连一个足够好用的监控系统都算不上的小模块，能让数据库自治起来，这不是在说梦话？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DBA，Database Administrator，数据库管理员，以前也叫做数据库协调员、数据库程序员。DBA是一个横跨于研发团队与运维团队的广博角色，涉及DA、SA、Dev、Ops、以及SRE的多种职责，负责各种与数据与数据库有关的问题：设置管理策略与运维标准，规划软硬件架构，协调管理数据库，验证表模式设计，优化SQL查询，分析执行计划，乃至于处理紧急故障以及抢救数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBA的第一点价值在于安全兜底&lt;/strong&gt;：&lt;strong&gt;他是企业核心数据资产的守护者，也是可以轻易对企业造成致命伤害的人&lt;/strong&gt;。在蚂蚁金服有个段子，能搞死支付宝的，除了监管就是DBA了。高管们通常也很难意识到 DBA 对于公司的重要性，直到出了数据库事故，一堆CXO紧张地站在DBA背后观看救火修复过程时…。比起避免一场数据库故障所造成的损失，例如：全美停航，Youtube宕机，工厂停产一天，雇佣DBA的成本显得微不足道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBA的第二点价值在于模型设计与优化&lt;/strong&gt;。许多公司并不在乎他们的查询是纯狗屎，他们只是觉得“硬件很便宜”，砸钱买硬件就好了。然而问题在于，一个调整不当的查询/SQL或设计不当的数据模型与表结构，可以对性能产生几个数量级的影响。总会在某一个规模，堆硬件的成本相比雇佣一个靠谱DBA的成本高得令人望而却步。实话说，&lt;strong&gt;我认为大多数公司在IT软硬件开销中花费最大的是：开发人员没有正确使用数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBA的基本功是管理DB，但灵魂在于A&lt;/strong&gt;：Administration ，如何管住研发人员创造的熵，需要的可不仅仅是技术。“自治数据库”也许可以帮助你分析负载创建索引，但没有任何可能帮你理解业务需求，去Push业务去优化表结构，而这一点在未来的二三十年里，都看不到任何被云替代的可能。&lt;/p&gt;
&lt;p&gt;无论是公有云厂商，还是以Kubernetes为代表的云原生/私有云，或者是类似 Pigsty 【11】这样的本地开源RDS替代，&lt;strong&gt;其核心价值都在于****尽可能多地使用软件，而不是人来应对系统复杂度&lt;/strong&gt;。那么，&lt;strong&gt;云软件会革了运维与DBA的命吗&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云并不是什么都不用管的运维外包魔法&lt;/strong&gt;。根据复杂度守恒定律，无论是系统管理员还是数据库管理员，管理员这个岗位消失的唯一方式是，它们被重命名为“DevOps Engineer”或SRE。&lt;strong&gt;好的云软件可以帮你屏蔽运维杂活，解决70%的日常高频问题，然而总是会有那么一些复杂问题只有人才能处理&lt;/strong&gt;。你可能需要更少的人手来打理这些云软件，但总归还是需要人来管理【12】。毕竟，&lt;strong&gt;你也需要懂行的人来协调处理，才不至于被云厂商嘎嘎割韭菜当傻逼。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在大型组织中，一个好的DBA是至关重要的&lt;/strong&gt;。然而优秀的DBA相当稀有，供不应求，以至于这个角色在大多数组织中只能外包：包给专业的数据库服务公司，包给云数据库RDS服务团队。找不到DBA供应的组织只能将这个职责 &lt;strong&gt;内包&lt;/strong&gt; 给自己的研发/运维人员，直到公司的规模足够大，或者吃到足够的苦头之后，一些Dev/Ops才会培养出相应的能力来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBA不会被淘汰，只会被集中到云厂商中垄断提供服务。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;垄断阴影&#34;&gt;垄断阴影&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在2020年，计算自由的敌人是云计算软件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;比起“淘汰DBA”，云的出现蕴含着更大的威胁&lt;/strong&gt;。我们需要担心的是这样一幅图景：公有云（或果子云）坐大，控制硬件与运营商上下游，垄断计算，存储，网络，顶尖专家资源，形成事实标准。假如所有顶级DBA都被挖到云厂商去集中提供共享专家服务，普通的企业组织就彻底失去了用好数据库的能力，最终只能选择被公有云收税杀猪。最终，所有IT资源集中于云厂商，只要控制住这几个关键少数，就可以控制整个互联网。这毫无疑问与互联网诞生的初衷相悖。&lt;/p&gt;
&lt;p&gt;引用 DDIA 作者 Martin Kelppmann 的一段话【13】来说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在2020年，计算自由的敌人是云计算软件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;—— 即主要在供应商的服务器上运行的软件，而你的所有数据也存储在这些服务器上。这些“云软件”也许有一个客户端组件（手机App，网页App，跑在你浏览器中的JavaScript），但它们只能与供应商的服务端共同工作。而云软件存在很多问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果提供云软件的公司倒闭，或决定停产，软件就没法工作了，而你用这些软件创造的文档与数据就被锁死了。对于初创公司编写的软件来说，这是一个很常见的问题：这些公司可能会被大公司收购，而大公司没有兴趣继续维护这些初创公司的产品。&lt;/li&gt;
&lt;li&gt;谷歌和其他云服务可能在没有任何警告和追索手段的情况下，突然暂停你的账户。例如，您可能在完全无辜的情况下，被自动化系统判定为违反服务条款：其他人可能入侵了你的账户，并在你不知情的情况下使用它来发送恶意软件或钓鱼邮件，触发违背服务条款。因而，你可能会突然发现自己用Google Docs或其它App创建的文档全部都被永久锁死，无法访问了。&lt;/li&gt;
&lt;li&gt;而那些运行在你自己的电脑上的软件，即使软件供应商破产了，它也可以继续运行，直到永远。（如果软件不再与你的操作系统兼容，你也可以在虚拟机和模拟器中运行它，当然前提是它不需要联络服务器来检查许可证）。例如，互联网档案馆有一个超过10万个历史软件的软件集锦，你可以在浏览器中的模拟器里运行！相比之下，如果云软件被关闭，你没有办法保存它，因为你从来就没有服务端软件的副本，无论是源代码还是编译后的形式。&lt;/li&gt;
&lt;li&gt;20世纪90年代，无法定制或扩展你所使用的软件的问题，在云软件中进一步加剧。对于在你自己的电脑上运行的闭源软件，至少有人可以对它的数据文件格式进行逆向工程，这样你还可以把它加载到其他的替代软件里（例如OOXML之前的微软Office文件格式，或者规范发布前的Photoshop文件）。有了云软件，甚至连这个都做不到了，因为数据只存储在云端，而不是你自己电脑上的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果所有的软件都是免费和开源的，这些问题就都解决了&lt;/strong&gt;。然而，开源实际上并不是解决云软件问题的必要条件；即使是闭源软件也可以避免上述问题，只要它运行在你自己的电脑上，而不是供应商的云服务器上。请注意，互联网档案馆能够在没有源代码的情况下维持历史软件的正常运行：如果只是出于存档的目的，在模拟器中运行编译后的机器代码就够了。也许拥有源码会让事情更容易一些，但这并不是关键，&lt;strong&gt;最重要的事情，还是要有一份软件的副本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我和我的合作者们以前曾主张过&lt;strong&gt;本地优先软件&lt;/strong&gt;的概念，这是对云软件的这些问题的一种回应。本地优先的软件在你自己的电脑上运行，将其数据存储在你的本地硬盘上，同时也保留了云计算软件的便利性，比如，实时协作，和在你所有的设备上同步数据。开源的本地优先的软件当然非常好，但这并不是必须的，本地优先软件90%的优点同样适用于闭源的软件。云软件，而不是闭源软件，才是对软件自由的真正威胁，原因在于：&lt;strong&gt;云厂商能够突然心血来潮随心所欲地锁定你的所有数据，其危害要比无法查看和修改你的软件源码的危害大得多&lt;/strong&gt;。因此，普及本地优先的软件显得更为重要和紧迫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有力就会有反作用力，与云软件相对应的本地优先软件开始如雨后春笋一般出现。例如，以Kubernetes为代表的 Cloud Native 运动就是一例。“Cloud Native”，云厂商将 Native 解释 “原生”：“原生诞生在公有云环境里的软件”；而其真正的含义应为 “本地”，即与 Cloud 相对应的 “Local” —— 本地云 / 私有云 / 专有云 / 原生云，叫什么不重要，重要的是它运行在用户想运行的任何地方（包括云服务器），而不是仅仅是公有云所独有！&lt;/p&gt;
&lt;p&gt;以 K8S为代表的开源项目，将原本公有云才有的资源调度/智能运维能力普及到所有企业中，让企业在本地也可以运行起‘云’一样的能力。对于无状态的应用来说，它已经是一个足够好的 “云操作系统” 内核。Ceph/Minio也提供了 S3 对象存储的开源替代，只有一个问题仍然没有答案，有状态的，生产级的数据库服务如何管理与部署？&lt;/p&gt;
&lt;p&gt;时代在呼唤 RDS 的开源替代物。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty —— 开源免费，开箱即用，更好的 RDS PG 替代&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我希望，未来的世界人人都有自由使用优秀服务的事实权利，而不是只能被圈养在几个公有云厂商提供的猪圈（Pigsty）里吃粑粑。这就是我要做 Pigsty 的原因 —— &lt;strong&gt;一个更好的，开源免费的 PostgreSQL RDS替代&lt;/strong&gt;。让用户能够在任何地方（包括云服务器）上，一键拉起有比云RDS更好的数据库服务。&lt;/p&gt;
&lt;p&gt;Pigsty 是是对 PostgreSQL 的彻底补完，&lt;strong&gt;更是对云数据库的辛辣嘲讽&lt;/strong&gt;。它本意是“猪圈”，但更是 Postgres In Great STYle 的缩写，即“&lt;strong&gt;全盛状态下的 PostgreSQL&lt;/strong&gt;”。它是一个完全基于开源软件的，可以运行在任何地方的，浓缩了 PostgreSQL 使用管理最佳实践的 Me-Better  RDS 开源替代。用真实世界的大规模，高标准 PostgreSQL 集群打磨而来的解决方案，它是为了满足探探自己管理数据库的需求而生，在八个维度上进行了许多有价值的工作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可观测性（Observability）是天；天行健君子以自强不息&lt;/strong&gt;；Pigsty使用现代可观测性技术栈为 PostgreSQL 打造了一款无与伦比的监控系统，从全局大盘概览到单个表/索引/函数等对象的秒极历史详情指标一览无遗，让用户对系统能够做到洞若观火，进而掌控一切。此外，Pigsty的监控系统还可以独立使用，监控第三方数据库实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可控制性（Controllability）是地；地势坤君子以厚德载物&lt;/strong&gt;；Pigsty提供Database as Code的能力：使用表现力丰富的声明式接口描述数据库集群的状态，并使用幂等的剧本进行部署与调整。让用户拥有精细定制的能力的同时又无需操心实现细节，解放心智负担，让数据库操作与管理的门槛从专家级降低到新手级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可伸缩性（Scalability）是水；水洊至习坎君子以常德行&lt;/strong&gt;；Pigsty提供预制通用调参模板（OLTP / OLAP / CRIT / TINY），自动优化系统参数，并可通过级联复制无限扩展只读能力，也使用Pgbouncer连接池优化海量并发连接；Pigsty确保 PostgreSQL 的性能可以在现代硬件条件下充分发挥：单机可达数万并发连接/百万级单点查询QPS/十万级单条写入TPS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可维护性（Maintainability）是火；明两作离大人以继明照于四方&lt;/strong&gt;；Pigsty 允许在线摘除添加实例以扩缩容，Switchover/滚动升级进行升降配，提供基于逻辑复制的不停机迁移方案，将维护窗口压缩至亚秒级，让系统整体的可演化性，可用性，可维护性提高到一个新的水准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全性（Security）是雷；洊雷震君子以恐惧修省&lt;/strong&gt;；Pigsty提供了一套遵循最小权限原则的访问控制模型，并带有各种安全特性开关：流复制同步提交防丢失，数据目录校验和防腐败，网络流量SSL加密防监听，远程备份AES-256防泄漏。只要物理硬件与密码安全，用户无需担心数据库的安全性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单性（Simplicity）是风；随风巽君子以申命行事&lt;/strong&gt;；使用Pigsty的难度不会超过任何云数据库，它旨在以最小的复杂度成本交付完整的RDS功能，模块化设计允许用户自行组合选用所需的功能。Pigsty提供基于Vagrant的本地开发测试沙箱，与Terraform的云端IaC一键部署模板，让您在任意新EL节点上一键完成离线安装，完整复刻环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可靠性（Reliability）是山；兼山艮君子以思不出其位&lt;/strong&gt;；Pigsty提供了故障自愈的高可用架构应对硬件问题，也提供开箱即用的PITR时间点恢复为人为删库与软件缺陷兜底，并通过长时间、大规模的生产环境运行与高可用演练验证其可靠性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可扩展性（Extensibility）是泽：丽泽兑君子以朋友讲习&lt;/strong&gt;；Pigsty深度整合PostgreSQL生态核心扩展PostGIS、TimescaleDB、Citus 、PGVector、以及大量扩展插件；Pigsty提供模块化设计的Prometheus/Grafana可观测性技术栈，以及MINIO，ETCD，Redis、Greenplum 等组件的监控与高可用部署与PostgreSQL 组合使用；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更重要的是，Pigsty是完全开源免费的自由软件&lt;/strong&gt;，采用 AGPL v3.0 协议。我们用爱发电，而您可以用几十块核·月的纯硬件成本，跑起运行功能完备甚至更好的RDS服务。无论你是初心者还是资深DBA，无论你管理着上万核的大集群还是1核2G的小水管，无论你已经用了RDS还是在本地搭建过数据库，只要你是 PostgreSQL 用户，Pigsty都会对您有所帮助，完全免费。&lt;strong&gt;您可以专注于业务中最有趣或最有价值的部分，将杂活丢给软件来解决&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尽管Pigsty 本身旨在用数据库自动驾驶软件替代人肉数据库运维，但正如上所述，再好的软件也没法解决 100% 的问题。总会有一些的冷门低频疑难杂症需要专家介入处理。我们提供免费的社区答疑，如果您觉得安装使用维护有困难，需要下云迁移或者疑难杂症兜底，我们也提供顶尖的数据库专家咨询服务，性价比相对公有云数据库的&lt;a href=&#34;/zh/blog/cloud/sla/&#34;&gt;工单/SLA&lt;/a&gt;极有竞争力。Pigsty帮助用户用好 PostgreSQL，而我们帮助用户用好 Pigsty。&lt;/p&gt;
&lt;p&gt;Pigsty简单易用，人力成本与复杂度RDS持平，但资源成本差异确是天翻地覆。且不说自建机房的20块和几百块的云数据库怎么比，考虑到 RDS 对比同规格 EC2 都有几倍的溢价，您完全可以折中：使用云服务器部署 Pigsty RDS，既保留了云的弹性，又可以原地省掉五六成开销。如果是IDC自建或者代维，成本砍掉90%都不一定打得住。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/cloud/rds/rds-9.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RDS成本与规模成本曲线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty 允许您践行最终极的 FinOps 理念 —— 用几乎接近于纯资源的价格，在任何地方（ECS，资源云，机房服务器甚至本地笔记本虚拟机）运行生产级的 PostgreSQL RDS 数据库服务。&lt;strong&gt;让云数据库的能力成本，从正比于资源的边际成本，变为约等于0的固定学习成本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果您可以用几分之一的成本来使用更好的 RDS 服务，那么再用云数据库就真的是纯纯的智商税了。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;【1】&lt;a href=&#34;https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0&#34;&gt;为什么我们要离开云&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【2】&lt;a href=&#34;https://www.infoq.cn/article/qoq3v6jfenwwzmpg4fre&#34;&gt;上云“被坑”十年终放弃，寒冬里第一轮“下云潮”要来了？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【3】&lt;a href=&#34;https://rdsbuy.console.aliyun.com/create/rds/PostgreSQL&#34;&gt;阿里云RDS for PostgreSQL定价&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【4】&lt;a href=&#34;https://calculator.aws/#/addService/RDSPostgreSQL&#34;&gt;AWS Pricing Calculator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【5】 &lt;a href=&#34;https://calculator.amazonaws.cn/#/?trk=pricing-ban&#34;&gt;AWS Pricing Calculator&lt;/a&gt; （中国宁夏）&lt;/p&gt;
&lt;p&gt;【6】&lt;a href=&#34;https://github.com/Vonng/pgtpc/blob/master/fio/aws-ebs-bench.md&#34;&gt;FIO 测试 AWS EBS性能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【7】&lt;a href=&#34;https://help.aliyun.com/document_detail/299200.html&#34;&gt;阿里云RDS PG 增强监控&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【8】&lt;a href=&#34;https://mp.weixin.qq.com/s/DtRFnh8LgtfesCNMNl3eNw&#34;&gt;你为什么还在招DBA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【9】&lt;a href=&#34;https://help.aliyun.com/document_detail/159166.html&#34;&gt;阿里云RDS PG 数据库自治服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【10】&lt;a href=&#34;https://docs.opengauss.org/zh/docs/3.0.0/docs/Developerguide/AI4DB-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E6%B2%BB%E8%BF%90%E7%BB%B4.html&#34;&gt;OpenGauss AI for DB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【11】&lt;a href=&#34;https://pigsty.cc/&#34;&gt;Me-Better RDS PostgreSQL 替代 Pigsty&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【12】&lt;a href=&#34;https://mp.weixin.qq.com/s/9lceZdyUZU9AzsqlAcpjTA&#34;&gt;Pigsty v2 正式发布：更好的RDS PG开源替代&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【13】&lt;a href=&#34;https://mp.weixin.qq.com/s/DJsDRO18saZaxe3oyzzYrA&#34;&gt;是时候和GPL说再见了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【14】&lt;a href=&#34;https://mp.weixin.qq.com/s/c8bpK4o3H7-EyRqVdNDndQ&#34;&gt;云数据库是不是智商税？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【15】&lt;a href=&#34;https://mp.weixin.qq.com/s/rtx4UWkuvrKf7gtd6pFr-A&#34;&gt;大厂裁员轰轰烈烈，哪个技术岗位可以独善其身？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【16】&lt;a href=&#34;https://mp.weixin.qq.com/s/UZVoQxFYbG7WlJ1JC-gclQ&#34;&gt;蹭个热度&amp;ndash;要不要DBA和云数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【17】&lt;a href=&#34;https://mp.weixin.qq.com/s/LFnWliDxPQnVePkDWsIVag&#34;&gt;你怎么不招DBA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【18】&lt;a href=&#34;https://mp.weixin.qq.com/s/Py3o31w3db5E9FsviAZeCA&#34;&gt;DBA还是一份好工作吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【19】&lt;a href=&#34;https://mp.weixin.qq.com/s/AGEW1iHQkQy4NQyYC2GonQ&#34;&gt;云RDS：从删库到跑路&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: DBA还是一份好工作吗？</title>
      <link>/zh/blog/cloud/is-dba-good-job/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/is-dba-good-job/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/is-dba-good-job/featured_hu49e9d8b8e70b67678815b427faee2280_103960_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;蚂蚁金服有过一个自嘲的段子：能干翻支付宝的，除了监管就是&lt;strong&gt;DBA&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;数字时代，数据是很多企业的核心资产，对于互联网/软件服务类企业更是如此。而负责保管这些数据资产的人，就是&lt;strong&gt;DBA（数据库管理员）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;想象一下所有账户余额和联系人全部丢失的场景，尽管发生概率微乎其微，即使是支付宝与微信，如果出现无法恢复的核心库删库事件，恐怕也只能吃不了兜着走了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;缘从何起&#34;&gt;缘从何起？&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;fish.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/fish.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件吃世界，开源吃软件，云吞噬开源，谁来吞噬云？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久很久以前，开发软件/信息服务需要使用非常昂贵的商业数据库软件：例如Oracle与SQL Server：单花在软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。如果公司已经砸了成百上千万的钱在数据库软硬件上，那么再花一些钱雇佣一些专职专家来照顾这些昂贵且复杂的数据库，就是一件很自然的事情，这些专家就是DBA。&lt;/p&gt;
&lt;p&gt;接下来事情出现了有趣的变化：随着PostgreSQL/MySQL这些开源数据库的兴起，公司们有了一个新选择：不用软件授权费用即可使用数据库软件，而它们也开始（不理性地）停止为数据库专家付费：维护数据库的工作被隐含在了研发与运维的附属职责中，而这两类人通常：既不擅长、也不喜欢、更不在乎照顾数据库的事情。直到公司的规模足够大，或者吃到足够的苦头之后，一些Dev/Ops才会培养出相应的能力来，不过这是相当罕见的事情。&lt;/p&gt;
&lt;p&gt;接下来，云出现了。云实际上是一种运维外包，将DBA工作中属于运维部分，最具像化的部分给自动化了：高可用，备份/恢复，配置，置备。DBA仍然剩下很多事情，但普通麻瓜难以理解此类工作的价值，这部分职责依然静悄悄地落在了研发与运维工程师的身上。“不要钱” 的开源数据库可以让我们自由随意地使用数据库软件，因此随着微服务哲学兴起，用户开始给每个小服务弄一个单独的数据库，而不是很多应用共享一个巨大的中央共享数据库。在这种情况下，数据库被视作每个服务的一部分，可以更方便的把DBA的活推给研发了。&lt;/p&gt;
&lt;p&gt;那么，云之后是什么？DBA还会是一份好的工作吗？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;核心价值&#34;&gt;核心价值&lt;/h2&gt;
&lt;p&gt;很多地方都需要DBA：糟糕的模式设计，奇烂的查询性能，鬼知道有没有用的备份；等等等等。可惜的是，从事软件工作的人中，很少有人了解什么是DBA。成为DBA，意味着与研发人员创造的熵进行永无休止的战斗。&lt;/p&gt;
&lt;p&gt;DBA，Database Administrator，数据库管理员，以前也叫做数据库协调员、数据库程序员。DBA是一个横跨于研发团队与运维团队的广博角色，涉及DA、SA、Dev、Ops、以及SRE的多种职责，负责各种与数据与数据库有关的问题：设置管理策略与运维标准，规划软硬件架构，协调管理数据库，验证表模式设计，优化SQL查询，分析执行计划，乃至于处理紧急故障以及抢救数据。&lt;/p&gt;
&lt;p&gt;DBA的第一点价值在于&lt;strong&gt;安全兜底&lt;/strong&gt;：他是企业核心数据资产的守护者，也是可以轻易对企业造成致命伤害的人。在蚂蚁金服有个段子，能搞死支付宝的，除了监管就是DBA了。高管们通常也很难意识到 DBA 对于公司的重要性，直到出了数据库事故，一堆CXO紧张地站在DBA背后观看救火修复过程时…。&lt;/p&gt;
&lt;p&gt;DBA的第二点价值在于&lt;strong&gt;性能优化&lt;/strong&gt;。许多公司并不在乎他们的查询是纯狗屎，他们只是觉得“硬件很便宜”，砸钱买硬件就好了。然而问题在于，一个调整不当的查询/SQL或设计不当的数据模型与表结构，可以对性能产生&lt;strong&gt;几个数量级&lt;/strong&gt;的影响。总会在某一个规模，堆硬件的成本相比雇佣一个靠谱DBA的成本高得令人望而却步。实话说，我认为大多数公司在IT软硬件开销中花费最大的是：&lt;strong&gt;开发人员没有正确使用数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;优秀的DBA还会负责&lt;strong&gt;数据模型设计与优化&lt;/strong&gt;。数据建模和SQL几乎已成为一门失传的艺术，这类基础知识逐渐为新一代工程师遗忘，他们设计出离谱的模式，不懂得正确地创建索引，然后草率得出结论：关系型数据库和SQL都是垃圾，我们必须使用糙猛快的NoSQL来省时间。然而人们总是需要可靠的系统来处理关键业务数据：在许多企业中，核心数据仍然是一个常规关系型数据库作为&lt;strong&gt;Source of Truth&lt;/strong&gt;，NoSQL数据库仅用于非关键数据。&lt;/p&gt;
&lt;p&gt;对于尚未进入PMF的初创企业，雇佣一个全职DBA是奢侈的行为。然而在一个大型组织中，一个好的DBA是至关重要的。不过好的DBA相当稀有，以至于这个角色在大多数组织中只能外包：包给专业的数据库服务公司，包给云数据库RDS服务团队，或者&lt;strong&gt;内包&lt;/strong&gt;给自己的研发/运维人员。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba的未来&#34;&gt;DBA的未来&lt;/h2&gt;
&lt;p&gt;许多公司都雇用DBA，DBA类似于Cobol程序员，除了科技公司/初创企业外：那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，也大量使用了这些关系型数据库。在可预见的未来，DBA在某个地方找工作是不会有什么问题的。&lt;/p&gt;
&lt;p&gt;尽管数据库专家对于大型组织与大型数据库而言非常重要，不幸的是，DBA作为一份职业前景可能是晦涩暗淡的。大趋势是数据库本身会越来越智能，易用性越来越好，而各式各样的工具、SaaS、PaaS不断涌出，也会进一步压低数据库的使用门槛。公有云/私有云DBasS的出现更是让数据库的门槛进一步下降，只要掏钱就可以迅速达到优秀DBA的廉价七成正确水准。&lt;/p&gt;
&lt;p&gt;数据库的专业技术门槛降低，将导致DBA的不可替代性降低：安装一套软件收费十几万，做一次数据恢复上百万的好日子肯定是一去不复返了。但对于开源数据库软件社区生态来说，却是一件好事：将会有更多的开发者有能力来使用它，并或多或少扮演着DBA的角色。&lt;/p&gt;
&lt;h3 id=&#34;云会革了运维与dba的命吗&#34;&gt;&lt;strong&gt;云会革了运维与DBA的命吗？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;无论是公有云厂商，还是以Kubernetes为代表的云原生/私有云，其核心价值都在于&lt;strong&gt;使用软件，而不是人来应对系统复杂度&lt;/strong&gt;。那么，云软件会革了运维与DBA的命吗？&lt;/p&gt;
&lt;p&gt;从长期来看，这类云软件代表着先进生产力的发展方向。对于云原生环境中成长起来的新一代开发者，对于他们来说K8S才是操作系统，底下的Linux、网络、存储都属于魔法巫术，成为极少数人才会关心的“底层细节”。大概就像现在我们作为应用研发人员，看待汇编语言指令集，摆弄内存扣字节差不多。但就像人工智能的三起三落一样：&lt;strong&gt;过早追逐潮流的人不一定是先驱，而有大概率成为先烈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无论是系统管理员还是数据库管理员，管理员这个岗位消失的唯一方式是，它们被重命名为“DevOps Engineer”或SRE。云并不会消灭管理员，你可能需要更少的人手来打理这些云软件，但总归还是需要人来管理的：从整个行业的视角看，云软件的推广会让100个初中级运维（传统系统管理员）的工作岗位变成10个中高级运维岗位（DevOps/SRE），同样的事也有可能发生在DBA身上。例如，现在也出现了与SRE相对应的 &lt;strong&gt;DRE&lt;/strong&gt;：&lt;strong&gt;Database Reliability Enginee&lt;/strong&gt;r。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&lt;img alt=\&#34;img\&#34; src=\&#34;https://mmbiz.qpic.cn/mmbiz_png/Wkpr3rA9wF3tOia3iaRAvic4V4zEatQO3wLxHQsF1Ag4mibeOiccL2KxWv0ngWGKlQ4aB9WseuqnEB1fJjBB8ZxOcqQ/0?wx_fmt=png&amp;from=appmsg\&#34;&gt;&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/dre.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Database Reliability&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从另一方面来说，云RDS提供的性能与可靠性属于廉价七成正确的大锅饭，比起优秀专职DBA所精心照顾的本地数据库表现仍然相距甚远。云数据库就像IT中的每一轮炒作一样：东西很受欢迎，每个人都为玩具Demo着迷，直到将其投入生产。然后他们终于发现了时尚潮流的垃圾箱火灾是什么样的，并回头开始研究久经考验的真实技术。总是一样的，人工智能便是前车之鉴。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;cost-sec.webp&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/cost-sec.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公有云RDS的两大核心问题：成本/自主可控&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管DBA听上去是一个有着光辉历史与暗淡前景的行当，但未来仍未可知。天知道在几次恐怖的重大云数据库事故后，DBA会不会重新成为潮流呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;做点什么&#34;&gt;做点什么？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;开源免费&lt;/strong&gt;的数据库发行版解决方案，也能让大批量研发/运维工程师成为合格的兼职DBA。而这就是我正在做的事情：&lt;strong&gt;Pigsty —— 开箱即用的开源数据库发行版&lt;/strong&gt;， 上手即用，量产DBA。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-arch.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-arch.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 架构简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-mon.png&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-mon.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty监控界面概览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是一个PostgreSQL DBA，但也是软件架构师与全栈应用开发者。Pigsty是我用软件来完成自己作为DBA的工作的一次尝试：它成功的完成了我大部分的日常工作：无可比拟的监控系统能为性能优化与故障排查预警提供扎实的数据支持，自动切换的高可用集群能让我在故障时游刃有余甚至睡醒了觉再慢慢处理，一键安装部署扩缩容备份恢复则将日常管理事务变为了零星几条命令的事。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty-desc.webp&#34; src=&#34;/zh/blog/cloud/is-dba-good-job/pigsty-desc.webp&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is Pigsty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您想要使用PostgreSQL / Redis / Greenplum 等数据库，比起聘请昂贵稀缺的专职DBA，或使用费用高昂无法自主可控的云数据库，也许这是一个不错的替代选择。扫码加公众号与微信交流群了解更多。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 云RDS：从删库到跑路</title>
      <link>/zh/blog/cloud/drop-rds/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/drop-rds/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/drop-rds/featured_hud41464d74e16635b9792e52579298075_154559_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;上一篇文章《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485064&amp;idx=1&amp;sn=6225a044d8f145cdb07a21a1e0c54ad8&amp;chksm=fe4b3353c93cba4582576b4de151ac48247052a1494adcc820dc64a32dafb0b99e33085c7bbb&amp;scene=21#wechat_redirect&#34;&gt;DBA还是份好工作吗&lt;/a&gt;》中提到：尽管DBA作为一份职业在没落，但谁也保不准DBA会不会在几次恐怖的大规模云数据库故障后，重新成为潮流。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/AGEW1iHQkQy4NQyYC2GonQ&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/drop-rds/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这不，最近就目睹了一场云数据库删库跑路现场情景剧。本文就来聊一聊在生产环境使用PostgreSQL，如何应对误删数据的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mysql-dropdb.gif&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-mysql-dropdb.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rmrf.gif&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-rmrf.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;wm-dropdb.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-wm-dropdb.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;故障现场&#34;&gt;故障现场&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;case-1.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-case-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;case-2.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-case-2.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;看完了故事，我们不禁要问，我都已经花钱买了‘&lt;strong&gt;开箱即用&lt;/strong&gt;’的云数据库了，为啥连PITR恢复这么基本的兜底都没有呢？&lt;/p&gt;
&lt;p&gt;说到底，云数据库也是数据库，云数据库并不是啥都不用管的运维外包魔法，不当配置使用，一样会有数据丢失的风险。没有开启WAL归档就无法使用PITR，甚至无法登陆服务器获取现存WAL来恢复误删的数据。&lt;/p&gt;
&lt;p&gt;当然，这也得怪云厂商抠门心机，WAL日志归档PITR这些PG的基础高可用功能被云阉割掉了，放进所谓的“高可用”版本。WAL归档对于本地部署的实例来说，无非是加块磁盘配置条命令的事情。对象存储1GB一个月几分钱，最是廉价不过，但乞丐版云数据库还是要应省尽省，不然怎么卖“高可用”版的数据库呢？&lt;/p&gt;
&lt;p&gt;在Pigsty中，所有PG数据库集群都默认启用了WAL归档并每日进行全量备份：保留最近一日的基础&lt;strong&gt;冷备份&lt;/strong&gt;与WAL，允许用户回溯至当日任意时刻的状态。更是提供了开箱即用的&lt;strong&gt;延迟从库&lt;/strong&gt;搭建工具，防误删快人一步！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何应对删库&#34;&gt;如何应对删库？&lt;/h2&gt;
&lt;p&gt;传统的“高可用”数据库集群通常指的是基于主从物理复制的数据库集群。&lt;/p&gt;
&lt;p&gt;故障大体可以分为两类**：硬件故障/资源不足**（坏盘/宕机），&lt;strong&gt;软件缺陷/人为错误&lt;/strong&gt;（删库/删表）。&lt;strong&gt;基于主从复制的物理复制用于应对前者，延迟从库与冷备份通常用于应对后者&lt;/strong&gt;。因为误删数据的操作会立刻被复制到从库上执行，所以热备份与温备份都无法解决诸如 DROP DATABASE，DROP TABLE这样的错误，需要使用&lt;strong&gt;冷备份&lt;/strong&gt;或&lt;strong&gt;延迟从库&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;冷备份&#34;&gt;冷备份&lt;/h3&gt;
&lt;p&gt;在Pigsty中，可以通过为集群中的数据库实例指定角色（ &lt;code&gt;pg_role&lt;/code&gt; ），即可以创建物理复制备份，用于从机器与硬件故障中恢复。例如以下配置声明了一个一主两从的高可用数据库集群，带有一个热备一个温备，并自动制作每日冷备。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pg-backup.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pg-backup.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pg-backup&lt;/code&gt; 是一个Pigsty内置的开箱即用备份剧本，可自动制作基础备份。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pigsty.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Pigsty 所有的配置文件模板中，都配置有以下归档命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wal_dir=/pg/arcwal;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/mkdir -p ${wal_dir}/$(date +%Y%m%d) &amp;amp;&amp;amp; /usr/bin/lz4 -q -z %p &amp;gt; ${wal_dir}/$(date +%Y%m%d)/%f.lz4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认在集群主库上，所有WAL文件会自动压缩并按天归档，需要使用时，配合基础备份，即可将集群恢复至任意时间点。&lt;/p&gt;
&lt;p&gt;当然，您也可以使用 Pigsty 带有的 &lt;strong&gt;pg_probackup&lt;/strong&gt;, &lt;strong&gt;pg_backrest&lt;/strong&gt; 等工具来自动管理备份与归档。将冷备份与归档丢到云存储或专用备份中心，轻松实现&lt;strong&gt;异地跨机房容灾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;冷备份是经典的兜底备份机制，如果只有冷备份本身，那么系统将只能恢复到备份时刻到状态。如果加之以WAL日志，就可以通过在基础冷备份上重放WAL日志，&lt;strong&gt;将集群恢复到任意时间点&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;延迟从库&#34;&gt;延迟从库&lt;/h3&gt;
&lt;p&gt;冷备份虽然很重要，但对于核心业务来说，下载冷备份，解开压缩包，推进WAL重放需要很长一段时间，时间不等人。为了最小化RTO，可以使用另一种称为 &lt;strong&gt;延****迟从库&lt;/strong&gt;的技术来应对误删故障。&lt;/p&gt;
&lt;p&gt;延迟从库可以从主库接受实时的WAL变更，但延迟特定的时间再应用。从用户的视角来看，延迟从库就像主库在特定时间前的一份历史快照。例如，您可以设置一个延迟1天的从库，当出现误删数据时，您可以将该实例快进至误删前的时刻，然后立刻从延迟从库中查询出数据，恢复至原始主库中。下面的Pigsty配置文件声明了两个集群：一个标准的高可用一主一从集群 &lt;strong&gt;&lt;code&gt;pg-test&lt;/code&gt;&lt;/strong&gt;，以及一个该集群的延迟从库：&lt;strong&gt;&lt;code&gt;pg-testdelay&lt;/code&gt;&lt;/strong&gt;，为方便起见，配置1分钟的复制延迟：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pg-test 是原始集群&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.11&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;primary }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-test }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pg-testdelay 是 pg-test 的延迟集群&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-testdelay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.12&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role: primary , pg_upstream: 10.10.10.11, pg_delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1d }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.13&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 2, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replica }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-test2 }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;monitor.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-monitor.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在PGSQL REPLICATION监控面板中，&lt;code&gt;pg-test&lt;/code&gt;集群的复制指标如上图所示，启用复制延迟配置后，延迟从库&lt;code&gt;pg-testdelay-1&lt;/code&gt;有了稳定的1分钟“应用延迟”（Apply Delay），在LSN进度图表中，主库的LSN进度与延迟从库的LSN进度在水平时间轴上相差了正好1分钟。&lt;/p&gt;
&lt;p&gt;您也可以创建一个普通的备份集群，然后使用 **&lt;code&gt;pg edit-config pg-testdelay &lt;/code&gt;**的方式，来手工修改延迟的时长配置。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;edit-config.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-edit-config.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;修改延迟为1小时并应用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty提供了完善的备份支持，无需配置即可使用开箱即用的主从物理复制，绝大多数物理故障均可自愈。同时，还提供了延迟备库与冷备份支持，用于应对软件故障与人为误操作。您只需要准备几台物理机/虚拟机/或者云服务器，即可一键创建并拥有真正的高可用数据库集群！&lt;/p&gt;
&lt;p&gt;Pigsty，让您的数据库坚若磐石，除了高可用，还自带监控系统，完全开源免费！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：您依然可以使用&lt;/strong&gt; &lt;code&gt;pgsql-rm.yml&lt;/code&gt; **一键删光所有数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;又注：此行为受 &lt;code&gt;pg_safeguard&lt;/code&gt; ，&lt;code&gt;pg_clean&lt;/code&gt; 等一系列安全保险参数控制，以避免胖手指误删。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;pigsty.png&#34; src=&#34;/zh/blog/cloud/drop-rds/drop-rds-pigsty.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: DBA会被云淘汰吗？</title>
      <link>/zh/blog/cloud/dba-vs-rds/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/cloud/dba-vs-rds/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/cloud/dba-vs-rds/featured_hu02aa61ae1d9de35cbe238d2676170cb9_174858_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;前天开源漫谈第九期主题《&lt;a href=&#34;https://mp.weixin.qq.com/s/T4waTPvcSRdCv8pCl4MdOw&#34;&gt;DBA会被云淘汰吗？&lt;/a&gt;》，我作为主持人全程克制着自己亲自下场的冲动，因此特此写了这篇文章来聊聊这个问题 ： DBA 会被云淘汰吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/W1hwbl3qmjC4Dcmadc8uSg&#34;&gt;&lt;img src=&#34;/zh/blog/cloud/dba-vs-rds/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba帮助用户用好数据库&#34;&gt;DBA帮助用户用好数据库&lt;/h2&gt;
&lt;p&gt;很多地方都需要DBA：糟糕的模式设计，奇烂的查询性能，鬼知道有没有用的备份；等等等等。可惜的是，从事软件工作的人中，很少有人了解什么是DBA。成为DBA，意味着与研发人员创造的熵进行永无休止的战斗。&lt;/p&gt;
&lt;p&gt;DBA，Database Administrator，数据库管理员，以前也叫做数据库协调员、数据库程序员。DBA是一个横跨于研发团队与运维团队的广博角色，涉及DA、SA、Dev、Ops、以及SRE的多种职责，负责各种与数据与数据库有关的问题：设置管理策略与运维标准，规划软硬件架构，协调管理数据库，验证表模式设计，优化SQL查询，分析执行计划，乃至于处理紧急故障以及抢救数据。&lt;/p&gt;
&lt;p&gt;许多公司都会雇用DBA，传统的 DBA 类似 Cobol 程序员，除了科技公司/初创企业外：那些听上去不那么Fancy的制造业，银行保险证券、以及大量运行本地软件的党政军部门，也大量使用了这些关系型数据库。单花在这些商业数据库软件授权上的费用可能就有六七位数，加之相近的硬件成本与服务订阅成本。如果公司已经砸了成百上千万的钱在数据库软硬件上，那么再花一些钱雇佣一些专职专家来照顾这些昂贵且复杂的数据库，就是一件很自然的事情，这些专家就是传统的 DBA。&lt;/p&gt;
&lt;p&gt;接下来随着 PostgreSQL / MySQL 这些开源数据库的兴起，这些公司们有了一个新选择：不用软件授权费用即可使用数据库软件，而它们也开始（不理性地）停止为数据库专家付费：维护数据库的工作被隐含在了研发与运维的附属职责中，而这两类人通常：既不擅长、也不喜欢、更不在乎照顾数据库的事情。直到公司的规模足够大，或者吃到足够的苦头之后，一些Dev/Ops才会培养出相应的能力来，成为DBA —— 不过这是相当罕见的事情，而这也是今天我们讨论的主角 —— 开源数据库的 DBA。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;用好数据库的能力很稀缺&#34;&gt;用好数据库的能力很稀缺&lt;/h2&gt;
&lt;p&gt;培养开源数据库 DBA 的核心要素是&lt;strong&gt;场景&lt;/strong&gt;，而有足够复杂度和规模的场景是极其稀缺的，往往只有头部的大甲方才有。就好比国内 MySQL 的 DBA 主要产自重度使用 MySQL 的淘宝等互联网头部公司。而优秀 PostgreSQL DBA 基本上都出自去哪儿网、平安银行、探探这几个大规模使用 PG 的公司。顶级的开源数据库 DBA 的来源极其有限，基本是在顶级甲方用户中精通数据库的运维/研发，靠着真金白银的大故障与复杂场景的建设经验，才能零星砸出来几个。&lt;/p&gt;
&lt;p&gt;以中国的 PostgreSQL DBA 为例，根据圈内纯技术文传播阅览量，圈子规模大概在千人左右；但能建设架构超过 RDS 水准的数据库系统的 DBA 就收敛到几十个了；能自己打造更好的 RDS ，甚至做到对外复制输出最佳实践的更是凤毛麟角，一只手就能数过来。&lt;/p&gt;
&lt;p&gt;所以，当下数据库领域的主要矛盾，不是缺少更好更强大的新内核，而是&lt;strong&gt;极度匮乏用好管好现有数据库内核的能力&lt;/strong&gt; —— &lt;strong&gt;数据库太多，而司机太少！&lt;/strong&gt; 数据库内核已经发展了几十年，在内核上的小修小补边际收益已经很小了。而像 PostgreSQL 这样成熟开源数据库内核引擎出现，让卖商业数据库成为一门糟糕的生意 —— 开源数据库不需要高昂的软件授权费用，那么能用好这些免费的&lt;strong&gt;开源数据库&lt;/strong&gt;的老司机 —— DBA，就成为了最大的瓶颈与成本。&lt;/p&gt;
&lt;p&gt;在这个阶段，高级的经验都“垄断”在少数头部专家手中。实际上，这正好是开源真正的“商业模式” —— 创造高薪的技术专家岗位。然而这也出现了一个新的机会 —— 商业数据库产品因为开源替代的出现已经很难形成垄断了，但能用好开源数据库的DBA专家是屈指可数的，而垄断少数几个专家的难度比起干翻开源数据库要简单太多了。垄断不了数据库产品，就垄断用好它的能力！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;阶段&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;“商业模式”&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;阶段1&lt;/td&gt;
&lt;td&gt;商业数据库&lt;/td&gt;
&lt;td&gt;商业数据库软件垄断了数据库产品供给。&lt;/td&gt;
&lt;td&gt;天价软件授权&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段2&lt;/td&gt;
&lt;td&gt;开源数据库&lt;/td&gt;
&lt;td&gt;开源打破了商业数据库垄断，&lt;br /&gt;但技术垄断在少量头部开源专家手中。&lt;/td&gt;
&lt;td&gt;高薪专家岗位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段3&lt;/td&gt;
&lt;td&gt;云数据库&lt;/td&gt;
&lt;td&gt;云打破了开源专家技术垄断&lt;br /&gt;但在用好数据库的能力上形成垄断&lt;/td&gt;
&lt;td&gt;管控软件租赁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阶段4&lt;/td&gt;
&lt;td&gt;“云原生？”&lt;/td&gt;
&lt;td&gt;开源管控软件打破了云管控软件垄断&lt;br /&gt;用好数据库的能力普及到千家万户&lt;/td&gt;
&lt;td&gt;咨询保险兜底&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以，尽可能招揽能用好开源数据库的专家，打造一个共享专家池让稀缺的高级 DBA 得以时分复用，并和 DBA 经验沉淀而成的管控软件一起打包成服务出租，就是一种非常有利可图的商业模式 —— 而云数据库RDS 正是这样做的，并赚的钵满盆翻。&lt;/p&gt;
&lt;p&gt;云数据库使用的内核本身是开源免费的，所以云数据库提供的核心能力，正是和 DBA 一样的，&lt;strong&gt;帮助用户用好数据库的能力&lt;/strong&gt;！ 它真正的竞品不是其他商业数据库内核，或者开源数据库内核，而是 DBA —— 特别是处于中下游位置的 DBA。这就跟出租车公司要取代的不是汽车厂，而是全职司机一样。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dba的工作与自动化管控&#34;&gt;DBA的工作与自动化管控&lt;/h2&gt;
&lt;p&gt;除了 DBA 人力，还有什么办法可以获得用好数据库的能力？那我们就需要先来看一看 DBA 的工作模式。&lt;/p&gt;
&lt;p&gt;DBA的工作在时间上主要分为&lt;strong&gt;建设&lt;/strong&gt;与&lt;strong&gt;维护&lt;/strong&gt;两个阶段。在最初几个月的密集建设阶段会比较幸苦，需要负责搭建成熟的技术架构与管理体系；而当自动化建设完成，进入了维护阶段后 —— DBA的工作就要轻松很多了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;建设阶段&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;维护阶段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;管理层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库选型，制度建设&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库建模，查询设计，人员培训，SOP积累，开发规约&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;架构设计，服务接入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SQL审核 / SQL变更 / SQL优化 / 分库分表 / 数据恢复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;数据库层&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Infra建设，数据库部署&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备份恢复 / 监控告警 / 安全合规 / 版本升级 / 参数调优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作系统层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OS调优，内核调参&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储空间管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;硬件层&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;测试选型，驱动适配&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;（更换备件）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;体系建设并不是一蹴而就的一锤子买卖，而是一个水平随时间对数增长的演化过程。有兴趣研究折腾的DBA会持续致力于更高水平的自动化建设，将建设过程浓缩为可复制的经验、文档、流程、脚本、工具、方案、平台、&lt;strong&gt;管控软件&lt;/strong&gt;。管控软件也许是目前 DBA 经验沉淀的终极形态 —— 用软件代替自己干 DBA 的活儿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管控系统&lt;/strong&gt;的自动化水平越高，维护阶段所需的维护人力就越少。但是对于 DBA 水平的要求也就越高，所需的建设投入与时间周期也就越长。所以在某一个平衡点上，或者是自动化程度撞上了 DBA 水平的天花板，或者是高到了威胁DBA 的职业安全，建设演进就会告一段落，DBA 进入“喝茶看报”的持续维护状态。&lt;/p&gt;
&lt;p&gt;维护状态的系统，所需的&lt;a href=&#34;https://mp.weixin.qq.com/s/FIOB_Oqefx1oez1iu7AGGg&#34;&gt;智力带宽会显著下降&lt;/a&gt;。在建设完毕的良好系统架构中，如果只是日常性、规范性的工作，水平更低一些的 DBA 也足以维持，对高级 DBA 的时间需求也会戏剧性下降 —— 进入  “养兵千日，用兵一时” 的 “闲置” 状态，只有当出现紧急的故障与疑难杂症时，这些数据库专家老司机才能再次体现出自己的价值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;能力构成&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;普通用户-建设起步&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;100%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;普通用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;30%&lt;/strong&gt; 管控 + &lt;strong&gt;70%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顶级用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;90%&lt;/strong&gt; 管控 + &lt;strong&gt;9%&lt;/strong&gt; 运维人力 + &lt;strong&gt;1%&lt;/strong&gt; 专家人力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以 DBA 以前其实是一个非常不错的岗位，经过创业打江山的建设阶段之后，就可以躺在功劳簿上，享受建设成果带来的效率红利。 比如顶级甲方中的 DBA 经过长期建设，也许 90% 的工作内容都高度自动化了 —— 比如连硬件故障都靠高可用管控自愈了。DBA 只需要 10% 的救火/优化/指导/管理时间，那么剩下 90% 的时间就可以自由支配：继续改善管控软件实现利滚利，或者学习内核源码翻译书籍，或者单纯就是像 DBA 的先辈 —— ‘图书管理员“ 那样在图书馆里喝茶看报，好不惬意。&lt;/p&gt;
&lt;p&gt;然而 DBA 的这种舒适的生活被云数据库的模式打破了。首先，云厂商拿着已经建设好的管控软件批量复制分发，消灭了数据库建设阶段的重复性工作。其次，如果没有建设阶段，只有维护阶段，而维护工作只需要 DBA 10% 的时间，那么与其用 &lt;strong&gt;90%&lt;/strong&gt; 的时间摸鱼，总会有卷王选择当时间管理大师同时去打 10 份工。云厂商的数据库专家通过管控和共享 DBA，让这个IT领域难得的清闲岗位也卷翻了起来。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;云数据库的模式与新挑战&#34;&gt;云数据库的模式与新挑战&lt;/h2&gt;
&lt;p&gt;云数据库为什么会对 DBA 构成威胁？要解释这个问题，我们就需要先来聊一聊云数据库 RDS 的用户价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云数据库的核心价值是 “敏捷” 与 “兜底”&lt;/strong&gt;。至于什么 “便宜”，“简单”，“弹性”，“安全“，”可靠” 其实都不是核心，甚至也都不一定真的成立。所谓 “&lt;strong&gt;敏捷&lt;/strong&gt;” —— 翻译过来就是为用户省掉几个月的建设阶段工作，一步到位进入维护阶段 。所谓 “&lt;strong&gt;兜底&lt;/strong&gt;”，就是指用户真正出现疑难杂症，真正需要顶级 DBA 的高智力带宽时，云厂商为用户通过工单的方式提供保障 —— 至少你确实能摇到人来管一管。&lt;/p&gt;
&lt;p&gt;云数据库在技术上的核心壁垒，是&lt;strong&gt;沉淀了高级DBA经验的管控软件&lt;/strong&gt;。大部分DBA，包括不少顶级 DBA  —— 尽管其本身是数据库管理领域的专家，但却并没有研发能力 —— 可以自己将自己的领域知识与经验沉淀为可复制软件产品的能力。因此通常需要一个研发团队的辅助，来将高级DBA的领域知识转变为业务软件。&lt;/p&gt;
&lt;p&gt;这些沉淀了 DBA 经验的管控软件，就成为了云数据库的核心生产资料与&lt;a href=&#34;https://mp.weixin.qq.com/s/LefEAXTcBH-KBJNhXNoc7A&#34;&gt;摇钱树&lt;/a&gt;。核·月单位成本20块钱的硬件资源，套上管控软件，就能卖出 300～400（Aliyun），甚至 800～1300（AWS）这样几十倍的天价来。不过也正是RDS这样线性绑定硬件资源的定价策略，让一部分中级 DBA 现在还能有喘息空间 —— 当 RDS 规模达到 100核以上，招聘一个 DBA 自建维护就会达到 ROI 的转折点了。&lt;/p&gt;
&lt;p&gt;管控软件替代 DBA 工作的另一个好处是， DBA 可以加杠杆了！举个例子，如果你的管控软件可以自动化掉 DBA 90% 的工作，那么 同样的活就只需要一个DBA 10% 的时间，可以把一个 DBA 当十个用，所以 DBA 乘数就是10。如果你的管控软件简单易用，门槛很低，让普通运维/开发也能玩 DBA Cosplay，自助完成这 10% 工作中的 9%，那么就只需要专家 1% 的时间了，1个DBA可以当100个用！当然如果未来出现个 DBA 大模型，再把这 1% 的剩余工作替代 0.9% ，DBA 乘数就可以放大到 1000 倍了！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;管控软件&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DBA乘数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;普通用户-建设起步阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;100%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;普通用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30%管控 + &lt;strong&gt;70%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;云数据库&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;60% 管控 + 38% 人力 + &lt;strong&gt;2%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶级用户-维护阶段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;90% 管控 + 9% 人力 + &lt;strong&gt;1%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;未来状态想象&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;95% 管控 + 4% 大模型 + 0.9% 人力 + &lt;strong&gt;0.1%&lt;/strong&gt; DBA人力&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以，云厂商的模式和 银行很像。有所谓的 “存款准备金率” 和 “DBA乘数”，可以十个坛子甚至上百个坛子一个盖。充分释(ya)放(zha) DBA 老司机的空闲时间与剩余价值，用较低的人力成本，为更多的客户提供“兜底”服务。解决了 “用好数据库能力” 非常稀缺的问题，并赚的钵满盆翻。&lt;/p&gt;
&lt;p&gt;如果让我来实事求是的评价云数据库服务的质量水平，用百分制打分的话。那么顶级DBA的自建水准可以到 95～100 分，优秀 DBA 自建能达到八十分上下；云数据库的水平大约就在 70 分。可是中级 DBA 土法自建也就大概五六十分，初级DBA土法自建也就三四十分，运维兼职的土法自建可能也就十几分。头部的甲方确实看不上云数据库这种大锅饭，但这对于腰部的用户来说这简直太香了 —— 他们要的就是大锅饭，而比起采购天价的商业数据库与聘请稀缺的数据库老司机，RDS确实配得上一句“物美价廉”。&lt;/p&gt;
&lt;p&gt;第一：云数据库是预制菜，直接就能吃，不需要建设阶段；第二：云数据库是廉价七成正确的合格品，而相当一部分初中级DBA土法自建几个月，也都达不到 RDS 这样的水平；第三：云数据库是标准件，降低了DBA天马行空自由发挥带来的不确定性与不可替代性；第四：云数据库提供了共享专家，“兜底”了其余一些对 DBA 的需求，也解决了出问题摇不到人或者遇人不淑的担忧。所以对于那些规模偏小，水平一般的甲方用户来说，云数据库比起招聘培养一个初中级 DBA 自建很有吸引力。&lt;/p&gt;
&lt;p&gt;云数据库服务对 DBA 的冲击是结构性的。极度稀缺的顶尖 DBA 不受影响，一直会是云厂商争相笼络招安拉拢的香饽饽。而胸部以下的 DBA ，或者说自建水平达不到 70 分的 DBA ，就会直接面临云数据库服务的生态位竞争。对于 DBA 这个行业来说，这不是一件好事 —— 因为高级 DBA 都是从初级，中级DBA 成长起来的。如果诞生培育这些初中级DBA的土壤 —— 中小公司的数据库应用场景都被云厂商垄断截胡，那么这个行业金字塔就会被腰斩掉，顶级DBA的增量被断掉，存量被蚕食，最终也会成为无根之木。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;打破云数据库的核心壁垒&#34;&gt;打破云数据库的核心壁垒&lt;/h2&gt;
&lt;p&gt;云数据库会是未来吗？云数据库会像 “汽车替代马车” 那样革掉 DBA 的命吗？我不这么想，因为有力就会有反作用力。与时俱进的 DBA 们会用工具武装自己，重新回到舞台中央与 RDS 同台竞技。&lt;/p&gt;
&lt;p&gt;DBA 们想要与云数据库竞争，采用路德分子抵制技术进步的方式是没有用的。而应当用 “你强我更强” 的方式提高自己相对于云数据库的竞争力。而要做到这一点，DBA 需要用更低的成本，提供比RDS更高的价值。要做到这一点，质量、安全、可靠的部分我都不用担心 DBA 的专业能力，核心在于 “敏捷” 与 “兜底” 这两个问题：&lt;/p&gt;
&lt;p&gt;首先，把几个月的建设周期缩短到几天甚至几小时，做到“&lt;strong&gt;敏捷&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;其次，真的出现疑难杂症问题时，能够摇到顶级DBA来“&lt;strong&gt;兜底&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;解决前者要靠 &lt;strong&gt;管控软件&lt;/strong&gt;，解决后者，要靠DBA老司机。而前者的紧迫性要远远高于后者 —— 建设良好的系统也许跑个几年都不会遇到需要 ”兜底“ 的问题，让普通 DBA 人人都成为老司机也不现实。而如何敏捷、低成本的拉起一套 70 分以上的数据库服务体系，是 DBA 应对 RDS 挑战的核心问题。&lt;/p&gt;
&lt;p&gt;而这，正是我发起 &lt;a href=&#34;https://mp.weixin.qq.com/s/-E_-HZ7LvOze5lmzy3QbQA&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt; 这个开源项目的初衷 —— 提供一个完全开源免费，且质量更好的 RDS PG 替代品。让普通的DBA/研发/运维人员都能以同样的敏捷的方式迅速建设交付 80分+ 的本地 RDS 服务！彻底解决掉第一个问题。而我自己的商业模式是咨询与服务，为这些疑难杂症提供商业支持与最后兜底，解决第二个问题。&lt;/p&gt;
&lt;p&gt;一个开源且足够好的数据库管控软件，会直接颠覆云数据库的商业模式。举个最简单的例子，你完全可以拿同样具有弹性的云服务器 ECS  和云盘 ESSD，使用开源管控来自建 RDS 服务。在不损失云所鼓吹的“弹性”与“敏捷”以及各种RDS好处的前提下，在不需要额外的人手的情况下，立竿见影的省掉 60% ～ 90% 不等的 “纯RDS溢价”。如果在使用自有服务器纯自建的情况下，能带来的&lt;a href=&#34;https://mp.weixin.qq.com/s/1OSRcBfd58s0tgZTUZHB9g&#34;&gt;降本增效水平&lt;/a&gt;恐怕会超出绝大多数用户的认知。&lt;/p&gt;
&lt;p&gt;Pigsty 会重新设置云数据库服务的基线水平，所有质量不及它的PG管控软件价值都会逐渐萎缩归零，这是数据库管理领域的核武器扩散，是站在道德高地上的开源倾销。和当年开源数据库掀翻商业数据库的桌子是一模一样的，只不过这一次发生在了另一个维度 —— 管控软件 上。Pigsty 为所有 PG DBA 立即装备上了瞬间完成高水平数据库服务建设与交付的魔法棒，也让更多的研发/运维可以扮演 PG DBA 的角色，瞬间量产出大量的初级 DBA 来。&lt;/p&gt;
&lt;p&gt;当然作为开源的管控软件，Pigsty 确实和云数据库管控一样，替代了很大一部分的 DBA 工作内容，特别是运维性的部分。但和云数据库不一样的是，它掌握在 DBA 自己的手中，由DBA所拥有，控制，使用，而不是只能向云计算领主去租赁并”替代“DBA。更强生产力带来的闲暇时间红利与DBA乘数杠杆，会直接普及到每一个从业者手中。而这，就是我作为一个顶尖DBA对于 RDS 挑战的回复。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何面对云数据库的冲击&#34;&gt;如何面对云数据库的冲击&lt;/h2&gt;
&lt;p&gt;对于广大初中级 DBA 来说，我认为应对云数据库挑战的最佳办法就是立即放弃周期长，效果良莠不齐的土法自建尝试，直接拥抱成熟的开源管控软件，快速放大自己相对于云数据库的竞争力 —— 这一部分是完全开源免费，掌握在你自己手中的生产资料与能力。如果需要疑难杂症兜底，我非常乐意以一个相比于云数据库极有竞争力的价格提供支持、咨询与答疑。&lt;/p&gt;
&lt;p&gt;请不要再来问我：PostgreSQL 高可用如何做？PITR 备份恢复怎么搞？可观测性与监控系统如何搭建？如何用配置IaC管理几百套数据库集群？连接池如何配置管理？负载均衡与服务接入怎么做？上百个扩展插件如何编译分发打包？主机参数怎么调优？上线/下线/扩容/缩容/滚动升级/数据迁移这些怎么做？这些你真正会遇到的问题，也是我曾经遇到的问题，而我已经在 Pigsty 中我都给出了工具化的最佳实践与版本答案，并配有 DBA SOP 手册，让小白也能快速上手玩起 DBA Cosplay。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对于顶级DBA与同侪们，我倡议合力打造开源共有的管控软件，并基于此提供专业数据库服务。与其你搞一套云管，我搞一套云管，投入大量的研发人力搞低水平、重复性的建设，倒不如凝聚起来打造公有的开源管控，打造中国社区里真正有世界影响力的开源项目品牌。Pigsty 是一个很不错的候选开源项目 —— 在当下，它已经成为&lt;a href=&#34;https://mp.weixin.qq.com/s/79_PnX-a5iSfDMgz_VUx5A&#34;&gt;中国人主导的 PostgreSQL 生态开源项目中排名最前的项目了&lt;/a&gt;。它也许有机会成为 PostgreSQL 世界中的 Debian 与 Ubuntu，但这取决于所有每一个贡献者与每一个用户。&lt;/p&gt;
&lt;p&gt;我也不靠 Pigsty 来赚钱，和许多数据库服务公司一样，靠的也是提供专业的咨询与服务。这也许不是资本市场喜欢听的那种 “Scale to the Moon” 的故事，但确实可以解决用户的痛点需求。我一个人即使再牛逼，能打 200 份 PG DBA 的工吗？不能！但 Pigsty 这个管控工具可以让每一个 PG DBA 老司机都加上这样的杠杆，去为社会提供真正有价值的咨询与服务，从而卷翻云数据库！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;例如提供 MySQL 专家服务的 Percona ，负责 PostgreSQL 部门的头 Umair Shahid 就很敏锐地看到了这个趋势。他从 Percona 出来，成立了自己的创业公司 Stormatics 来提供专业 PostgreSQL 服务。他没有自己再 “研发” 一套什么 PG云数据库管控平台之类的东西，而是直接使用 Pigsty 进行系统交付。同样也有一些意大利，美国，国内的数据库公司在使用 Pigsty 交付 PostgreSQL 服务。我对此表示热烈欢迎、并愿意提供支持与帮助。&lt;/p&gt;
&lt;p&gt;数据库产品的模式正在消亡，而数据库咨询与专家服务的模式方兴未已。用好数据库是一个门槛很高的领域，即使强如&lt;a href=&#34;https://mp.weixin.qq.com/s/CicctyvV1xk5B-AsKfzPjw&#34;&gt;下云先锋 DHH&lt;/a&gt;，抠门大王也依然会有一笔采购 Percona MySQL 专家服务的开销来请专业的人解决专业的问题。比起出卖尊严去包装换皮套壳吹牛撒谎打造使用价值微乎其微的（Minor PG fork） “新数据库内核产品” ，倒不如堂堂正正地去为用户提供真正有价值的数据库专家咨询与服务 。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在当下，服务器硬件资源非常便宜，数据库内核软件开源免费且足够牛逼，现在，如果管控软件不再被云厂商垄断，那么提供完整数据库服务的核心要素，就只剩下了用于兜底的&lt;strong&gt;专家能力&lt;/strong&gt;！AI 与 GPT 的出现更是让单个数据库专家的杠杆乘数放大到一个惊人的地步。&lt;/p&gt;
&lt;p&gt;所以，有很多云厂商内部的数据库老司机都敏锐地洞察到了这个趋势，选择脱离云厂商自己出来单干！比如从阿里云出来的就有，唐成老师的乘数科技，曹伟老师的Kubeblocks，叶正盛老师的 NineData，等等等等。所以即使是云数据库厂商内部的团队，也不是铁板一块。团队也在剧烈变动，凋零失血，人心思变中。&lt;/p&gt;
&lt;p&gt;我相信未来的世界，不会是一个云数据库垄断的世界。各家 RDS 管控的质量水平长期止步不前，已经达到了场景土壤所容许的能力天花板。而顶尖 DBA 的经验沉淀下来的生产力工具则更进一步，让许多腰部 DBA 面对 RDS 都能重新有一战之力。与时俱进的 DBA 们会用工具武装自己，与 RDS 同台竞技。而我愿意替天行道，扛起下云与自建替代的大旗，开发这些管控软件与工具并普及到每一个DBA手中，帮助 DBA 打赢反抗云数据库的战斗！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 开箱即用的PG发行版：Pigsty</title>
      <link>/zh/blog/pg/pigsty-intro/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/pigsty-intro/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/pigsty-intro/featured_huac65873cc82d4b223c0d8501f51e0f1b_87114_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;h2 id=&#34;什么是pigsty&#34;&gt;什么是Pigsty&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pigsty是开箱即用的生产级开源PostgreSQL发行版&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;发行版（Distribution）&lt;/strong&gt;，指的是由数据库内核及其一组软件包组成的数据库整体解决方案。例如，Linux是一个&lt;strong&gt;操作系统内核&lt;/strong&gt;，而RedHat，Debian，SUSE则是基于此内核的&lt;strong&gt;操作系统发行版&lt;/strong&gt;。PostgreSQL是一个&lt;strong&gt;数据库内核&lt;/strong&gt;，而&lt;strong&gt;Pigsty&lt;/strong&gt;，BigSQL，Percona，各种云RDS，换皮数据库则是基于此内核的&lt;strong&gt;数据库发行版&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Pigsty区别于其他数据库发行版的五个核心特性为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全面专业&lt;/strong&gt;的&lt;strong&gt;监控系统&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定可靠&lt;/strong&gt;的&lt;strong&gt;部署方案&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单省心的用户界面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活开放&lt;/strong&gt;的&lt;strong&gt;扩展机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;免费友好&lt;/strong&gt;的&lt;strong&gt;开源协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这五个特性，使得Pigsty真正成为&lt;strong&gt;开箱即用&lt;/strong&gt;的PostgreSQL发行版。&lt;/p&gt;
&lt;h3 id=&#34;谁会感兴趣&#34;&gt;谁会感兴趣？&lt;/h3&gt;
&lt;p&gt;Pigsty面向的用户群体包括：DBA，架构师，OPS，软件厂商、云厂商、业务研发、内核研发、数据研发；对数据分析与数据可视化感兴趣的人；学生，新手程序员，有兴趣尝试数据库的用户。&lt;/p&gt;
&lt;p&gt;对于DBA，架构师等专业用户，Pigsty提供了独一无二的&lt;strong&gt;专业级&lt;/strong&gt;PostgreSQL监控系统，为数据库管理提供不可替代的价值点。与此同时，Pigsty还带有一个&lt;strong&gt;稳定可靠&lt;/strong&gt;，久经考验的生产级PostgreSQL部署方案，可在生产环境中自动部署带有监控报警，日志采集，服务发现，连接池，负载均衡，VIP，以及高可用的PostgreSQL数据库集群。&lt;/p&gt;
&lt;p&gt;对于研发人员（业务研发、内核研发、数据研发），学生，新手程序员，有兴趣尝试数据库的用户，Pigsty提供了门槛极低，&lt;strong&gt;一键拉起，一键安装&lt;/strong&gt;的&lt;strong&gt;本地沙箱&lt;/strong&gt;。本地沙箱除机器规格外与生产环境完全一致，包含完整的功能：带有开箱即用的数据库实例与监控系统。可用于学习，开发，测试，数据分析等场景。&lt;/p&gt;
&lt;p&gt;此外，Pigsty提供了一种称为“Datalet”的灵活扩展机制 。对数据分析与数据可视化感兴趣的人可能会惊讶地发现，Pigsty还可以作为数据分析与可视化的集成开发环境。Pigsty集成了PostgreSQL与常用的数据分析插件，并带有Grafana和内嵌的Echarts支持，允许用户编写，测试，分发数据小应用（Datalet）。如：“Pigsty监控系统的额外扩展面板包”，“Redis监控系统”，“PG日志分析系统”，“应用监控”，“数据目录浏览器”等。&lt;/p&gt;
&lt;p&gt;最后，Pigsty采用了免费友好的Apache License 2.0，可以免费用于商业目的。&lt;strong&gt;只要遵守Apache 2 License的显著声明条款，也欢迎云厂商与软件厂商集成与二次研发商用&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;全面专业的监控系统&#34;&gt;全面专业的监控系统&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-2.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can’t manage what you don’t measure.&lt;/p&gt;
&lt;p&gt;— Peter F.Drucker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty提供&lt;strong&gt;专业级&lt;/strong&gt;监控系统，面向专业用户提供不可替代的价值点。&lt;/p&gt;
&lt;p&gt;以医疗器械类比，&lt;strong&gt;普通监控系统&lt;/strong&gt;类似于心率计、血氧计，普通人无需学习也可以上手。它可以给出患者生命体征核心指标：起码用户可以知道人是不是要死了，但对于看病治病无能为力。例如，各种云厂商软件厂商提供的监控系统大抵属于此类：十几个核心指标，告诉你数据库是不是还活着，让人大致有个数，仅此而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专业级&lt;/strong&gt;监控系统则类似于CT，核磁共振仪，可以检测出对象内部的全部细节，专业的医师可以根据CT/MRI报告快速定位疾病与隐患：有病治病，没病健体。Pigsty可以深入审视每一个数据库中的每一张表，每一个索引，每一个查询，提供巨细无遗的全面指标（1155类），并通过几千个仪表盘将其转换为&lt;strong&gt;洞察&lt;/strong&gt;：将故障扼杀在萌芽状态，并为性能优化提供&lt;strong&gt;实时反馈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Pigsty监控系统基于业内最佳实践，采用Prometheus、Grafana作为监控基础设施。开源开放，定制便利，可复用，可移植，没有厂商锁定。可与各类已有数据库实例集成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-3.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;稳定可靠的部署方案&#34;&gt;稳定可靠的部署方案&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-4.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A complex system that works is invariably found to have evolved from a simple system that works.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;—John Gall, &lt;em&gt;Systemantics&lt;/em&gt; (1975)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库是管理数据的软件，管控系统是管理数据库的软件。&lt;/p&gt;
&lt;p&gt;Pigsty内置了一套以Ansible为核心的数据库管控方案。并基于此封装了命令行工具与图形界面。它集成了数据库管理中的核心功能：包括数据库集群的创建，销毁，扩缩容；用户、数据库、服务的创建等。Pigsty采纳“Infra as Code”的设计哲学使用了声明式配置，通过大量可选的配置选项对数据库与运行环境进行描述与定制，并通过幂等的预置剧本自动创建所需的数据库集群，提供近似私有云般的使用体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-5.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pigsty创建的数据库集群是&lt;strong&gt;分布式&lt;/strong&gt;、&lt;strong&gt;高可用&lt;/strong&gt;的数据库集群。Pigsty创建的数据库基于DCS、Patroni、Haproxy实现了高可用。数据库集群中的每个数据库实例在&lt;strong&gt;使用&lt;/strong&gt;上都是&lt;strong&gt;幂等&lt;/strong&gt;的，任意实例都可以通过内建负载均衡组件提供完整的读写服务，提供分布式数据库的使用体验。数据库集群可以自动进行故障检测与主从切换，普通故障能在几秒到几十秒内自愈，且期间只读流量不受影响。故障时。集群中只要有任意实例存活，就可以对外提供完整的服务。&lt;/p&gt;
&lt;p&gt;Pigsty的架构方案经过审慎的设计与评估，着眼于以最小复杂度实现所需功能。该方案经过长时间，大规模的生产环境验证，已经被互联网/B/G/M/F多个行业内的组织所使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;简单省心的用户界面&#34;&gt;简单省心的用户界面&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-6.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pigsty旨在降低PostgreSQL的使用门槛，因此在易用性上做了大量工作。&lt;/p&gt;
&lt;h3 id=&#34;安装部署&#34;&gt;安装部署&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Someone told me that each equation I included in the book would halve the sales.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;— Stephen Hawking&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty的部署分为三步：下载源码，配置环境，执行安装，均可通过一行命令完成。遵循经典的软件安装模式，并提供了配置向导。您需要准备的只是一台CentOS7.8机器及其root权限。管理新节点时，Pigsty基于Ansible通过ssh发起管理，无需安装Agent，即使是新手也可以轻松完成部署。&lt;/p&gt;
&lt;p&gt;Pigsty既可以在生产环境中管理成百上千个高规格的生产节点，也可以独立运行于本地1核1GB虚拟机中，作为开箱即用的数据库实例使用。在本地计算机上使用时，Pigsty提供基于Vagrant与Virtualbox的&lt;strong&gt;沙箱&lt;/strong&gt;。可以一键拉起与生产环境一致的数据库环境，用于学习，开发，测试数据分析，数据可视化等场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-7.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;用户接口&#34;&gt;用户接口&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Clearly, we must break away from the sequential and not limit the computers. We must state definitions and provide for priorities and descriptions of data. We must state relation‐ ships, not procedures.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;—Grace Murray Hopper, &lt;em&gt;Management and the Computer of the Future&lt;/em&gt; (1962)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty吸纳了Kubernetes架构设计中的精髓，采用声明式的配置方式与幂等的操作剧本。用户只需要描述“自己想要什么样的数据库”，而无需关心Pigsty如何去创建它，修改它。Pigsty会根据用户的配置文件清单，在几分钟内从裸机节点上创造出所需的数据库集群。&lt;/p&gt;
&lt;p&gt;在管理与使用上，Pigsty提供了不同层次的用户界面，以满足不同用户的需求。新手用户可以使用一键拉起的本地沙箱与图形用户界面，而开发者则可以选择使用&lt;code&gt;pigsty-cli&lt;/code&gt;命令行工具与配置文件的方式进行管理。经验丰富的DBA、运维与架构师则可以直接通过Ansible原语对执行的任务进行精细控制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-8.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;灵活开放的扩展机制&#34;&gt;灵活开放的扩展机制&lt;/h2&gt;
&lt;p&gt;PostgreSQL的 &lt;strong&gt;可扩展性（Extensible）&lt;/strong&gt; 一直为人所称道，各种各样的扩展插件让PostgreSQL成为了最先进的开源关系型数据库。Pigsty亦尊重这一价值，提供了一种名为“Datalet”的扩展机制，允许用户和开发者对Pigsty进行进一步的定制，将其用到“意想不到”的地方，例如：数据分析与可视化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-9.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们拥有监控系统与管控方案后，也就拥有了开箱即用的可视化平台Grafana与功能强大的数据库PostgreSQL。这样的组合拥有强大的威力 —— 特别是对于数据密集型应用而言。用户可以在无需编写前后端代码的情况下，进行数据分析与数据可视化，制作带有丰富交互的数据应用原型，甚至应用本身。&lt;/p&gt;
&lt;p&gt;Pigsty集成了Echarts，以及常用地图底图等，可以方便地实现高级可视化需求。比起Julia，Matlab，R这样的传统科学计算语言/绘图库而言，PG + Grafana + Echarts的组合允许您以极低的成本制作出&lt;strong&gt;可分享&lt;/strong&gt;，&lt;strong&gt;可交付&lt;/strong&gt;，&lt;strong&gt;标准化&lt;/strong&gt;的数据应用或可视化作品。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-10.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pigsty监控系统本身就是Datalet的典范：所有Pigsty高级专题监控面板都会以Datalet的方式发布。Pigsty也自带了一些有趣的Datalet案例：Redis监控系统，新冠疫情数据分析，七普人口数据分析，PG日志挖掘等。后续还会添加更多的开箱即用的Datalet，不断扩充Pigsty的功能与应用场景。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;免费友好的开源协议&#34;&gt;免费友好的开源协议&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/pigsty-intro/pigsty-v09-11.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Once open source gets good enough, competing with it would be insane.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Larry Ellison —— Oracle CEO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在软件行业，开源是一种大趋势，互联网的历史就是开源软件的历史，IT行业之所以有今天的繁荣，人们能享受到如此多的免费信息服务，核心原因之一就是开源软件。开源是一种真正成功的，由开发者构成的communism（译成&lt;strong&gt;社区主义&lt;/strong&gt;会更贴切）：软件这种IT业的核心生产资料变为全世界开发者公有，人人为我，我为人人。&lt;/p&gt;
&lt;p&gt;一个开源程序员工作时，其劳动背后其实可能蕴含有数以万计的顶尖开发者的智慧结晶。通过开源，所有社区开发者形成合力，极大降低了重复造轮子的内耗。使得整个行业的技术水平以匪夷所思的速度向前迈进。开源的势头就像滚雪球，时至今日已经势不可挡。除了一些特殊场景和路径依赖，软件开发中闭门造车搞自力更生已经成了一个大笑话。&lt;/p&gt;
&lt;p&gt;依托开源，回馈开源。Pigsty采用了友好的Apache License 2.0，&lt;strong&gt;可以免费用于商业目的&lt;/strong&gt;。&lt;strong&gt;只要遵守Apache 2 License的显著声明条款，也欢迎云厂商与软件厂商集成与二次研发商用&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于pigsty&#34;&gt;关于Pigsty&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A system cannot be successful if it is too strongly influenced by a single person. Once the initial design is complete and fairly robust, the real test begins as people with many different viewpoints undertake their own experiments&lt;/em&gt;.
— Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pigsty围绕开源数据库PostgreSQL而构建，PostgreSQL是世界上&lt;strong&gt;最先进的开源关系型数据库&lt;/strong&gt;，而Pigsty的目标就是：做&lt;strong&gt;最好用的开源PostgreSQL发行版&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在最开始时，Pigsty并没有这么宏大的目标。因为在市面上找不到任何满足我自己需求的监控系统，因此我只好自己动手，丰衣足食，给自己做了一个监控系统。没有想到它的效果出乎意料的好，有不少外部组织PG用户希望能用上。紧接着，监控系统的部署与交付成了一个问题，于是又将数据库部署管控的部分加了进去；在生产环境应用后，研发希望能在本地也有用于测试的沙箱环境，于是又有了本地沙箱；有用户反馈ansible不太好用，于是就有了封装命令的&lt;code&gt;pigsty-cli&lt;/code&gt;命令行工具；有用户希望可以通过UI编辑配置文件，于是就有了Pigsty GUI。就这样，需求越来越多，功能也越来越丰富，Pigsty也在长时间的打磨中变得更加完善，已经远远超出了最初的预期。&lt;/p&gt;
&lt;p&gt;做这件事本身也是一种挑战，做一个发行版有点类似于做一个RedHat，做一个SUSE，做一个“RDS产品”。通常只有一定规模的专业公司与团队才会去尝试。但我就是想试试，一个人可不可以？实际上除了慢一点，也没什么不可以。一个人在产品经理、开发者，终端用户的角色之间转换是很有趣的体验，而“Eat dog food”最大的好处就是，你自己既是开发者也是用户，你了解自己需要什么，也不会在自己的需求上偷懒。&lt;/p&gt;
&lt;p&gt;不过，正如高德纳所说：“带有太强个人色彩的系统无法成功”。 要想让Pigsty成为一个具有旺盛生命力的项目，就必须开源，让更多的人用起来。“当最初的设计完成并足够稳定后，各式各样的用户以自己的方式去使用它时，真正的挑战才刚刚开始”。&lt;/p&gt;
&lt;p&gt;Pigsty很好的解决了我自己的问题与需求，现在我希望它可以帮助到更多的人，并让PostgreSQL的生态更加繁荣，更加多彩。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
