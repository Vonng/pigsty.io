<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – 向量数据库</title>
    <link>/zh/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 向量数据库 on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 21 Nov 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: 专用向量数据库凉了吗？</title>
      <link>/zh/blog/db/svdb-is-dead/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/db/svdb-is-dead/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/svdb-is-dead/featured_hu583a2b2e73fbbcb56e273a2db1f20d17_312297_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;向量存储检索是个真需求，然而专用向量数据库已经凉了。—— 小微需求 OpenAI 亲自下场解决了，标准需求被加装向量扩展的现有成熟数据库抢占。留给专用向量数据库的生态位也许能支持一家专用向量数据库存活，但想靠讲AI故事来整活做成一个产业已经是不可能了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0eBZ4zyX6XjBQO0GqlANnw&#34;&gt;&lt;img src=&#34;/zh/blog/db/svdb-is-dead/featured.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;向量数据库是怎么火起来的&#34;&gt;向量数据库是怎么火起来的？&lt;/h2&gt;
&lt;p&gt;专用向量数据库早在几年前就出现了，比如 Milvus，主要针对的是非结构化多模态数据的检索。例如以图搜图（拍立淘），以音搜音（Shazam），用视频搜视频这类需求；PostgreSQL 生态的 pgvector，pase 等插件也可以干这些事。总的来说，算是个小众需求，一直不温不火。&lt;/p&gt;
&lt;p&gt;但 OpenAI / ChatGPT 的出现改变了这一切：大模型可以理解各种形式的文本/图片/音视频，并统一编码为同一维度的向量，而向量数据库便可以用来存储与检索这些AI大模型的输出 —— &lt;strong&gt;Embedding&lt;/strong&gt;《&lt;a href=&#34;https://mp.weixin.qq.com/s/R4jp1uTCiLOLGsiADZ9jxQ&#34;&gt;大模型与向量数据库&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;embedding.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-embedding.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;更具体讲，向量数据库爆火的关键节点是今年3月23日，OpenAI 在其发布的 &lt;a href=&#34;https://github.com/openai/chatgpt-retrieval-plugin&#34;&gt;chatgpt-retrieval-plugin&lt;/a&gt; 项目中推荐使用一个向量数据库，在写 ChatGPT 插件时为其添加“长期记忆”能力。然后我们可以看到，无论是 Google Trends 热搜，还是 Github Star 上，所有向量数据库项目的关注度都从那个时间节点开始起飞了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;trends.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-trends.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Trends 与 GitHub Star&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与此同时，数据库领域在投资领域沉寂了一段时间后，又迎来了一波小阳春 —— Pinecone，Qdrant，Weaviate 诸如此类的“专用向量数据库” 冒了出来，几亿几亿的融钱，生怕错过了这趟 AI 时代的基础设施快车。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;landscape.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-landscape.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向量数据库生态全景图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，这些暴烈地狂欢也终将以暴烈的崩塌收场。这一次茶凉的比较快，半年不到的时间，形势就翻天覆地了 —— 现在除了某些二流云厂商赶了个晚集还在发软文叫卖，已经听不到谁还在炒专用向量数据库这个冷饭了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;gartner-hype-cycle.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-gartner-hype-cycle.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;专用向量数据库神话的破灭还有多远？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;向量数据库是一个伪需求吗&#34;&gt;向量数据库是一个伪需求吗？&lt;/h2&gt;
&lt;p&gt;我们不禁要问，向量数据库是一个伪需求吗？答案是：向量的存储与检索是真实需求，而且会随着AI发展水涨船高，前途光明。但这和专用的向量数据库并没有关系 —— 加装向量扩展的经典数据库会成为绝对主流，而&lt;strong&gt;专用的向量数据库是一个伪需求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;类似 Pinecone，Weaviate，Qdrant，Chroma 这样的专用向量数据库最初是为了解决 ChatGPT 的记忆能力不足而出现的 Workaround —— 最发布的 ChatGPT 3.5 的上下文窗口只有 4K Token，也就是不到两千个汉字。然而当下 GPT 4 的上下文窗口已经发展到了 128K，扩大了32倍，足够塞进一整篇小说了 —— 而且未来还会更大。这时候，用作临时周转的垫脚石 —— 向量数据库 SaaS 就处在一个尴尬的位置上了。&lt;/p&gt;
&lt;p&gt;更致命的是 OpenAI 在今年11月首次开发者大会上发布的新功能 —— GPTs，对于典型的中小知识库场景，OpenAI 已经替你封装好了 “记忆” 与 “知识库” 的功能。你不需要折腾什么向量数据库，只要把知识文件上传上去写好提示词告诉 GPT 怎么用，你就可以开发出一个 Agent 来。尽管目前知识库的大小仅限于几十MB，但这对于很多场景都绰绰有余，而且上限仍有巨大提升空间。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;gpts.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-gpts.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GPTs 将 AI 的易用性提高到一个全新的层次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像 Llama 这样的开源大模型与私有化部署为向量数据库扳回一局 —— 然而，这一部分需求却被加装了向量功能的经典数据库占领了 —— 以 PostgreSQL 上的 PGVector 扩展为先锋代表，其他数据库如 Redis，ElasticSearch， ClickHouse， Cassandra 也紧随其后不甘示弱。说到底，向量与向量检索是一种新的数据类型和查询处理方法，而不是一种全新的基础性数据处理方式。加装一种新的数据类型与索引，对设计良好的现有数据库系统来说并不是什么复杂的事情。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pgvector-langchain.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-pgvector-langchain.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地私有化部署的 RAG 架构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更大的问题在于，尽管数据库是一件门槛很高的事，但“向量”部分可以说没有任何技术门槛，而且诸如 FAISS 和 SCANN 这样的成熟开源库已经足够完美地解决这个问题了。对于有足够大规模足够复杂的场景的大厂来说，自家工程师可以不费吹灰之力地使用开源库实现这类需求，更犯不上用一个专用向量数据库了。&lt;/p&gt;
&lt;p&gt;因此，专用向量数据库陷入了一个死局之中：小需求 OpenAI 亲自下场解决了，标准需求被加装向量扩展的现有成熟数据库抢占，支持超大型需求也几乎没什么门槛，更多可能还要靠模型微调。留给专用向量数据库的生态位也许能足以支持一家专用向量数据库内核厂商活下来，但想做成一个产业是不可能了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;通用数据库-vs-专用数据库&#34;&gt;通用数据库 vs 专用数据库&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一个合格的向量数据库，首先得是一个合格的数据库&lt;/strong&gt;。但是数据库是一个相当有门槛的领域，从零开始做到这一点并不容易。我通读了市面上专用向量数据库的文档，能勉强配得上“数据库”称呼的只有一个 Milvus —— 至少它的文档里还有关于备份 / 恢复 / 高可用的部分。其他专用向量数据库的设计，从文档上看基本可以视作对“数据库”这个专业领域的侮辱。&lt;/p&gt;
&lt;p&gt;“向量”与“数据库”这两个问题的本质复杂度有着天差地别的区别，以世界上最流行的 PostgreSQL 数据库内核为例，它由上百万行C语言代码编写而成，解决“数据库”这个问题；然而基于 PostgreSQL 的向量数据库扩展 &lt;code&gt;pgvector&lt;/code&gt; 只用了不到两千行不到的 C 代码，就解决了“向量”存储与检索的问题。这是对“向量”相对于与“数据库”这件事复杂度门槛的一个粗略量化：&lt;strong&gt;万分之一&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distro.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-distro.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果算上生态扩展，对比就更惊人了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也从另一个角度说明了向量数据库的问题 —— “向量”部分的门槛太低。数组数据结构，排序算法，以及两个向量求点积这三个知识点是大一就会讲的通识，稍微机灵点的本科生就拥有足够的知识来实现这样一个所谓的“专用向量数据库”，很难说这种编程大作业，LeetCode 简单题级别的东西有什么技术门槛 。&lt;/p&gt;
&lt;p&gt;关系型数据库发展到今天已经相当完善了 —— 它支持各种各样的数据类型，整型，浮点数，字符串，等等等等。如果有人说要重新发明一种新的专用数据库来用，其卖点是支持一种“新的”数据类型 —— &lt;strong&gt;浮点数组&lt;/strong&gt;，核心功能是计算两个数组的距离并从库中找出最小者，而代价是其他的数据库活计几乎都没法整了，那么稍有经验的用户和工程师都会觉得 —— 这人莫不是得了失心疯？&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;prymaid.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-prymaid.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库需求金字塔：性能只是选型考量之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在绝大多数情况下，使用专用向量数据库的弊都要远远大于利：数据冗余、 大量不必要的数据搬运工作、分布式组件之间缺乏一致性、额外的专业技能带来的复杂度成本、学习成本、以及人力成本、 额外的软件许可费用、极其有限的查询语言能力、可编程性、可扩展性、有限的工具链、以及与真正数据库相比更差的数据完整性和可用性。用户唯一能够期待的收益通常是&lt;strong&gt;性能&lt;/strong&gt; —— 响应时间或吞吐量，然而这个仅存的“优点”很快也不再成立了…&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;案例pvppgvector-vs-pinecone&#34;&gt;案例PvP：pgvector vs pinecone&lt;/h2&gt;
&lt;p&gt;抽象的理论分析不如实际的案例更有说服力，因此让我们来看一对具体的对比：pgvector 与 pinecone。前者是基于 PostgreSQL 的向量扩展，正在向量数据库生态位中疯狂攻城略地；后者是专用向量数据库 SaaS，列于 OpenAI 首批专用向量库推荐列表首位 —— 两者可以说是通用数据库与专用数据库中最典型的代表。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pinecone.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-pinecone.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Pinecone 的官方网站上，Pinecone 提出的主要亮点特性是：“高性能，更易用”。首先来看专用向量数据库引以为豪的&lt;strong&gt;高性能&lt;/strong&gt;。Supabase 给出了一个最新的&lt;a href=&#34;https://supabase.com/blog/pgvector-vs-pinecone&#34;&gt;测试案例&lt;/a&gt;，以 ANN Benchmark 中的 DBPedia 作为基准，这是由一百万个 OpenAI 1536 维向量组成的数据集。在相同的召回率下，PGVector 都有着更佳的延迟表现与总体吞吐，而且成本上要便宜得多。即使是老版本的 IVFFLAT 索引，都比 Pinecone 表现更好。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;bench.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-bench.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来自 Supabase - DBPedia 的测试结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管专用向量数据库 Pinecone 的性能更烂，但说实话：&lt;strong&gt;向量数据库的性能其实根本就不重要&lt;/strong&gt; —— 以致于生产上 100% 精确的全表暴力扫描 KNN 有时候都是一种切实可行的选项。更何况向量数据库需要与模型搭配使用，当大模型 API 的响应时间在百毫秒 ～ 秒级时，把向量检索的时间从 10ms 优化到 1ms 并不能带来任何用户体验上的收益。在全员HNSW索引的情况下，可伸缩性也几乎不可能成为问题 —— 语义搜索属于读远多于写的场景，如果你需要更高的 QPS 吞吐量，增配/拖从库就可以了。至于节省几倍资源这种事，以常见业务的规模与当下的资源成本来看，相比模型推理的开销只能说连三瓜两枣都算不上了。&lt;/p&gt;
&lt;p&gt;在易用性上，专用的 Python API 还是通用的 SQL Interface 更易用，这种事见仁见智 —— 真正的致命问题在于，许多语义检索场景都需要使用一些额外的字段与计算逻辑，来对向量检索召回的结果进行进一步的筛选与处理，即 —— 混合检索。而这些元数据往往保存在一个关系数据库里作为 Source of Truth。Pinecone 确实允许你为每个向量附加不超过 40KB 的元数据，但这件事需要用户自己来维护，基于API的设计会将专用向量数据库变成可扩展性与可维护性的地狱 —— 如果你需要对主数据源进行额外的查询来完成这一点，那为啥不在主关系库上直接以统一的 SQL 一步到位直接实现呢？&lt;/p&gt;
&lt;p&gt;作为一个数据库，Pinecone 还缺乏各种数据库应该具备的基础性能力，例如：备份/恢复/高可用、批量更新/查询操作，事务/ACID；此外，除了俭朴的 API Call 之外没有与上游数据源更可靠的数据同步机制。无法实时在召回率与响应速度之间通过参数来进行利弊权衡 —— 除了更改 Pod 类型在三档准确性中选择之外别无他法 —— 你甚至不能通过暴力全表搜索达到 100% 精确度 ，因为 Pinecone 不提供精确 KNN 这个选项！&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;pinecone-options.png&#34; src=&#34;/zh/blog/db/svdb-is-dead/svdb-pinecone-options.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;并不只有 Pinecone 是这样，除了 Milvus 之外的其他几个专用向量数据库也基本类似。当然也有用户会抗辩说一个 SaaS 如何与数据库软件做对比，这并不是一个问题，各家云厂商的 RDS for PostgreSQL 都已经提供了 PGVector 扩展，也有诸如 Neon / Supabase 这样的 Serverless / SaaS 和 &lt;a href=&#34;https://pigsty.cc&#34;&gt;Pigsty&lt;/a&gt; 这样的自建发行版。如果你可以用低的多的成本，拥有功能更强，性能更好，稳定性安全性更扎实的通用向量数据库，那么又为什么要花大价钱与大把时间去折腾一个没有任何优势的 “专用向量数据库”？想明白这一点的用户已经从 pinecone 向 pgvector 迁移了 —— 《&lt;a href=&#34;https://medium.com/@jeffreyip54/why-we-replaced-pinecone-with-pgvector-2f679d253eba&#34;&gt;为什么我们用 PGVector 替换了 Pinecone&lt;/a&gt;》&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;向量的存储与检索是一个真实需求，而且会随着AI发展水涨船高，前途光明 —— &lt;a href=&#34;https://mp.weixin.qq.com/s/BJkbtwl_SPx99GBOzPsJiA&#34;&gt;向量将成为AI时代的JSON&lt;/a&gt;；但这里并没有多少位置留给专用的向量数据库 —— 诸如 PostgreSQL 这样的头部数据库毫不费力的加装了向量功能，并以压倒性的优势从专用向量数据库身上碾过。留给专用向量数据库的生态位也许能支持一家专用向量数据库存活，但想靠讲AI故事来整活，做成一个产业已经是不可能了。&lt;/p&gt;
&lt;p&gt;专用向量数据库确实已经凉掉了，希望读者也不要再走弯路，折腾这些没有前途的东西了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 向量是新的 JSON</title>
      <link>/zh/blog/pg/vector-json-pg/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/zh/blog/pg/vector-json-pg/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/pg/vector-json-pg/featured_huce730e9630068787d1bd07a58d4aebf3_428852_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;“&lt;strong&gt;向量是新的JSON&lt;/strong&gt;”，这本身就是一种很有趣的说法。因为&lt;strong&gt;向量&lt;/strong&gt;（Vector）是一种已经被深入研究过的&lt;strong&gt;数学结构&lt;/strong&gt;，而 &lt;strong&gt;JSON&lt;/strong&gt; 是一种&lt;strong&gt;数据交换格式&lt;/strong&gt;。然而，在数据存储和检索的世界中，这两种数据表示方式都已经成为了各自领域的通用语言，成为（或即将成为）现代应用开发中必不可少的要素。如果按当下的趋势发展，&lt;strong&gt;向量将会像 JSON 一样，成为构建应用时的关键要素&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;生成型AI 引发的热潮促使开发者寻找一种简便的方法来存储与查询这些系统的&lt;strong&gt;输出&lt;/strong&gt;。出于很多因素，PostgreSQL 成为了最自然的选择。但即使是生成型AI 炒翻天也无法改变这一事实：向量并不是一种新的数据模式，它作为一种数学概念已经存在数百年了，而机器学习领域也对其已有半个世纪多的研究。向量的基础数据结构 —— &lt;strong&gt;数组&lt;/strong&gt;，几乎在所有初级导论性质的计算机科学课程中都会讲授。连 PostgreSQL 对向量运算的支持也已经有20多年的历史了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-1.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;高中数学知识：向量的余弦距离与相似度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那有什么东西是新的呢？其实是 AI/ML 算法的 &lt;strong&gt;易用性（Accessibility）&lt;/strong&gt;，以及如何将一些“真实世界”的结构（文本、图像、音频、视频）用向量的形式表示，并将其存储起来，以供应用实现一些有用的功能。有些人可能会说，把这些AI系统的输出（也就是所谓的“&lt;strong&gt;嵌入 Embedding&lt;/strong&gt;”）放进数据存储系统中并不是什么新把戏。所以这里我们得再次强调，真正的新模式是 &lt;strong&gt;易用性&lt;/strong&gt;：几乎所有应用都可以用这种近乎实时的方式查询并返回这些数据（文字图片音视频的向量表示）。&lt;/p&gt;
&lt;p&gt;不过，这些与 PostgreSQL 有什么关系？那关系可大了！&lt;strong&gt;高效存储检索向量 —— 这种普适泛用数据类型，可以极大地简化应用程序开发，让相关联的数据都存放在同一个地方，并让人们继续使用现有的工具链&lt;/strong&gt;。我们在十多年前的 JSON 上看到了这一点，现在我们在向量上也看到了这一点。&lt;/p&gt;
&lt;p&gt;要理解为什么向量是新的 JSON，让我们回顾一下 JSON —— 互联网通信的事实标准，当 JSON 崭露头角时发生了什么？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;json-简史postgresql-实现&#34;&gt;JSON 简史：PostgreSQL 实现&lt;/h2&gt;
&lt;p&gt;在 “JSON崛起” 期间，我主要还是一名应用开发者。我正在构建的系统，要么是将 JSON 数据发送到前端，使其可以完成某种操作（例如渲染一个可更新的组件），要么是与返回 JSON 格式数据的“现代”API交互。JSON 的好处在于其简单性（很容易阅读和操作），作为一种数据交换格式具有很强的表达力。JSON 确实简化了系统间的通信，无论是从开发还是运维的角度。但我是希望在JSON中看到一些我喜欢的东西 —— 在数据库这一侧，我是使用&lt;strong&gt;模式&lt;/strong&gt;（Schemas）的坚定支持者。&lt;/p&gt;
&lt;p&gt;虽然 JSON 最初是作为一种&lt;strong&gt;交换格式&lt;/strong&gt;而存在的，但人们确实会问 “为什么我不能直接存储和查询这玩意？” 这个问题引出了一种专门的数据存储系统 —— 可以用来存储和查询 JSON 文档。我确实试过好几种不同的 &lt;strong&gt;专用 JSON 存储系统&lt;/strong&gt;，来解决一个特定场景下的问题，但我并不确定我是否想把他们引入到自己的应用技术栈中 —— 出于性能与可维护性的原因 （我不会说具体是哪些，因为十多年过去，时过境迁了）。这就引出了一个问题 —— 能否在PostgreSQL中存储 JSON 数据？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL JSON 特性矩阵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我记得当年去参加 PostgreSQL 活动时的急切心情 —— 等待 PostgreSQL 对原生 JSON 存储检索支持的更新。我记得当 PostgreSQL 9.2 增加了基于文本的 JSON 类型支持时自己是多么的激动开心。PostgreSQL 对 JSON 最开始的支持是对所存储 JSON 内容的合法性校验，以及一些用于提取 JSON 文档数据的函数与运算符。那时候并没有原生的索引支持，但如果你需要根据文档中的某个 Key 进行频繁查询，还是可以使用 &lt;strong&gt;表达式索引&lt;/strong&gt; 功能来为你感兴趣的 Key 添加索引。&lt;/p&gt;
&lt;p&gt;PostgreSQL 对 JSON 的初步支持帮助我解决了一些问题，具体来说有：对数据库中几个表的状态做快照，以及记录我与之交互的 API 的输出。最初的基于文本的 JSON 数据类型在检索能力上乏善可陈：你确实可以构建表达式索引来根据 JSON 文档中的特定 Key 来走索引，但实践上我还是会把那个 Key 单独抽取出来放在与 JSON 相邻的单独列中。&lt;/p&gt;
&lt;p&gt;这里的关键在于：PG 对 JSON 的初步支持以 “JSON数据库”的标准来看还是很有限的。没错，我们现在可以存储 JSON，也拥有了一些有限的查询能力，但要和专用 JSON 数据库拼功能，显然还需要更多的工作。不过对于许多这样的用例，PostgreSQL仍然已经是&lt;strong&gt;足够好&lt;/strong&gt;了：&lt;strong&gt;只要能和现有的应用基础设施一起使用，开发者还是愿意在某种程度上接受这些局限性的&lt;/strong&gt;。PostgreSQL 也是&lt;strong&gt;第一个&lt;/strong&gt;提供 JSON 支持的关系型数据库，带了一波节奏，最终直接导致 JSON 进入到 SQL 标准中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-3.jpeg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;俄罗斯的 PostgreSQL 与 Oleg 对 PG JSON 特性居功至伟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;紧接着 PostgreSQL 作为 “JSON数据库” 的可行性，在 PostgreSQL 9.4 发布后出现质变：这个版本新增了 &lt;strong&gt;JSONB&lt;/strong&gt; 类型，这是 JSON 数据类型的二进制表示，而且可以使用 GIN 索引来索引 JSON 文档中的任意数据。这让 PostgreSQL 能在性能上与专用 JSON数据库旗鼓相当，同时还能保留有关系数据库的所有好处 —— 尽管适应并支持这类应用负载花费了 PostgreSQL 好几年的时间。&lt;/p&gt;
&lt;p&gt;PostgreSQL 对 JSON 的支持在过去的几年中持续发展演进，随着PostgreSQL不断实现和采纳 SQL/JSON 标准，未来也一定会继续保持这种发展势头。我曾与一些 PostgreSQL 用户聊过，他们在 PostgreSQL 数据库中存了几十TB的 JSON 文档 —— 用户表示体验甚好！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个故事的关键是，开发者愿意押注 PostgreSQL 会拥有一个具有竞争力的 JSON存储系统，并愿意接受其最初实现的局限性，直到更为强大稳健的支持出现。这就引出了我们要讨论的 &lt;strong&gt;向量&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;向量崛起一种新-json&#34;&gt;向量崛起：一种新 JSON&lt;/h2&gt;
&lt;p&gt;向量并不是新东西，但近来它们的流行度飙升。如前所述，这归功于AI/ML系统新涌现出的&lt;strong&gt;易用性&lt;/strong&gt;，而这些系统的输出结果是&lt;strong&gt;向量&lt;/strong&gt;。典型用例是在存储的数据（文本、声音、视频）上建立模型，并用模型将其转换为向量格式，然后用于“&lt;strong&gt;语义搜索&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;语义搜索工作原理如下：你把输入用模型转换为对应的向量，并在数据库中查找与此向量最为相似的结果。&lt;strong&gt;相似度&lt;/strong&gt;使用&lt;strong&gt;距离函数&lt;/strong&gt;进行衡量：比如欧式距离，或余弦距离，结果通常会按距离排序取 TOP K，即 K 个最为相似的对象（K-NN, k nearest neighbors）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-5.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向量的余弦距离被广泛用于衡量两者的相似度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用模型将“训练集”编码为向量需要耗费很长的时间，所以把这些编码结果 “缓存” 在持久化数据存储 —— 比如说数据库中是有意义的，然后你就可以在数据库中运行 K-NN 查询了。事先在数据库里准备好一组备查的向量，通常会为语义搜索带来更好的用户体验，需要“向量数据库”的想法就是这么来的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-6.jpeg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI模型将各种对象统一编码为向量（浮点数组）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在PostgreSQL中存储向量不是一件新鲜事儿。1996 年 PostgreSQL 首次开源时就已经带有&lt;strong&gt;数组类型&lt;/strong&gt;（Array）了！而且多年来又进行了无数的改进。实际上，PostgreSQL 中 &lt;strong&gt;数组&lt;/strong&gt; 类型名称可能有些用词不当，因为它其实可以存储&lt;strong&gt;多维&lt;/strong&gt;数据（例如矩阵/张量）。PostgreSQL 原生支持了一些数组函数，不过有一些常见的向量运算不在其中，比如计算两个数组间的距离。你确实可以写个存储过程来干这个事，但这就是把活儿推给开发者了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-7.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL特性矩阵：数组与Cube&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幸运的是，&lt;code&gt;cube&lt;/code&gt; 数据类型克服了这些局限。cube 在PostgreSQL代码库中也已经有20多年了，并且是为在高维向量上执行运算而设计的。cube 包含了在向量相似性搜索中使用的大多数常见距离函数，包括欧几里得距离，而且可以使用 GiST索引来执行高效的 K-NN 查询！但是 cube 最多只能存储100维的向量，而许多现代AI/ML系统的维度远超这个数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-8.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ChatGPT Embedding API 使用 1536 维向量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，如果 &lt;strong&gt;array&lt;/strong&gt; 可以搞定向量&lt;strong&gt;维度&lt;/strong&gt;的问题但没有解决向量&lt;strong&gt;运算&lt;/strong&gt;的问题；而 &lt;strong&gt;cube&lt;/strong&gt; 可以搞定运算但搞不定维度，我们该怎么办？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pgvector-开源pg向量扩展&#34;&gt;PGVECTOR: 开源PG向量扩展&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt; 是 PostgreSQL 的基石特性之一：PostgreSQL 提供创建新数据类型和新索引方法的接口。这让 &lt;strong&gt;pgvector&lt;/strong&gt; 成为可能：一个开源 PostgreSQL 扩展，提供了一种可索引的 &lt;code&gt;vector&lt;/code&gt; 数据类型。简而言之，pgvector 允许您在 PostgreSQL 中存储向量，并使用各种距离度量执行K-NN查询：欧式距离、余弦和内积。到目前为止，pgvector 带有一种新索引类型 &lt;code&gt;ivfflat&lt;/code&gt;，实现了 IVF FLAT 向量索引。&lt;/p&gt;
&lt;p&gt;当您使用索引来查询向量数据时，事情可能和您所习惯的 PostgreSQL 数据查询略有不同。由于在高维向量上执行最近邻搜索的计算成本很高，许多向量索引方法选择寻找与正确结果 “足够接近” 的 “&lt;strong&gt;近似&lt;/strong&gt;” 答案，这将我们带入 “近似最近邻搜索”（ANN）的领域。ANN 查询的关注焦点是，&lt;strong&gt;性能与召回率两个维度上的利弊权衡&lt;/strong&gt;，这里“&lt;strong&gt;召回率（Recall）&lt;/strong&gt;”指的是返回相关的结果所占百分比。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-9.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pgvector 在 ANN Benchmark 各测试集下的召回率/性能曲线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们以 ivfflat 方法为例。构建 ivfflat 索引时，您需要决定有多少个 &lt;strong&gt;list&lt;/strong&gt; 。每个 &lt;strong&gt;list&lt;/strong&gt; 代表一个“中心”，这些中心会使用 k-means 聚类算法确定。确定所有中心后，ivfflat 会计算每一个向量最接近哪个中心点，并将其添加到索引中。当查询向量数据时，你还需要决定需要检查多少个中心，这由 &lt;code&gt;ivfflat.probes&lt;/code&gt; 参数确定。这就是您所看到的 ANN性能/召回率权衡：你检查的中心越多，结果就会越精确，但性能开销就越大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-10.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IVF FLAT 索引算法的的召回率取决于检查的中心数量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把 AI/ML 的输出存入 “向量数据库” 已经很流行了，至于 pgvector 也已经有大把的使用样例。所以这里我们将关注重点放在未来的发展方向上。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;迈向明天更好的向量支持&#34;&gt;迈向明天：更好的向量支持&lt;/h2&gt;
&lt;p&gt;与 PostgreSQL 9.2 版本中的 JSON 情况类似，我们正处于如何在 PostgreSQL 中存储向量数据的初级阶段 —— 虽然我们在PostgreSQL和 pgvector 中看到的大部分内容都很不错，但它即将要好得多！&lt;/p&gt;
&lt;p&gt;pgvector 已经可以处理许多常见的 AI/ML 数据用例 —— 我已经看到许多用户成功地使用它开发部署应用！—— 因此下一步是帮助它打江山。这与 PostgreSQL 中的 JSON 和 JSONB 的情况没有太大区别，但 pgvector 作为一个扩展，将有助于它更快地迭代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-11.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pgvector 的 Github Star 增长在2023年4月出现加速&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 2023 年的 PGCon 上，这是一个聚集了许多内部开发者的 PostgreSQL 会议，我做了一个名为《向量是新的JSON[1]》的快速演讲，其中分享了使用案例，以及改进 PostgreSQL 和 pgvector 向量数据检索性能所面临的挑战。这是一些需要解决的问题（有些已经在做了！）：包括给 pgvector 添加更多并行机制，对超过 2000 维向量的索引支持，以及尽可能使用硬件来加速计算。好消息是添加这些功能并不难，只需要开源贡献！&lt;/p&gt;
&lt;p&gt;许多人对于把 PostgreSQL 当成向量数据库这件事充满兴趣（重点是 PG 还是一个全能数据库！）。我预计正如历史上的 JSON 一样，PostgreSQL 社区会找到一种支持这种新兴工作负载的方法，更为安全，更容易伸缩扩展。&lt;/p&gt;
&lt;p&gt;我期待您能提供各种反馈 —— 无论是关于PostgreSQL 本身还是 pgvector ，还是关于您如何在 PostgreSQL 中处理向量数据，或者您希望如何在 PostgreSQL 中处理数据，因为这将帮助社区为向量查询提供最佳的支持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文译自《VECTORS ARE THE NEW JSON IN POSTGRESQL[2]》一文。&lt;/p&gt;
&lt;p&gt;作者 JONATHAN KATZ ，译者 冯若航&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;译者评论&#34;&gt;译者评论&lt;/h2&gt;
&lt;p&gt;PostgreSQL 在过去十年间有着持续稳定的高速增长，从一个&amp;quot;相对来说小众&amp;quot;的数据库，成为如今全世界开发者中最流行，最受喜爱，需求量最大的数据库，不可谓不成功。PG 成功的因素有很多，开源，稳定，可扩展，等等等等。但我认为这里的&lt;strong&gt;关键一招&lt;/strong&gt;还是 &lt;strong&gt;JSON&lt;/strong&gt; 支持。笔者本人就是在 PostgreSQL 9.4 为其强大 JSON 功能折服，果断从 MySQL 跳车弃暗投明。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-12.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL 获得数据库三项大满贯冠军，且势头一往无前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拥有了 JSON 特性的 PostgreSQL 等于 &lt;strong&gt;MongoDB&lt;/strong&gt; 与 &lt;strong&gt;MySQL&lt;/strong&gt; 合二为一，恰到好处地赶上了互联网下半场的风口。从 DB-Engine 热度趋势上也能看出，PostgreSQL 开始起飞的时间正是在 2014 年 发布 PostgreSQL 9.4 之后。2013 ～ 2023 这十年可以说是 PG 的黄金十年，无数强大的新功能与各式扩展插件喷涌而出，奠定了 PG 现今不可撼动的地位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-13.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DB-Engine 热度走势，来自搜索引擎与网站的综合指数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而放眼未来十年，数据库的下一站会是哪里？本文给出了答案 —— &lt;strong&gt;向量&lt;/strong&gt;。正如同 JSON 一样，PostgreSQL 永远站在时代浪潮的巅峰引领潮流 —— 成为&lt;strong&gt;第一个&lt;/strong&gt;提供全方位向量支持的关系型数据库。我有充足的把握断言：以向量为代表的功能将在接下来的十年中继续驱动 PostgreSQL 的高速增长。&lt;/p&gt;
&lt;p&gt;pgvector 一定不会是 PostgreSQL 处理向量数据的终点，但它为 SQL 向量处理设定了一个标杆。PGVector 项目由 Andrew Kane 于 2021年4月创建，慢热了两年，而从今年三四月开始半年不到暴涨 4K star。而我也可以骄傲的说，作为 PG 社区的一员，我也在这里推波助澜，做了一些工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-14.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们将 pgvector 提入 PostgreSQL PGDG 官方源，正式成为 PG向量扩展的事实标准；我们进行性能评测，引发了推上关于 PGVector 的大讨论；而我们所维护的开箱即用的开源 RDS PG 替代 Pigsty，则是第一波将 pgvector 集成整合提供服务的 &lt;strong&gt;PostgreSQL 发行版&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty 凝聚 PG 生态合力，为用户提供开源免费开箱即用的本地 PostgreSQL RDS 服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前我们也在着力于改进 pgvector 的实现，实现了另一种主流向量索引算法 &lt;strong&gt;hnsw&lt;/strong&gt;，在一些 ANN 场景下相比 IVFFLAT 有20倍的性能提升，而且完全兼容 pgvector 接口，并将于近期 Pigsty Release 提供预览。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh/blog/pg/vector-json-pg/vector-new-json-15.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;pgvector 改进实现在 ANN-Benchmark 下的初步表现&lt;/p&gt;
&lt;p&gt;最重要的是，我们相信 PostgreSQL 社区的力量，我们愿意凝聚合力，劲往一处使，共同让 PostgreSQL 走得更快、更远，让 PostgreSQL 在 AI 时代再创辉煌！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] 向量是新的JSON&lt;/p&gt;
&lt;p&gt;[2] VECTORS ARE THE NEW JSON IN POSTGRESQL&lt;/p&gt;
&lt;p&gt;[3] AI大模型与向量数据库 PGVECTOR&lt;/p&gt;
&lt;p&gt;[4] PostgreSQL：世界上最成功的数据库&lt;/p&gt;
&lt;p&gt;[5] 更好的开源RDS替代：Pigsty&lt;/p&gt;
&lt;p&gt;[6] Pigsty v2.1 发布：向量扩展 / PG12-16 支持&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
