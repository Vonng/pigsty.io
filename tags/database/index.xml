<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pigsty – Database</title>
    <link>/tags/database/</link>
    <description>Recent content in Database on Pigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Dec 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Databases</title>
      <link>/docs/pgsql/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/pgsql/db/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;In this context, Database refers to the object created by SQL &lt;code&gt;CREATE DATABASE&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A PostgreSQL server can serve multiple databases simultaneously. And you can customize each database with Pigsty API.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;define-database&#34;&gt;Define Database&lt;/h2&gt;
&lt;p&gt;Business databases are defined by &lt;a href=&#34;/docs/reference/param/#pg_databases&#34;&gt;&lt;code&gt;pg_databases&lt;/code&gt;&lt;/a&gt;, which is a cluster-level parameter.&lt;/p&gt;
&lt;p&gt;For example, the default &lt;code&gt;meta&lt;/code&gt; database is defined in the &lt;code&gt;pg-meta&lt;/code&gt; cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg-meta&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hosts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;10.10.10.10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_seq: 1, pg_role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;primary } }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg-meta&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pg_databases&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: meta ,baseline: cmdb.sql ,comment: pigsty meta database ,schemas: [pigsty] ,extensions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: postgis, schema&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;public}, {name: timescaledb}]}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: grafana  ,owner: dbuser_grafana  ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;grafana primary database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: bytebase ,owner: dbuser_bytebase ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bytebase primary database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: kong     ,owner: dbuser_kong     ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kong the api gateway database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: gitea    ,owner: dbuser_gitea    ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gitea meta database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: wiki     ,owner: dbuser_wiki     ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;wiki meta database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: noco     ,owner: dbuser_noco     ,revokeconn: true ,comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nocodb database }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each database definition is a dict with the following fields:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;meta                     &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# REQUIRED, `name` is the only mandatory field of a database definition&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;baseline&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cmdb.sql             &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database sql baseline path, (relative path among ansible search path, e.g files/)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pgbouncer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                 &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, add this database to pgbouncer database list? true by default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;schemas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pigsty]              &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, additional schemas to be created, array of schema names&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extensions:                     # optional, additional extensions to be installed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;array of `{name[,schema]}`&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name: postgis , schema&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;public }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- {&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timescaledb }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;comment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pigsty meta database  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, comment string for this database&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;owner&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;postgres                &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database owner, postgres by default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;template1            &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, which template to use, template1 by default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;encoding&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UTF8                 &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database encoding, UTF8 by default. (MUST same as template database)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;locale&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;C                      &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database locale, C by default.  (MUST same as template database)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lc_collate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;C                  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database collate, C by default. (MUST same as template database)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lc_ctype&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;C                    &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database ctype, C by default.   (MUST same as template database)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tablespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg_default         &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, default tablespace, &amp;#39;pg_default&amp;#39; by default.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;allowconn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                 &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, allow connection, true by default. false will disable connect at all&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;revokeconn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;               &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, revoke public connection privilege. false by default. (leave connect with grant option to owner)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;register_datasource&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, register this database to grafana datasources? true by default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;connlimit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                   &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, database connection limit, default -1 disable limit&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_auth_user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dbuser_meta    &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, all connection to this pgbouncer database will be authenticated by this user&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_mode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transaction         &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, pgbouncer pool mode at database level, default transaction&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_size&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                   &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, pgbouncer pool size at database level, default 64&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_size_reserve&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, pgbouncer pool size reserve at database level, default 32&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_size_min&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, pgbouncer pool size min at database level, default 0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pool_max_db_conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional, max database connections at database level, default 100&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only required field is &lt;code&gt;name&lt;/code&gt;, which should be a valid and unique database name in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Newly created databases are forked from &lt;code&gt;template1&lt;/code&gt; database by default. which is customized by &lt;a href=&#34;/docs/reference/param/#pg_provision&#34;&gt;&lt;code&gt;PG_PROVISION&lt;/code&gt;&lt;/a&gt; during cluster bootstrap.&lt;/p&gt;
&lt;p&gt;Check &lt;a href=&#34;/docs/pgsql/acl/#database-privilege&#34;&gt;ACL: Database Privilege&lt;/a&gt; for details about database-level privilege.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;create-database&#34;&gt;Create Database&lt;/h2&gt;
&lt;p&gt;Databases &lt;a href=&#34;/docs/pgsql/db/#define-database&#34;&gt;defined&lt;/a&gt; in &lt;a href=&#34;/docs/reference/param/#pg_databases&#34;&gt;&lt;code&gt;pg_databases&lt;/code&gt;&lt;/a&gt; will be automatically created during cluster bootstrap.&lt;/p&gt;
&lt;p&gt;If you wish to &lt;a href=&#34;/docs/pgsql/admin/#create-database&#34;&gt;create database&lt;/a&gt; on an existing cluster, the &lt;code&gt;bin/pgsql-db&lt;/code&gt; util can be used.&lt;/p&gt;
&lt;p&gt;Add new database definition to &lt;code&gt;all.children.&amp;lt;cls&amp;gt;.pg_databases&lt;/code&gt;, and create that database with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/pgsql-db &amp;lt;cls&amp;gt; &amp;lt;dbname&amp;gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# pgsql-db.yml -l &amp;lt;cls&amp;gt; -e dbname=&amp;lt;dbname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s usually not a good idea to execute this on the existing database again when a &lt;code&gt;baseline&lt;/code&gt; script is used.&lt;/p&gt;
&lt;p&gt;If you are using the default pgbouncer as the proxy middleware, YOU MUST create the new database with &lt;code&gt;pgsql-db&lt;/code&gt; util or &lt;code&gt;pgsql-db.yml&lt;/code&gt; playbook. Otherwise, the new database will not be added to the &lt;a href=&#34;/docs/pgsql/db/#pgbouncer-database&#34;&gt;pgbouncer database&lt;/a&gt; list.&lt;/p&gt;
&lt;p&gt;Remember, if your database definition has a non-trivial &lt;code&gt;owner&lt;/code&gt; (dbsu &lt;code&gt;postgres&lt;/code&gt; by default ), make sure the owner user exists.
That is to say, always &lt;a href=&#34;/docs/pgsql/admin/#create-user&#34;&gt;create&lt;/a&gt; the &lt;a href=&#34;/docs/pgsql/user/&#34;&gt;user&lt;/a&gt; before the database.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pgbouncer-database&#34;&gt;Pgbouncer Database&lt;/h2&gt;
&lt;p&gt;Pgbouncer is enabled by default and serves as a connection pool middleware.&lt;/p&gt;
&lt;p&gt;Pigsty will add all databases in &lt;a href=&#34;/docs/reference/param/#pg_databases&#34;&gt;&lt;code&gt;pg_databases&lt;/code&gt;&lt;/a&gt; to the pgbouncer database list by default.
You can disable the pgbouncer proxy for a specific database by setting &lt;code&gt;pgbouncer: false&lt;/code&gt; in the database &lt;a href=&#34;/docs/pgsql/db/#define-database&#34;&gt;definition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The database is listed in &lt;code&gt;/etc/pgbouncer/database.txt&lt;/code&gt;, with extra database-level parameters such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;meta&lt;/span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql mode=session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;grafana&lt;/span&gt;                     &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql mode=transaction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bytebase&lt;/span&gt;                    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql auth_user=dbuser_meta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;kong&lt;/span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql pool_size=32 reserve_pool=64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;gitea&lt;/span&gt;                       &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql min_pool_size=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;wiki&lt;/span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;noco&lt;/span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;mongo&lt;/span&gt;                       &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;host=/var/run/postgresql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Pgbouncer database list will be updated when &lt;a href=&#34;/docs/pgsql/db/#create-database&#34;&gt;create database&lt;/a&gt; with Pigsty util &amp;amp; playbook.&lt;/p&gt;
&lt;p&gt;To access pgbouncer administration functionality, you can use the &lt;code&gt;pgb&lt;/code&gt; alias as dbsu.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a util function defined in &lt;code&gt;/etc/profile.d/pg-alias.sh&lt;/code&gt;, allowing you to reroute pgbouncer database traffic to a new host quickly, which can be used during zero-downtime migration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# route pgbouncer traffic to another cluster member&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; pgb-route&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;\/var\/run\/postgresql&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sed -ie &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;s/host=[^[:space:]]\+/host=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/g&amp;#34;&lt;/span&gt; /etc/pgbouncer/pgbouncer.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cat /etc/pgbouncer/pgbouncer.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Database in K8S: Pros &amp; Cons</title>
      <link>/blog/db/db-in-k8s/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/db/db-in-k8s/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/db-in-k8s/featured_hu7279aeaee599f401f20219db80b8a04a_492220_640x0_resize_q75_h2_catmullrom_2.webp" width="640" height="366"/>]]>
        
        &lt;p&gt;Whether databases should be housed in Kubernetes/Docker remains highly controversial. While Kubernetes (k8s) excels in managing stateless applications, it has fundamental drawbacks with stateful services, especially databases like PostgreSQL and MySQL.&lt;/p&gt;
&lt;p&gt;In the previous article, &amp;ldquo;&lt;a href=&#34;/blog/db/pg-in-docker/&#34;&gt;Databases in Docker: Good or Bad&lt;/a&gt;,&amp;rdquo; we discussed the pros and cons of containerizing databases. Today, let&amp;rsquo;s delve into the trade-offs in orchestrating databases in K8S and explore why it&amp;rsquo;s not a wise decision.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Kubernetes (k8s) is an exceptional container orchestration tool aimed at helping developers better manage a vast array of complex stateless applications. Despite its offerings like StatefulSet, PV, PVC, and LocalhostPV for supporting stateful services (i.e., databases), these features are still insufficient for running production-level databases that demand higher reliability.&lt;/p&gt;
&lt;p&gt;Databases are more like &amp;ldquo;&lt;strong&gt;pets&lt;/strong&gt;&amp;rdquo; than &amp;ldquo;&lt;strong&gt;cattle&lt;/strong&gt;&amp;rdquo; and require careful nurturing. Treating databases as &amp;ldquo;cattle&amp;rdquo; in K8S essentially turns external disk/file system/storage services into new &amp;ldquo;database pets.&amp;rdquo; Running databases on EBS/network storage presents significant disadvantages in reliability and performance. However, using high-performance local NVMe disks will make the database bound to nodes and non-schedulable, negating the primary purpose of putting them in K8S.&lt;/p&gt;
&lt;p&gt;Placing databases in K8S results in a &lt;strong&gt;&amp;ldquo;lose-lose&amp;rdquo;&lt;/strong&gt; situation - K8S loses its simplicity in statelessness, lacking the flexibility to quickly relocate, schedule, destroy, and rebuild like purely stateless use. On the other hand, databases suffer several crucial attributes: reliability, security, performance, and complexity costs, in exchange for limited &amp;ldquo;elasticity&amp;rdquo; and utilization - something virtual machines can also achieve. For users outside public cloud vendors, the disadvantages far outweigh the benefits.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;&lt;strong&gt;cloud-native frenzy&lt;/strong&gt;,&amp;rdquo; exemplified by K8S, has become a distorted phenomenon: adopting k8s for the sake of k8s. Engineers add extra complexity to increase their irreplaceability, while managers fear being left behind by the industry and getting caught up in deployment races. Using tanks for tasks that could be done with bicycles, to gain experience or prove oneself, without considering if the problem needs such &amp;ldquo;dragon-slaying&amp;rdquo; techniques - this kind of architectural juggling will eventually lead to adverse outcomes.&lt;/p&gt;
&lt;p&gt;Until the reliability and performance of the network storage surpass local storage, placing databases in K8S is an unwise choice. There are other ways to seal the complexity of database management, such as RDS and open-source RDS solutions like &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485518&amp;idx=1&amp;sn=3d5f3c753facc829b2300a15df50d237&amp;chksm=fe4b3d95c93cb4833b8e80433cff46a893f939154be60a2a24ee96598f96b32271301abfda1f&amp;scene=21#wechat_redirect&#34;&gt;&lt;strong&gt;Pigsty&lt;/strong&gt;&lt;/a&gt;, which are based on bare Metal or bare OS. Users should make wise decisions based on their situations and needs, carefully weighing the pros and cons.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-status-quo&#34;&gt;The Status Quo&lt;/h2&gt;
&lt;p&gt;K8S excels in orchestrating stateless application services but was initially limited to stateful services. Despite not being the intended purpose of K8S and Docker, the community&amp;rsquo;s zeal for expansion has been unstoppable. Evangelists depict K8S as the next-generation cloud operating system, asserting that databases will inevitably become regular applications within Kubernetes. Various abstractions have emerged to support stateful services: StatefulSet, PV, PVC, and LocalhostPV.&lt;/p&gt;
&lt;p&gt;Countless cloud-native enthusiasts have attempted to migrate existing databases into K8S, resulting in a proliferation of CRDs and Operators for databases. Taking PostgreSQL as an example, there are already more than ten different K8S deployment solutions available: PGO, StackGres, CloudNativePG, PostgresOperator, PerconaOperator, CYBERTEC-pg-operator, TemboOperator,  Kubegres, KubeDB, KubeBlocks, and so on. The CNCF landscape rapidly expands, turning into a playground of complexity.&lt;/p&gt;
&lt;p&gt;However, complexity is a cost. With &amp;ldquo;cost reduction&amp;rdquo; becoming mainstream, voices of reflection have begun to emerge. Could-Exit Pioneers like DHH, who deeply utilized K8S in public clouds, abandoned it due to its excessive complexity during the transition to &lt;a href=&#34;https://mp.weixin.qq.com/s/CicctyvV1xk5B-AsKfzPjw&#34;&gt;self-hosted open-source solutions&lt;/a&gt;, relying only on Docker and a Ruby tool named Kamal as alternatives. Many began to question whether stateful services like databases suit Kubernetes.&lt;/p&gt;
&lt;p&gt;K8S itself, in its effort to support stateful applications, has become increasingly complex, straying from its original intention as a container orchestration platform. Tim Hockin, a co-founder of Kubernetes, also voiced his rare concerns at this year&amp;rsquo;s KubeCon in &lt;a href=&#34;https://mp.weixin.qq.com/s/9Q9kze9D2LT0-G2lXSvADg&#34;&gt;&amp;ldquo;K8s is Cannibalizing Itself!&amp;rdquo;&lt;/a&gt;: &amp;ldquo;&lt;em&gt;&lt;strong&gt;Kubernetes has become too complex; it needs to learn restraint, or it will stop innovating and lose its base&lt;/strong&gt;&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lose-lose-situation&#34;&gt;Lose-Lose Situation&lt;/h2&gt;
&lt;p&gt;In the cloud-native realm, the analogy of &amp;ldquo;pets&amp;rdquo; versus &amp;ldquo;cattle&amp;rdquo; is often used for illustrating stateful services. &amp;ldquo;Pets,&amp;rdquo; like databases, need careful and individual care, while &amp;ldquo;cattle&amp;rdquo; represent disposable, stateless applications (Disposability).&lt;/p&gt;
&lt;figure class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 778px&#34;&gt;
&lt;img class=&#34;card-img-top&#34; src=&#34;/zh/blog/db/db-in-k8s/12-factor_hue92b117bbc262aa2b08fc07fefd75e09_483297_768x384_fit_catmullrom_3.png&#34; width=&#34;768&#34; height=&#34;379&#34;&gt;
&lt;figcaption class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
&lt;p class=&#34;card-text&#34;&gt;
&lt;p&gt;Cloud Native Applications 12 Factors: &lt;strong&gt;Disposability&lt;/strong&gt;
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;&lt;em&gt;source&lt;/em&gt;: &lt;a href=&#34;https://user-images.githubusercontent.com/5445356/47986421-a8f62080-e117-11e8-9a39-3fdc6030c324.png&#34;&gt;https://user-images.githubusercontent.com/5445356/47986421-a8f62080-e117-11e8-9a39-3fdc6030c324.png&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud Native Applications 12 Factors: &lt;strong&gt;Disposability&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the leading architectural goals of K8S is to &lt;strong&gt;treat what can be treated as cattle as cattle&lt;/strong&gt;. The attempt to &amp;ldquo;separate storage from computation&amp;rdquo; in databases follows this strategy: splitting stateful database services into state storage outside K8S and pure computation inside K8S. The state is stored on the EBS/cloud disk/distributed storage service, allowing the &amp;ldquo;stateless&amp;rdquo; database part to be freely created, destroyed, and scheduled in K8S.&lt;/p&gt;
&lt;p&gt;Unfortunately, databases, especially OLTP databases, heavily depend on disk hardware, and network storage&amp;rsquo;s reliability and performance still lag behind local disks by &lt;a href=&#34;https://mp.weixin.qq.com/s/UxjiUBTpb1pRUfGtR9V3ag&#34;&gt;orders of magnitude&lt;/a&gt;. Thus, K8S offers the LocalhostPV option, allowing containers to use data volumes directly lies on the host operating system, utilizing high-performance/high-reliability local NVMe disk storage.&lt;/p&gt;
&lt;p&gt;However, this presents a dilemma: should one use subpar cloud disks and tolerate poor database reliability/performance for K8S&amp;rsquo;s scheduling and orchestration capabilities? Or use high-performance local disks tied to host nodes, virtually losing all flexible scheduling abilities? The former is like stuffing an anchor into K8S&amp;rsquo;s small boat, slowing overall speed and agility; the latter is like anchoring and pinning the ship to a specific point.&lt;/p&gt;
&lt;p&gt;Running a stateless K8S cluster is simple and reliable, as is running a stateful database on a physical machine&amp;rsquo;s bare operating system. Mixing the two, however, results in a &lt;strong&gt;lose-lose situation&lt;/strong&gt;: &lt;em&gt;&lt;strong&gt;K8S loses its stateless flexibility and casual scheduling abilities, while the database sacrifices core attributes like reliability, security, efficiency, and simplicity in exchange for elasticity, resource utilization, and Day1 delivery speed that are not fundamentally important to databases&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A vivid example of the former is the performance optimization of &lt;a href=&#34;https://mp.weixin.qq.com/s/SCImfwEvkCPqZhLGx758Sw&#34;&gt;PostgreSQL@K8S&lt;/a&gt;, which KubeBlocks contributed. K8S experts employed various advanced methods to solve performance issues that did not exist on bare metal/bare OS at all. A fresh case of the latter is Didi&amp;rsquo;s &lt;a href=&#34;https://mp.weixin.qq.com/s/FIOB_Oqefx1oez1iu7AGGg&#34;&gt;K8S architecture juggling disaster&lt;/a&gt;; if it weren&amp;rsquo;t for putting the stateful MySQL in K8S, would rebuilding a stateless K8S cluster and redeploying applications take 12 hours to recover?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pros-and-cons&#34;&gt;Pros and Cons&lt;/h2&gt;
&lt;p&gt;For serious technology decisions, the most crucial aspect is weighing the pros and cons. Here, in the order of &amp;ldquo;quality, security, performance, cost,&amp;rdquo; let&amp;rsquo;s discuss the technical trade-offs of placing databases in K8S versus classic bare metal/VM deployments. I don&amp;rsquo;t want to write a comprehensive paper that covers everything. Instead, I&amp;rsquo;ll throw some specific questions for consideration and discussion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;K8S, compared to physical deployments, introduces additional failure points and architectural complexity, increasing the blast radius and significantly prolonging the average recovery time of failures. In &lt;a href=&#34;https://mp.weixin.qq.com/s/kFftay1IokBDqyMuArqOpg&#34;&gt;&amp;ldquo;Is it a Good Idea to Put Databases into Docker?&amp;rdquo;&lt;/a&gt;, we provided an argument about reliability, which can also apply to Kubernetes — K8S and Docker introduce additional and unnecessary dependencies and failure points to databases, lacking community failure knowledge accumulation and reliability track record (MTTR/MTBF).&lt;/p&gt;
&lt;p&gt;In the cloud vendor classification system, K8S belongs to PaaS, while RDS belongs to a more fundamental layer, IaaS. &lt;strong&gt;Database services have higher reliability requirements than K8S&lt;/strong&gt;; for instance, many companies&amp;rsquo; cloud management platforms rely on an additional CMDB database. Where should this database be placed? You shouldn&amp;rsquo;t let K8S manage things it depends on, nor should you add unnecessary extra dependencies. The &lt;a href=&#34;https://mp.weixin.qq.com/s/OIlR0rolEQff9YfCpj3wIQ&#34;&gt;Alibaba Cloud global epic failure&lt;/a&gt; and &lt;a href=&#34;https://mp.weixin.qq.com/s/FIOB_Oqefx1oez1iu7AGGg&#34;&gt;Didi&amp;rsquo;s K8S architecture juggling disaster&lt;/a&gt; have taught us this lesson. Moreover, maintaining a separate database system inside K8S when there&amp;rsquo;s already one outside is even more unjustifiable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The database in a multi-tenant environment introduces additional attack surfaces, bringing higher risks and more complex audit compliance challenges. Does K8S make your database more secure? Maybe the complexity of K8S architecture juggling will deter script kiddies unfamiliar with K8S, but for real attackers, more components and dependencies often mean a broader attack surface.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://mp.weixin.qq.com/s/Tvuy0kAiqh66sOwkr3WWMA&#34;&gt;&amp;ldquo;BrokenSesame Alibaba Cloud PostgreSQL Vulnerability Technical Details&amp;rdquo;&lt;/a&gt;, security personnel escaped to the K8S host node using their own PostgreSQL container and accessed the K8S API and other tenants&amp;rsquo; containers and data. This is clearly a K8S-specific issue — the risk is real, such attacks have occurred, and even Alibaba Cloud, a local cloud industry leader, has been compromised.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;security.png&#34; src=&#34;/zh/blog/db/db-in-k8s/security.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《&lt;a href=&#34;https://www.youtube.com/watch?v=d81qnGKv4EE&#34;&gt;The Attacker Perspective - Insights From Hacking Alibaba Cloud&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As stated in &lt;a href=&#34;https://mp.weixin.qq.com/s/kFftay1IokBDqyMuArqOpg&#34;&gt;&amp;ldquo;Is it a Good Idea to Put Databases into Docker?&amp;rdquo;&lt;/a&gt;, whether it&amp;rsquo;s additional network overhead, Ingress bottlenecks, or underperforming cloud disks, all negatively impact database performance. For example, as revealed in &lt;a href=&#34;https://mp.weixin.qq.com/s/SCImfwEvkCPqZhLGx758Sw&#34;&gt;&amp;ldquo;PostgreSQL@K8s Performance Optimization&amp;rdquo;&lt;/a&gt; — you need a considerable level of technical prowess to make database performance in K8S barely match that on bare metal.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;performence.png&#34; src=&#34;/zh/blog/db/db-in-k8s/performence.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Latency is measured in &lt;strong&gt;ms&lt;/strong&gt;, not &lt;strong&gt;µs&lt;/strong&gt;; I almost thought my eyes were deceiving me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another misconception about efficiency is resource utilization. Unlike offline analytical businesses, critical online OLTP databases should not aim to increase resource utilization but rather deliberately lower it to enhance system reliability and user experience. If there are many fragmented businesses, resource utilization can be improved through PDB/shared database clusters. K8S&amp;rsquo;s advocated elasticity efficiency is not unique to it — KVM/EC2 can also effectively address this issue.&lt;/p&gt;
&lt;p&gt;In terms of &lt;strong&gt;cost&lt;/strong&gt;, K8S and various Operators provide a decent abstraction, encapsulating some of the complexity of database management, which is attractive for teams without DBAs. However, the complexity reduced by using it to manage databases pales in comparison to the complexity introduced by using K8S itself. For instance, random IP address drifts and automatic Pod restarts may not be a big issue for stateless applications, but for databases, they are intolerable — many companies have had to attempt to modify kubelet to avoid this behavior, thereby introducing more complexity and maintenance costs.&lt;/p&gt;
&lt;p&gt;As stated in &lt;a href=&#34;https://mp.weixin.qq.com/s/FIOB_Oqefx1oez1iu7AGGg&#34;&gt;&amp;ldquo;From Reducing Costs and Smiles to Reducing Costs and Efficiency&amp;rdquo;&lt;/a&gt; &amp;ldquo;Reducing Complexity Costs&amp;rdquo; section: &lt;strong&gt;Intellectual power is hard to accumulate spatially&lt;/strong&gt;: when a database encounters problems, it needs database experts to solve them; when Kubernetes has problems, it needs K8S experts to look into them; however, when you put a database into Kubernetes, complexities combine, the state space explodes, but the intellectual bandwidth of individual database experts and K8S experts is hard to stack — you need a dual expert to solve the problem, and such experts are undoubtedly much rarer and more expensive than pure database experts. Such architectural juggling is enough to cause major setbacks for most teams, including top public clouds/big companies, in the event of a failure.&lt;/p&gt;
&lt;figure class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 242px&#34;&gt;
&lt;img class=&#34;card-img-top&#34; src=&#34;/zh/blog/db/db-in-k8s/k8s-meme_huf5d25fac398b63a780ca47347ed1606d_448418_768x300_fit_catmullrom_3.png&#34; width=&#34;232&#34; height=&#34;300&#34;&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-cloud-native-frenzy&#34;&gt;The Cloud-Native Frenzy&lt;/h2&gt;
&lt;p&gt;An interesting question arises: if K8S is unsuitable for stateful databases, why are so many companies, including big players, rushing to do this? The reasons are not technical.&lt;/p&gt;
&lt;p&gt;Google open-sourced its K8S battleship, modeled after its internal Borg spaceship, and managers, fearing being left behind, rushed to adopt it, thinking using K8S would put them on par with Google. Ironically, Google doesn&amp;rsquo;t use K8S; it was more likely to disrupt AWS and mislead the industry. However, most companies don&amp;rsquo;t have the manpower like Google to operate such a battleship. More importantly, their problems might need a simple vessel. Running MySQL + PHP, PostgreSQL + Go/Python on bare metal has already taken many companies to IPO.&lt;/p&gt;
&lt;p&gt;Under &lt;a href=&#34;https://mp.weixin.qq.com/s/1OSRcBfd58s0tgZTUZHB9g&#34;&gt;modern hardware conditions&lt;/a&gt;, the complexity of most applications throughout their lifecycle doesn&amp;rsquo;t justify using K8S. Yet, the &amp;ldquo;cloud-native&amp;rdquo; frenzy, epitomized by K8S, has become a distorted phenomenon: adopting k8s just for the sake of k8s. Some engineers are looking for &amp;ldquo;advanced&amp;rdquo; and &amp;ldquo;cool&amp;rdquo; technologies used by big companies to fulfill their personal goals like job hopping or promotions or to increase their job security by adding complexity, not considering if these &amp;ldquo;dragon-slaying&amp;rdquo; techniques are necessary for solving their problems.&lt;/p&gt;
&lt;p&gt;The cloud-native landscape is filled with fancy projects. Every new development team wants to introduce something new: Helm today, Kubevela tomorrow. They talk big about bright futures and peak efficiency, but in reality, they create a mountain of architectural complexities and a playground for &amp;ldquo;YAML Boys&amp;rdquo; - tinkering with the latest tech, inventing concepts, earning experience and reputation at the expense of users who bear the complexity and maintenance costs.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;cncf-landscape.png&#34; src=&#34;/zh/blog/db/db-in-k8s/cncf-landscape.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CNCF Landscape&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The cloud-native movement&amp;rsquo;s philosophy is compelling - democratizing the elastic scheduling capabilities of public clouds for every user. K8S indeed excels in stateless applications. However, excessive enthusiasm has led K8S astray from its original intent and direction - simply doing well in orchestrating stateless applications, burdened by the ill-conceived support for stateful applications.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;making-wise-decisions&#34;&gt;Making Wise Decisions&lt;/h2&gt;
&lt;p&gt;Years ago, when I first encountered K8S, I too was fervent —— It was at TanTan. We had over twenty thousand cores and hundreds of database clusters, and I was eager to try putting databases in Kubernetes and testing all the available Operators. However, after two to three years of extensive research and architectural design, I calmed down and abandoned this madness. Instead, I architected our database service based on bare metal/operating systems. For us, the benefits K8S brought to databases were negligible compared to the problems and hassles it introduced.&lt;/p&gt;
&lt;p&gt;Should databases be put into K8S? It depends: for public cloud vendors who thrive on overselling resources, elasticity and utilization are crucial, which are directly linked to revenue and profit, While reliability and performance take a back seat - after all, an availability below three nines means &lt;a href=&#34;https://vonng.com/cn/blog/cloud/sla/&#34;&gt;compensating 25% monthly credit&lt;/a&gt;. But for most user, including ourselves, these trade-offs hold different: One-time Day1 Setup, elasticity, and resource utilization aren&amp;rsquo;t their primary concerns; reliability, performance, Day2 Operation costs, these core database attributes are what matter most.&lt;/p&gt;
&lt;p&gt;We open-sourced our database service architecture — an out-of-the-box PostgreSQL distribution and a local-first RDS alternative: &lt;a href=&#34;https://vonng.com/cn/blog/db/pigsty-intro/&#34;&gt;Pigsty&lt;/a&gt;. We didn&amp;rsquo;t choose the so-called &amp;ldquo;build once, run anywhere&amp;rdquo; approach of K8S and Docker. Instead, we adapted to different &lt;a href=&#34;https://mp.weixin.qq.com/s/xHG8OURTYlmnQTorFkzioA&#34;&gt;OS distros&lt;/a&gt; &amp;amp; major versions, and used Ansible to achieve a K8S CRD IaC-like API to seal management complexity. This was arduous, but it was the right thing to do - the world does not need another clumsy attempt at putting PostgreSQL into K8S. Still, it does need a production database service architecture that maximizes hardware performance and reliability.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;stackgres-pigsty.png&#34; src=&#34;/zh/blog/db/db-in-k8s/pigsty-stackgres.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pigsty vs StackGres&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps one day, when the reliability and performance of distributed network storage surpass local storage and mainstream databases have some native support for storage-computation separation, things might change again — K8S might become suitable for databases. But for now, I believe putting serious production OLTP databases into K8S is immature and inappropriate. I hope readers will make wise choices on this matter.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247486572&amp;idx=1&amp;sn=274a51976bf8ae5974beb1d3173380c1&amp;chksm=fe4b39b7c93cb0a14c4d99f8ffd1e00c36b972a8058fd99e9d06e6035c4f378b6d327892260b&amp;scene=21#wechat_redirect&#34;&gt;Database in Docker: Is that a good idea?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/9Q9kze9D2LT0-G2lXSvADg&#34;&gt;《Kubernetes is Rotten!》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/EWCblHU-vDC3ebV6ITE45A&#34;&gt;《Curse of Docker?》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/KFZCQFP1oB5YOrT3tHBRCQ&#34;&gt;《What can we learn from DiDi&amp;rsquo;s Epic k8s Failure》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0kbWa6AnkCr5jkN4WIgu5Q&#34;&gt;《PostgreSQL@K8s Performance Optimization》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://questdb.io/blog/databases-on-k8s/&#34;&gt;《Running Database on Kubernetes》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: NewSQL: Distributive Nonsens</title>
      <link>/blog/db/distributive-bullshit/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/db/distributive-bullshit/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/distributive-bullshit/featured_huff64b0b2507eaf0da6a19ab58defbda7_849203_640x0_resize_catmullrom_3.png" width="640" height="397"/>]]>
        
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/-eaCoZR9Z5srQ-1YZm1QJA&#34;&gt;WeChat Column&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As hardware technology advances, the capacity and performance of standalone databases have reached unprecedented heights. In this transformative era, distributed (TP) databases appear utterly powerless, much like the &amp;ldquo;data middle platform,&amp;rdquo; donning the emperor&amp;rsquo;s new clothes in a state of self-deception.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#tl-dr&#34;&gt;TL; DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#the-pull-of-the-internet&#34;&gt;The Pull of the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#the-trade-offs-of-distributive&#34;&gt;The Trade-Offs of Distributive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#the-impact-of-new-hardware&#34;&gt;The Impact of New Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#the-predicament-of-false-needs&#34;&gt;The Predicament of False Needs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#the-struggles-in-confusion&#34;&gt;The Struggles in Confusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/db/distributive-bullshit/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;TL; DR&lt;/h2&gt;
&lt;p&gt;The core trade-off of distributed databases is: &amp;ldquo;&lt;strong&gt;quality for quantity&lt;/strong&gt;,&amp;rdquo; sacrificing functionality, performance, complexity, and reliability for greater data capacity and throughput. However, &amp;ldquo;what divides must eventually converge,&amp;rdquo; and hardware innovations have propelled centralized databases to new heights in capacity and throughput, rendering distributed (TP) databases obsolete.&lt;/p&gt;
&lt;p&gt;Hardware, exemplified by NVMe SSDs, follows Moore&amp;rsquo;s Law, evolving at an exponential pace. Over a decade, performance has increased by tens of times, and prices have dropped significantly, &lt;strong&gt;improving the cost-performance ratio by three orders of magnitude&lt;/strong&gt;. A single card can now hold 32TB+, with 4K random read/write IOPS reaching 1600K/600K, latency at 70µs/10µs, and a cost of less than 200 ¥/TB·year. Running a centralized database on a single machine can achieve one to two million point write/point query QPS.&lt;/p&gt;
&lt;p&gt;Scenarios truly requiring distributed databases are few and far between, with typical mid-sized internet companies/banks handling request volumes ranging from tens to hundreds of thousands of QPS, and non-repetitive TP data at the hundred TB level. &lt;strong&gt;In the real world, over 99% of scenarios do not need distributed databases&lt;/strong&gt;, and the remaining 1% can likely be addressed through classic engineering solutions like horizontal/vertical partitioning.&lt;/p&gt;
&lt;p&gt;Top-tier internet companies might have a few genuine use cases, yet these companies have no intention to pay. The market simply cannot sustain so many distributed database cores, and the few products that do survive don&amp;rsquo;t necessarily rely on distribution as their selling point. HATP and the integration of distributed and standalone databases represent the struggles of confused distributed TP database vendors seeking transformation, but they are still far from achieving product-market fit.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-pull-of-the-internet&#34;&gt;The Pull of the Internet&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Distributed database&amp;rdquo; is not a term with a strict definition. In a narrow sense, it highly overlaps with NewSQL databases such as CockroachDB, YugabyteDB, TiDB, OceanBase, and TDSQL; broadly speaking, classic databases like Oracle, PostgreSQL, MySQL, SQL Server, PolarDB, and Aurora, which span multiple physical nodes and use master-slave replication or shared storage, can also be considered distributed databases. &lt;strong&gt;In the context of this article, a distributed database refers to the former, specifically focusing on transactional processing (OLTP) distributed relational databases&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The rise of distributed databases stemmed from the rapid development of internet applications and the explosive growth of data volumes. In that era, traditional relational databases often encountered performance bottlenecks and scalability issues when dealing with massive data and high concurrency. Even using Oracle with Exadata struggled in the face of voluminous CRUD operations, not to mention the prohibitively expensive annual hardware and software costs.&lt;/p&gt;
&lt;p&gt;Internet companies embarked on a different path, building their infrastructure with free, open-source databases like MySQL. Veteran developers/DBAs might still recall the MySQL best practice: keep single-table records below 21 million to avoid rapid performance degradation. Correspondingly, database sharding became a widely recognized practice among large companies.&lt;/p&gt;
&lt;p&gt;The basic idea here was &amp;ldquo;three cobblers with their wits combined equal Zhuge Liang,&amp;rdquo; using a bunch of inexpensive x86 servers + numerous sharded open-source database instances to create a massive CRUD simple data store. Thus, &lt;strong&gt;distributed databases often originated from internet company scenarios, evolving along the manual sharding → sharding middleware → distributed database path&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an industry solution, distributed databases have successfully met the needs of internet companies. However, before abstracting and solidifying it into a product for external output, several questions need to be clarified:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do the trade-offs from ten years ago still hold up today?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are the scenarios of internet companies applicable to other industries?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Could distribute OLTP databases be a false necessity?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-trade-offs-of-distributive&#34;&gt;The Trade-Offs of Distributive&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Distributed,&amp;rdquo; along with buzzwords like &amp;ldquo;HTAP,&amp;rdquo; &amp;ldquo;compute-storage separation,&amp;rdquo; &amp;ldquo;Serverless,&amp;rdquo; and &amp;ldquo;lakehouse,&amp;rdquo; holds no inherent meaning for enterprise users. Practical clients focus on tangible attributes and capabilities: functionality, performance, security, reliability, return on investment, and cost-effectiveness. &lt;strong&gt;What truly matters is the trade-off: compared to classic centralized databases, what do distributed databases sacrifice, and what do they gain in return?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-1.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-1.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485399&amp;idx=1&amp;sn=0b7d5a7dc24295afcc56ec688b2c2d06&amp;chksm=fe4b320cc93cbb1a369f9c9a7c50811c6a4f784fd2dd070f6ce5b16378502b8e5c7c76b716e1&amp;scene=21#wechat_redirect&#34;&gt;数据库需求层次金字塔&lt;/a&gt;[1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;The core trade-off of distributed databases can be summarized as &amp;ldquo;quality for quantity&amp;rdquo;: sacrificing functionality, performance, complexity, and reliability to gain greater data capacity and request throughput.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NewSQL often markets itself on the concept of &amp;ldquo;distribution,&amp;rdquo; solving &lt;strong&gt;scalability&lt;/strong&gt; issues through &amp;ldquo;distribution.&amp;rdquo; Architecturally, it typically features multiple peer data nodes and a coordinator, employing distributed consensus protocols like Paxos/Raft for replication, allowing for &lt;strong&gt;horizontal scaling&lt;/strong&gt; by adding data nodes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firstly&lt;/strong&gt;, due to their inherent limitations, distributed databases sacrifice many &lt;strong&gt;features&lt;/strong&gt;, offering only basic and limited CRUD query support. &lt;strong&gt;Secondly&lt;/strong&gt;, because distributed databases require multiple network RPCs to complete requests, their &lt;strong&gt;performance&lt;/strong&gt; typically suffers a 70% or more degradation compared to centralized databases. &lt;strong&gt;Furthermore&lt;/strong&gt;, distributed databases, consisting of DN/CN and TSO components among others, introduce significant &lt;strong&gt;complexity&lt;/strong&gt; in operations and management. &lt;strong&gt;Lastly&lt;/strong&gt;, in terms of &lt;strong&gt;high availability and disaster recovery&lt;/strong&gt;, distributed databases do not offer a qualitative improvement over the classic centralized master-slave setup; instead, they introduce numerous additional failure points due to their complex components.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-2.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/651zXDKGwFy8i0Owrmm-Xg&#34;&gt;SYSBENCH吞吐对比&lt;/a&gt;[2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the past, the trade-offs of distributed databases were justified: the internet required larger data storage capacities and higher access throughputs—a must-solve problem, and these drawbacks were surmountable. But today, hardware advancements have rendered the &amp;ldquo;quantity&amp;rdquo; question obsolete, thus erasing the raison d&amp;rsquo;être of distributed databases along with the very problem they sought to solve.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-3.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-3.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Times have changed, My lord!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-impact-of-new-hardware&#34;&gt;The Impact of New Hardware&lt;/h2&gt;
&lt;p&gt;Moore&amp;rsquo;s Law posits that every 18 to 24 months, processor performance doubles while costs halve. This principle largely applies to storage as well. From 2013 to 2023, spanning 5 to 6 cycles, we should see performance and cost differences of &lt;strong&gt;dozens of times&lt;/strong&gt; compared to a decade ago. Is this the case?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s examine the performance metrics of a typical SSD from 2013 and compare them with those of a typical PCI-e Gen4 NVMe SSD from 2022. It&amp;rsquo;s evident that the SSD&amp;rsquo;s 4K random read/write IOPS have jumped from &lt;strong&gt;60K/40K&lt;/strong&gt; to &lt;strong&gt;1600K/600K&lt;/strong&gt;, with prices plummeting from &lt;strong&gt;2220$/TB&lt;/strong&gt; to &lt;strong&gt;40$/TB&lt;/strong&gt;. Performance has improved by 15 to 26 times, while prices have dropped 56-fold[3,4,5], certainly validating the rule of thumb at a magnitude level.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-4.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HDD/SSD Performance in 2013&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-5.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-5.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NVMe Gen4 SSD in 2022&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A decade ago, mechanical hard drives dominated the market. A 1TB hard drive cost about seven or eight hundred yuan, and a 64GB SSD was even more expensive. Ten years later, a mainstream 3.2TB enterprise-grade NVMe SSD costs just three thousand yuan. Considering a five-year warranty, the monthly cost per TB is only &lt;strong&gt;16&lt;/strong&gt; yuan, with an annual cost under &lt;strong&gt;200&lt;/strong&gt; yuan. For reference, cloud providers&amp;rsquo; reputedly cost-effective S3 object storage costs &lt;strong&gt;1800¥/TB·year.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-6.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-6.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Price per unit of SSD/HDD from 2013 to 2030 with predictions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The typical fourth-generation local NVMe disk can reach a maximum capacity of &lt;strong&gt;32TB to 64TB&lt;/strong&gt;, offering &lt;strong&gt;70µs/10µs&lt;/strong&gt; 4K random read/write latencies, and &lt;strong&gt;1600K/600K&lt;/strong&gt; read/write IOPS, with the fifth generation boasting an astonishing bandwidth of &lt;strong&gt;several GB/s&lt;/strong&gt; per card.&lt;/p&gt;
&lt;p&gt;Equipping a classic Dell 64C / 512G server with such a card, factoring in five years of IDC depreciation, the total cost is under one hundred thousand yuan. Such a server running PostgreSQL &lt;strong&gt;sysbench&lt;/strong&gt; can nearly reach one million QPS for single-point writes and two million QPS for point queries without issue.&lt;/p&gt;
&lt;p&gt;What does this mean? For a typical mid-sized internet company/bank, the demand for database requests is usually in the tens of thousands to hundreds of thousands of QPS, with non-repeated TP data volumes fluctuating around hundreds of TBs. Considering hardware storage compression cards can achieve several times compression ratio, such scenarios might now be manageable by a centralized database on a single machine and card under modern hardware conditions[6].&lt;/p&gt;
&lt;p&gt;Previously, users might have had to invest millions in high-end storage solutions like exadata, then spend a fortune on Oracle commercial database licenses and original factory services. Now, achieving similar outcomes starts with just a few thousand yuan on an enterprise-grade SSD card; open-source Oracle alternatives like PostgreSQL, capable of smoothly running the largest single tables of 32TB, no longer suffer from the limitations that once forced MySQL into partitioning. High-performance database services, once luxury items restricted to intelligence/banking sectors, have become affordable for all industries[7].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cost-effectiveness is the primary product strength&lt;/strong&gt;. The cost-effectiveness of high-performance, large-capacity storage has improved by three orders of magnitude over a decade, making the once-highlighted value of distributed databases appear weak in the face of such remarkable hardware evolution.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-predicament-of-false-needs&#34;&gt;The Predicament of False Needs&lt;/h2&gt;
&lt;p&gt;Nowadays, sacrificing functionality, performance, complexity for scalability is most likely to be a fake-demands in most scenarios.&lt;/p&gt;
&lt;p&gt;With the support of modern hardware, over 99% of real-world scenarios do not exceed the capabilities of a centralized, single-machine database. The remaining scenarios can likely be addressed through classical engineering methods like horizontal or vertical splitting. This holds true even for internet companies: even among the global top firms, scenarios where a transactional (TP) single table exceeds several tens of TBs are still rare.&lt;/p&gt;
&lt;p&gt;Google Spanner, the forefather of NewSQL, was designed to solve the problem of massive data scalability, but how many enterprises actually handle data volumes comparable to Google&amp;rsquo;s? In terms of data volume, the lifetime TP data volume for the vast majority of enterprises will not exceed the bottleneck of a centralized database, which continues to grow exponentially with Moore&amp;rsquo;s Law. Regarding request throughput, many enterprises have enough database performance headroom to implement all their business logic in stored procedures and run it smoothly within the database.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;Premature optimization is the root of all evil&lt;/em&gt;,&amp;rdquo; designing for unneeded scale is a waste of effort. If volume is no longer an issue, then sacrificing other attributes for unneeded volume becomes meaningless.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-7.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-7.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Premature optimization is the root of all evil”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;In many subfields of databases, distributed technology is not a pseudo-requirement&lt;/strong&gt;: if you need a highly reliable, disaster-resilient, simple, low-frequency KV storage for metadata, then a distributed etcd is a suitable choice; if you require a globally distributed table for arbitrary reads and writes across different locations and are willing to endure significant performance degradation, then YugabyteDB might be a good choice. For ensuring transparency and preventing tampering and denial, blockchain is fundamentally a leaderless distributed ledger database;&lt;/p&gt;
&lt;p&gt;For large-scale data analytics (OLAP), distributed technology is &lt;strong&gt;indispensable&lt;/strong&gt; (though this is usually referred to as data warehousing, MPP); however, in the transaction processing (OLTP) domain, distributed technology is &lt;strong&gt;largely unnecessary&lt;/strong&gt;: OLTP databases are like working memory, characterized by being small, fast, and feature-rich. Even in very large business systems, the active working set at any one moment is not particularly large. A basic rule of thumb for OLTP system design is: &lt;strong&gt;If your problem can be solved within a single machine, don&amp;rsquo;t bother with distributed databases&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt; databases have a history spanning several decades, with existing cores developing to a mature stage. Standards in the TP domain are gradually converging towards three Wire Protocols: PostgreSQL, MySQL, and Oracle. If the discussion is about tinkering with database auto-sharding and adding global transactions as a form of &amp;ldquo;distribution,&amp;rdquo; it&amp;rsquo;s definitely a dead end. If a &amp;ldquo;distributed&amp;rdquo; database manages to break through, it&amp;rsquo;s likely not because of the &amp;ldquo;pseudo-requirement&amp;rdquo; of &amp;ldquo;distribution,&amp;rdquo; but rather due to new features, open-source ecosystems, compatibility, ease of use, domestic innovation, and self-reliance.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-struggles-in-confusion&#34;&gt;The Struggles in Confusion&lt;/h2&gt;
&lt;p&gt;The greatest challenge for distributed databases stems from the market structure: &lt;strong&gt;Internet companies, the most likely candidates to utilize distributed TP databases, are paradoxically the least likely to pay for them&lt;/strong&gt;. Internet companies can serve as high-quality users or even contributors, offering case studies, feedback, and PR, but they inherently resist the notion of financially supporting software, clashing with their &lt;strong&gt;meme instincts&lt;/strong&gt;. Even leading distributed database vendors face the challenge of being applauded but not financially supported.&lt;/p&gt;
&lt;p&gt;In a recent casual conversation with an engineer at a distributed database company, it was revealed that during a POC with a client, a query that Oracle completed in 10 seconds, their distributed database could only match with an order of magnitude difference, even when utilizing various resources and Dirty Hacks. Even openGauss, which forked from PostgreSQL 9.2 a decade ago, can outperform many distributed databases in certain scenarios, not to mention the advancements seen in PostgreSQL 15 and Oracle 23c ten years later. This gap is so significant that even the original manufacturers are left puzzled about the future direction of distributed databases.&lt;/p&gt;
&lt;p&gt;Thus, some distributed databases have started pivoting towards self-rescue, with &lt;strong&gt;HTAP&lt;/strong&gt; being a prime example: while transaction processing in a distributed setting is suboptimal, analytics can benefit greatly. So, why not combine the two? A single system capable of handling both transactions and analytics! However, engineers in the real world understand that &lt;strong&gt;AP systems and TP systems each have their own patterns, and forcibly merging two diametrically opposed systems will only result in both tasks failing to succeed&lt;/strong&gt;. Whether it&amp;rsquo;s classic ETL/CDC pushing and pulling to specialized solutions like ClickHouse/Greenplum/Doris, or logical replication to a dedicated in-memory columnar store, any of these approaches is more reliable than using a chimera HTAP database.&lt;/p&gt;
&lt;p&gt;Another idea is &lt;strong&gt;monolithic-distributed integration&lt;/strong&gt;: &lt;strong&gt;if you can&amp;rsquo;t beat them, join them&lt;/strong&gt; by adding a monolithic mode to avoid the high costs of network RPCs, ensuring that in 99% of scenarios where distributed capabilities are unnecessary, they aren&amp;rsquo;t completely outperformed by centralized databases — &lt;strong&gt;even if distributed isn&amp;rsquo;t needed, it&amp;rsquo;s essential to stay in the game and prevent others from taking the lead!&lt;/strong&gt; But the fundamental issue here is the same as with HTAP: forcing heterogeneous data systems together is pointless. If there was value in doing so, why hasn&amp;rsquo;t anyone created a monolithic binary that integrates all heterogeneous databases into a do-it-all behemoth — &lt;strong&gt;the Database Jack-of-all-trades?&lt;/strong&gt; Because it violates the KISS principle: &lt;strong&gt;Keep It Simple, Stupid!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;distributive-bullshit-8.png&#34; src=&#34;/zh/blog/db/distributive-bullshit/distributive-bullshit-8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The plight of distributed databases is similar to that of &lt;strong&gt;Middle Data Platforms&lt;/strong&gt;: originating from internal scenarios at major internet companies and solving domain-specific problems. Once riding the wave of the internet industry, the discussion of databases was dominated by distributed technologies, enjoying a moment of pride. However, due to excessive hype and promises of unrealistic capabilities, they failed to meet user expectations, ending in disappointment and becoming akin to the emperor&amp;rsquo;s new clothes.&lt;/p&gt;
&lt;p&gt;There are still many areas within the TP database field worthy of focus: Leveraging new hardware, actively embracing changes in underlying architectures like CXL, RDMA, NVMe; or providing simple and intuitive declarative interfaces to make database usage and management more convenient; offering more intelligent automatic monitoring and control systems to minimize operational tasks; developing compatibility plugins like Babelfish for MySQL/Oracle, aiming for a unified relational database WireProtocol. Even investing in better support services would be more meaningful than chasing the false need for &amp;ldquo;distributed&amp;rdquo; features.&lt;/p&gt;
&lt;p&gt;Time changes, and a wise man adapts. It is hoped that distributed database vendors will find their Product-Market Fit and focus on what users truly need.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485399&amp;idx=1&amp;sn=0b7d5a7dc24295afcc56ec688b2c2d06&amp;chksm=fe4b320cc93cbb1a369f9c9a7c50811c6a4f784fd2dd070f6ce5b16378502b8e5c7c76b716e1&amp;scene=21#wechat_redirect&#34;&gt;数据库需求层次金字塔 &lt;/a&gt;: &lt;em&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/1xR92Z67kvvj2_NpUMie1Q&#34;&gt;https://mp.weixin.qq.com/s/1xR92Z67kvvj2_NpUMie1Q&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485240&amp;idx=1&amp;sn=9052f03ae2ef21d9e21037fd7a1fa7fe&amp;chksm=fe4b32e3c93cbbf522616346c1afd49e1e6edbb0898694df224fe2134a69c0c4562aab35587a&amp;scene=21#wechat_redirect&#34;&gt;PostgreSQL到底有多强？&lt;/a&gt; : &lt;em&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/651zXDKGwFy8i0Owrmm-Xg&#34;&gt;https://mp.weixin.qq.com/s/651zXDKGwFy8i0Owrmm-Xg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[3] SSD Performence in 2013 : &lt;em&gt;&lt;a href=&#34;https://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf&#34;&gt;https://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[4] 2022 Micron NVMe SSD Spec: &lt;em&gt;&lt;a href=&#34;https://media-www.micron.com/-/media/client/global/documents/products/product-flyer/9400_nvme_ssd_product_brief.pdf&#34;&gt;https://media-www.micron.com/-/media/client/global/documents/products/product-flyer/9400_nvme_ssd_product_brief.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[5] 2013-2030 SSD Pricing : &lt;em&gt;&lt;a href=&#34;https://blocksandfiles.com/2021/01/25/wikibon-ssds-vs-hard-drives-wrights-law/&#34;&gt;https://blocksandfiles.com/2021/01/25/wikibon-ssds-vs-hard-drives-wrights-law/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzIxNTQ0MDQxNg==&amp;mid=2247516311&amp;idx=1&amp;sn=b93dc765a952f998ccea6e85ebfb7b8d&amp;scene=21#wechat_redirect&#34;&gt;Single Instance with 100TB&lt;/a&gt;: &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzIxNTQ0MDQxNg==&amp;mid=2247516311&amp;idx=1&amp;sn=b93dc765a952f998ccea6e85ebfb7b8d&amp;scene=21#wechat_redirect&#34;&gt;&lt;em&gt;https://mp.weixin.qq.com/s/JSQPzep09rDYbM-x5ptsZA&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzU5ODAyNTM5Ng==&amp;mid=2247485391&amp;idx=1&amp;sn=4cec9af2b58160eb345a6b12411f0b68&amp;chksm=fe4b3214c93cbb023c13a89133c75bf1e88e1543de9359df7447498e4a9d5ec555313a954566&amp;scene=21#wechat_redirect&#34;&gt;EBS: Scam&lt;/a&gt;: &lt;em&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/UxjiUBTpb1pRUfGtR9V3ag&#34;&gt;https://mp.weixin.qq.com/s/UxjiUBTpb1pRUfGtR9V3ag&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[8] &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=Mzg3NjcyNDk3MQ==&amp;mid=2247486918&amp;idx=1&amp;sn=c1c0331b01e2c91e65ec6ed755093582&amp;scene=21#wechat_redirect&#34;&gt;中台：一场彻头彻尾的自欺欺人&lt;/a&gt;: &lt;em&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VgTU7NcOwmrX-nbrBBeH_w&#34;&gt;https://mp.weixin.qq.com/s/VgTU7NcOwmrX-nbrBBeH_w&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Is running postgres in docker a good idea?</title>
      <link>/blog/db/pg-in-docker/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/db/pg-in-docker/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/zh/blog/db/pg-in-docker/featured_hu7e2c7d211e40b88780ed757c82ffa67e_274139_640x0_resize_q75_catmullrom.jpg" width="640" height="640"/>]]>
        
        &lt;p&gt;For stateless app services, containers are an almost perfect devops solution. However, for stateful services like databases, it&amp;rsquo;s not so straightforward. Whether production databases should be containerized remains controversial.&lt;/p&gt;
&lt;p&gt;From a developer&amp;rsquo;s perspective, I&amp;rsquo;m a big fan of Docker &amp;amp; Kubernetes and believe that they might be the future standard for software deployment and operations. But as a database administrator, I think hosting production databases in Docker/K8S is still a bad idea.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-problems-does-docker-solve&#34;&gt;What problems does Docker solve?&lt;/h2&gt;
&lt;p&gt;Docker is described with terms like lightweight, standardized, portable, cost-effective, efficient, automated, integrated, and high-performance in operations. These claims are valid, as Docker indeed simplifies both development and operations. This explains why many companies are eager to containerize their software and services. However, this enthusiasm sometimes goes to the extreme of containerizing everything, including &lt;strong&gt;production databases&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Containers were originally designed for &lt;strong&gt;stateless&lt;/strong&gt; apps, where temporary data produced by the app is logically part of the container. A service is created with a container and destroyed after use. These apps are stateless, with the state typically stored outside in a database, reflecting the classic architecture and philosophy of containerization.&lt;/p&gt;
&lt;p&gt;But when it comes to containerizing the production database itself, the scenario changes: databases are stateful. To maintain their state without losing it when the container stops, database containers need to &amp;ldquo;punch a hole&amp;rdquo; to the underlying OS, which is named data volumes.&lt;/p&gt;
&lt;p&gt;Such containers are no longer ephemeral entities that can be freely created, destroyed, moved, or transferred; they become bound to the underlying environment. Thus, the many advantages of using containers for traditional apps are not applicable to database containers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reliability&#34;&gt;Reliability&lt;/h2&gt;
&lt;p&gt;Getting software up &amp;amp; running is one thing; ensuring its reliability is another. Databases, central to information systems, are often critical, with failure leading to catastrophic consequences. This reflects common experience: while office software crashes can be tolerated and resolved with restarts, document loss or corruption is unresolvable and disastrous. Database failure without replica &amp;amp; backups can be terminal, particularly for internet/finance companies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt; is the paramount attribute for databases. It&amp;rsquo;s the system&amp;rsquo;s ability to function correctly during adversity (hardware/software faults, human error), i.e. fault tolerance and resilience. Unlike &lt;strong&gt;liveness attribute&lt;/strong&gt; such as performance, reliability, a safety attribute, proves itself over time or falsify by failures, often overlooked until disaster strikes.&lt;/p&gt;
&lt;p&gt;Docker&amp;rsquo;s description notably omits &amp;ldquo;reliability&amp;rdquo; —— the crucial attribute for database.&lt;/p&gt;
&lt;h3 id=&#34;reliability-proof&#34;&gt;Reliability Proof&lt;/h3&gt;
&lt;p&gt;As mentioned, reliability lacks a definitive measure. Confidence in a system&amp;rsquo;s reliability builds over time through consistent, correct operation (MTTF). Deploying databases on bare metal has been a long-standing practice, proven reliable over decades. Docker, despite revolutionizing DevOps, has a mere ten-year track record, which is insufficient for establishing reliability, especially for mission-critical production databases. In essence, &lt;strong&gt;there haven&amp;rsquo;t been enough &amp;ldquo;guinea pigs&amp;rdquo; to clear the minefield&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;community-knowledge&#34;&gt;Community Knowledge&lt;/h3&gt;
&lt;p&gt;Improving reliability hinges on learning from failures. Failures are invaluable, turning unknowns into knowns and forming the bedrock of operational knowledge. &lt;strong&gt;Community experience with failures is predominantly based on bare-metal deployments&lt;/strong&gt;, with a plethora of issues well-trodden over decades. Encountering a problem often means finding a well-documented solution, thanks to previous experiences. However, add &amp;ldquo;Docker&amp;rdquo; to the mix, and the pool of useful information shrinks significantly. This implies a lower success rate in data recovery and longer times to resolve complex issues when they arise.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A subtle reality is that, without compelling reasons, businesses and individuals are generally reluctant to share experiences with failures. Failures can tarnish a company’s reputation, potentially exposing sensitive data or reflecting poorly on the organization and team. Moreover, insights from failures are often the result of costly lessons and financial losses, representing core value for operations personnel, thus public documentation on failures is scarce.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;extra-failure-point&#34;&gt;Extra Failure Point&lt;/h3&gt;
&lt;p&gt;Running databases in Docker doesn&amp;rsquo;t reduce the chances of hardware failures, software bugs, or human errors. Hardware issues persist with or without Docker. Software defects, mainly application bugs, aren&amp;rsquo;t lessened by containerization, and the same goes for human errors. In fact, Docker introduces &lt;strong&gt;extra components, complexity, and failure points, decreasing overall system reliability&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Consider this simple scenario: if the Docker daemon crashes, the database process dies. Such incidents, albeit rare, are non-existent on bare-metal.&lt;/p&gt;
&lt;p&gt;Moreover, the failure points from an additional component like Docker aren’t limited to Docker itself. Issues could arise from interactions between Docker and the database, the OS, orchestration systems, VMs, networks, or disks. For evidence, see the issue tracker for the official PostgreSQL Docker image: &lt;a href=&#34;https://github.com/docker-library/postgres/issues?q=&#34;&gt;https://github.com/docker-library/postgres/issues?q=&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intellectual power doesn&amp;rsquo;t easily stack&lt;/strong&gt; — a team&amp;rsquo;s intellect relies on the few seasoned members and their communication overhead. Database issues require database experts; container issues, container experts. However, when databases are deployed on kubernetes &amp;amp; dockers, merging the expertise of database and K8S specialists is challenging — you need a dual-expert to resolve issues, and such individuals are rarer than specialists in one domain.&lt;/p&gt;
&lt;p&gt;Moreover, one man&amp;rsquo;s meat is another man&amp;rsquo;s poison. Certain Docker features might turn into bugs under specific conditions.&lt;/p&gt;
&lt;h3 id=&#34;unnecessary-isolation&#34;&gt;Unnecessary Isolation&lt;/h3&gt;
&lt;p&gt;Docker provides process-level isolation, which generally benefits applications by reducing interaction-related issues, thereby enhancing system reliability. However, this isolation isn&amp;rsquo;t always advantageous for databases.&lt;/p&gt;
&lt;p&gt;A subtle &lt;strong&gt;real-world case&lt;/strong&gt; involved starting two PostgreSQL server on the same data directory, either on the host or one in the host and another inside a container. On bare metal, the second instance would fail to start as PostgreSQL recognizes the existing instance and refuses to launch; however, Docker&amp;rsquo;s &lt;strong&gt;isolation&lt;/strong&gt; allows the second instance to start obliviously, potentially &lt;strong&gt;toast&lt;/strong&gt; the data files if proper fencing mechanisms (like host port or PID file exclusivity) aren&amp;rsquo;t in place.&lt;/p&gt;
&lt;p&gt;Do databases need isolation? Absolutely, but not this kind. Databases often demand dedicated physical machines for performance reasons, with only the database process and essential tools running. Even in containers, they&amp;rsquo;re typically bound exclusively to physical/virtual machines. Thus, the type of isolation Docker provides is somewhat irrelevant for such deployments, though it is a handy feature for cloud providers to efficiently oversell in a multi-tenant environment.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;maintainability&#34;&gt;Maintainability&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker simplify the day one setup, but bring much more troubles on day two operation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The bulk of software expenses isn&amp;rsquo;t in initial development but in ongoing maintenance, which includes fixing vulnerabilities, ensuring operational continuity, handling outages, upgrading versions, repaying technical debt, and adding new features. Maintainability is crucial for the quality of life in operations work. Docker shines in this aspect with its infrastructure-as-code approach, effectively turning operational knowledge into reusable code, accumulating it in a streamlined manner rather than scattered across various installation/setup documents. Docker excels here, especially for stateless applications with frequently changing logic. Docker and Kubernetes facilitate deployment, scaling, publishing, and rolling upgrades, allowing Devs to perform Ops tasks, and Ops to handle DBA duties (somewhat convincingly).&lt;/p&gt;
&lt;h3 id=&#34;day-1-setup&#34;&gt;Day 1 Setup&lt;/h3&gt;
&lt;p&gt;Perhaps Docker&amp;rsquo;s greatest strength is the standardization of environment configuration. A standardized environment aids in delivering changes, discussing issues, and reproducing bugs. Using binary images (essentially materialized Dockerfile installation scripts) is quicker and easier to manage than running installation scripts. Not having to rebuild complex, dependency-heavy extensions each time is a notable advantage.&lt;/p&gt;
&lt;p&gt;Unfortunately, databases don&amp;rsquo;t behave like typical business applications with frequent updates, and creating new instances or delivering environments is a rare operation. Additionally, DBAs often accumulate various installation and configuration scripts, making environment setup almost as fast as using Docker. Thus, Docker&amp;rsquo;s advantage in environment configuration isn&amp;rsquo;t as pronounced, falling into the &amp;ldquo;nice to have&amp;rdquo; category. Of course, in the absence of a dedicated DBA, using Docker images might still be preferable as they encapsulate some operational experience.&lt;/p&gt;
&lt;p&gt;Typically, it&amp;rsquo;s not unusual for databases to run continuously for months or years after initialization. The primary aspect of database management isn&amp;rsquo;t creating new instances or delivering environments, but the day-to-day operations — Day2 Operation. Unfortunately, Docker doesn&amp;rsquo;t offer much benefit in this area and can introduce additional complications.&lt;/p&gt;
&lt;h3 id=&#34;day2-operation&#34;&gt;Day2 Operation&lt;/h3&gt;
&lt;p&gt;Docker can significantly streamline the maintenance of stateless apps, enabling easy create/destroy, version upgrades, and scaling. However, does this extend to databases?&lt;/p&gt;
&lt;p&gt;Unlike app containers, database containers can&amp;rsquo;t be freely destroyed or created. Docker doesn&amp;rsquo;t enhance the operational experience for databases; tools like Ansible are more beneficial. Often, operations require executing scripts inside containers via &lt;code&gt;docker exec&lt;/code&gt;, adding unnecessary complexity.&lt;/p&gt;
&lt;p&gt;CLI tools often struggle with Docker integration. For instance, &lt;code&gt;docker exec&lt;/code&gt; mixes &lt;code&gt;stderr&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;, breaking pipeline-dependent commands. In bare-metal deployments, certain ETL tasks for PostgreSQL can be easily done with a single Bash line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psql &amp;lt;src-url&amp;gt; -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;COPY tbl TO STDOUT&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; psql &amp;lt;dst-url&amp;gt; -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;COPY tdb FROM STDIN&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yet, without proper client binaries on the host, one must awkwardly use Docker&amp;rsquo;s binaries like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -it srcpg gosu postgres bash -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;psql -c \&amp;#34;COPY tbl TO STDOUT\&amp;#34; 2&amp;gt;/dev/null&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  docker &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -i dstpg gosu postgres psql -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;COPY tbl FROM STDIN;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;complicating simple commands like physical backups, which require layers of command wrapping:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -i postgres_pg_1 gosu postgres bash -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;pg_basebackup -Xf -Ft -c fast -D - 2&amp;gt;/dev/null&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; tar -xC /tmp/backup/basebackup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;gosu&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;pg_basebackup&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Client-side applications (&lt;code&gt;psql&lt;/code&gt;, &lt;code&gt;pg_basebackup&lt;/code&gt;, &lt;code&gt;pg_dump&lt;/code&gt;) can bypass these issues with version-matched client tools on the host, but server-side solutions lack such workarounds. Upgrading containerized database software shouldn&amp;rsquo;t necessitate host server binary upgrades.&lt;/p&gt;
&lt;p&gt;Docker advocates for easy software versioning; updating a minor database version is straightforward by tweaking the Dockerfile and restarting the container. However, major version upgrades requiring state modification are more complex in Docker, often leading to convoluted processes like those in &lt;a href=&#34;https://github.com/tianon/docker-postgres-upgrade&#34;&gt;https://github.com/tianon/docker-postgres-upgrade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If database containers can&amp;rsquo;t be scheduled, scaled, or maintained as easily as AppServers, why use them in production? While stateless apps benefit from Docker and Kubernetes&amp;rsquo; scaling ease, stateful applications like databases don&amp;rsquo;t enjoy such flexibility. Replicating a large production database is time-consuming and manual, questioning the efficiency of using &lt;code&gt;docker run&lt;/code&gt; for such operations.&lt;/p&gt;
&lt;p&gt;Docker&amp;rsquo;s awkwardness in hosting production databases stems from the stateful nature of databases, requiring additional setup steps. Setting up a new PostgreSQL replica, for instance, involves a local data directory clone and starting the &lt;code&gt;postmaster&lt;/code&gt; process. Container lifecycle tied to a single process complicates database scaling and replication, leading to inelegant and complex solutions. This process isolation in containers, or &amp;ldquo;abstraction leakage,&amp;rdquo; fails to neatly cover the multiprocess, multitasking nature of databases, introducing unnecessary complexity and affecting maintainability.&lt;/p&gt;
&lt;p&gt;In conclusion, while Docker can improve system maintainability in some aspects, like simplifying new instance creation, the introduced complexities often undermine these benefits.&lt;/p&gt;
&lt;h3 id=&#34;tooling&#34;&gt;Tooling&lt;/h3&gt;
&lt;p&gt;Databases require tools for maintenance, including a variety of operational scripts, deployment, backup, archiving, failover, version upgrades, plugin installation, connection pooling, performance analysis, monitoring, tuning, inspection, and repair. Most of these tools are designed for bare-metal deployments. Like databases, these tools need thorough and careful testing. Getting something to run versus ensuring its stable, long-term, and correct operation are distinct levels of reliability.&lt;/p&gt;
&lt;p&gt;A simple example is plugin and package management. PostgreSQL offers many useful plugins, such as PostGIS. On bare metal, installing this plugin is as easy as executing &lt;code&gt;yum install&lt;/code&gt; followed by &lt;code&gt;create extension postgis&lt;/code&gt;. However, in Docker, following best practices requires making changes at the image level to persist the extension beyond container restarts. This necessitates modifying the Dockerfile, rebuilding the image, pushing it to the server, and restarting the database container, undeniably a more cumbersome process.&lt;/p&gt;
&lt;p&gt;Package management is a core aspect of OS distributions. Docker complicates this, as many PostgreSQL binaries are distributed not as RPM/DEB packages but as Docker images with pre-installed extensions. This raises a significant issue: how to consolidate multiple disparate images if one needs to use two, three, or over a hundred extensions from the PostgreSQL ecosystem? Compared to reliable OS package management, building Docker images invariably requires more time and effort to function properly.&lt;/p&gt;
&lt;p&gt;Take monitoring as another example. In traditional bare-metal deployment, &lt;strong&gt;machine metrics&lt;/strong&gt; are crucial for database monitoring. Monitoring in containers differs subtly from that on bare metal, and oversight can lead to pitfalls. For instance, the sum of various CPU mode durations always equals 100% on bare metal, but this assumption doesn&amp;rsquo;t necessarily hold in containers. Moreover, monitoring tools relying on the &lt;code&gt;/proc&lt;/code&gt; filesystem may yield metrics in containers that differ significantly from those on bare metal. While such issues are solvable (e.g., mounting the Proc filesystem inside the container), complex and ugly workarounds are generally unwelcome compared to straightforward solutions.&lt;/p&gt;
&lt;p&gt;Similar issues arise with some failure detection tools and common system commands. Theoretically, these could be executed directly on the host, but can we guarantee that the results in the container will be identical to those on bare metal? More frustrating is the emergency troubleshooting process, where necessary tools might be missing in the container, and with no external network access, the Dockerfile→Image→Restart path can be exasperating.&lt;/p&gt;
&lt;p&gt;Treating Docker like a VM, many tools may still function, but this defeats much of Docker&amp;rsquo;s purpose, reducing it to just another package manager. Some argue that Docker enhances system reliability through standardized deployment, given the more controlled environment. While this is true, I believe that if the personnel managing the database understand how to configure the database environment, there&amp;rsquo;s no fundamental difference between scripting environment initialization in a Shell script or in a Dockerfile.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;scalability&#34;&gt;Scalability&lt;/h2&gt;
&lt;p&gt;Performance is another point that people concerned a lot. From the performance perspective, the basic principle of  database deployment is: The close to hardware, The better it is.  Additional isolation &amp;amp; abstraction layer is bad for database performance. More isolation means more overhead, even if it is just an additional &lt;code&gt;memcpy&lt;/code&gt; in the kernel .&lt;/p&gt;
&lt;p&gt;For performance-seeking scenarios, some databases choose to bypass the operating system&amp;rsquo;s page management mechanism to operate the disk directly, while some databases may even use FPGA or GPU to speed up query processing. Docker as a lightweight container, performance suffers not much, and the impact to performance-insensitive scenarios may not be significant, but the extra abstract layer will definitely make performance worse than make it better.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Container and orchestration technologies are valuable for operations, bridging the gap between software and services by aiming to codify and modularize operational expertise and capabilities. Container technology is poised to become the future of package management, while orchestration evolves into a &amp;ldquo;data center distributed cluster operating system,&amp;rdquo; forming the underlying infrastructure runtime for all software. As more challenges are addressed, confidently running both stateful and stateless applications in containers will become feasible. However, for databases, this remains an ideal rather than a practical option, especially in production.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s crucial to reiterate that the above discussion applies specifically to &lt;strong&gt;production databases&lt;/strong&gt;. For development and testing, despite the existence of Vagrant-based virtual machine sandboxes, I advocate for Docker use—many developers are unfamiliar with configuring local test database environments, and Docker provides a clearer, simpler solution. For stateless production applications or those with non-critical derivative state data (like Redis caches), Docker is a good choice. But for core relational databases in production, where data integrity is paramount, one should carefully consider the risks and benefits: What&amp;rsquo;s the value of using Docker here? Can it handle potential issues? Are you prepared to assume the responsibility if things go wrong?&lt;/p&gt;
&lt;p&gt;Every technological decision involves balancing pros and cons, like the core trade-off here of &lt;strong&gt;sacrificing reliability for maintainability&lt;/strong&gt; with Docker. Some scenarios may warrant this, such as cloud providers optimizing for containerization to oversell resources, where container isolation, high resource utilization, and management convenience align well. Here, the benefits might outweigh the drawbacks. However, in many cases, reliability is the top priority, and compromising it for maintainability is not advisable. Moreover, it&amp;rsquo;s debatable whether using Docker significantly eases database management; sacrificing long-term operational maintainability for short-term deployment ease is unwise.&lt;/p&gt;
&lt;p&gt;In conclusion, containerizing production databases is likely not a prudent choice.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
